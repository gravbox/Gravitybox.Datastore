//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 612
using System;
using System.Linq;
using System.ComponentModel;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.SqlClient;
using System.Data;
using System.Data.Entity.ModelConfiguration;
using Gravitybox.Datastore.EFDAL.Entity;
using System.Data.Entity.Core.Objects;

namespace Gravitybox.Datastore.EFDAL
{
	#region EntityMappingConstants Enumeration

	/// <summary>
	/// A map for all entity types in this library
	/// </summary>
	public enum EntityMappingConstants
	{
		/// <summary>
		/// A mapping for the the AppliedPatch entity
		/// </summary>
		AppliedPatch,
		/// <summary>
		/// A mapping for the the CacheInvalidate entity
		/// </summary>
		CacheInvalidate,
		/// <summary>
		/// A mapping for the the ConfigurationSetting entity
		/// </summary>
		ConfigurationSetting,
		/// <summary>
		/// A mapping for the the DeleteQueue entity
		/// </summary>
		DeleteQueue,
		/// <summary>
		/// A mapping for the the DeleteQueueItem entity
		/// </summary>
		DeleteQueueItem,
		/// <summary>
		/// A mapping for the the Housekeeping entity
		/// </summary>
		Housekeeping,
		/// <summary>
		/// A mapping for the the LockStat entity
		/// </summary>
		LockStat,
		/// <summary>
		/// A mapping for the the Repository entity
		/// </summary>
		Repository,
		/// <summary>
		/// A mapping for the the RepositoryActionType entity
		/// </summary>
		RepositoryActionType,
		/// <summary>
		/// A mapping for the the RepositoryLog entity
		/// </summary>
		RepositoryLog,
		/// <summary>
		/// A mapping for the the RepositoryStat entity
		/// </summary>
		RepositoryStat,
		/// <summary>
		/// A mapping for the the Server entity
		/// </summary>
		Server,
		/// <summary>
		/// A mapping for the the ServerStat entity
		/// </summary>
		ServerStat,
		/// <summary>
		/// A mapping for the the ServiceInstance entity
		/// </summary>
		ServiceInstance,
	}

	#endregion

	#region Entity Context

	/// <summary>
	/// The object context for the schema tied to this generated model.
	/// </summary>
	public partial class DatastoreEntities : System.Data.Entity.DbContext, Gravitybox.Datastore.EFDAL.IDatastoreEntities, IContext
	{
		static DatastoreEntities()
		{
			System.Data.Entity.Infrastructure.Interception.DbInterception.Add(new DbInterceptor());
		}

		/// <summary />
		public static Action<string> QueryLogger { get; set; }

		/// <summary>
		/// A unique key for this object instance
		/// </summary>
		public Guid InstanceKey { get; private set; }

		/// <summary />
		protected override void Dispose(bool disposing)
		{
			QueryPreCache.RemoveAll(InstanceKey);
			base.Dispose(disposing);
		}

		/// <summary>
		/// The audit modifier used to mark database edits
		/// </summary>
		protected ContextStartup _contextStartup = new ContextStartup(null);

		private static Dictionary<string, SequentialIdGenerator> _sequentialIdGeneratorCache = new Dictionary<string, SequentialIdGenerator>();
		private static object _seqCacheLock = new object();

		private const string _version = "2.1.0.0.66";
		private const string _modelKey = "c4808261-57ef-4c4b-9c5c-b199c70e73ae";

		/// <summary />
		[field:NonSerialized]
		public event EventHandler<Gravitybox.Datastore.EFDAL.EventArguments.EntityListEventArgs> BeforeSaveModifiedEntity;
		/// <summary />
		protected virtual void OnBeforeSaveModifiedEntity(Gravitybox.Datastore.EFDAL.EventArguments.EntityListEventArgs e)
		{
			if(BeforeSaveModifiedEntity != null)
			{
				BeforeSaveModifiedEntity(this, e);
			}
		}

		/// <summary />
		[field:NonSerialized]
		public event EventHandler<Gravitybox.Datastore.EFDAL.EventArguments.EntityListEventArgs> BeforeSaveAddedEntity;
		/// <summary />
		protected virtual void OnBeforeSaveAddedEntity(Gravitybox.Datastore.EFDAL.EventArguments.EntityListEventArgs e)
		{
			if(BeforeSaveAddedEntity != null)
			{
				BeforeSaveAddedEntity(this, e);
			}
		}

		/// <summary />
		[field:NonSerialized]
		public event EventHandler<Gravitybox.Datastore.EFDAL.EventArguments.EntityListEventArgs> AfterSaveModifiedEntity;
		/// <summary />
		protected virtual void OnAfterSaveModifiedEntity(Gravitybox.Datastore.EFDAL.EventArguments.EntityListEventArgs e)
		{
			if(AfterSaveModifiedEntity != null)
			{
				AfterSaveModifiedEntity(this, e);
			}
		}

		/// <summary />
		[field:NonSerialized]
		public event EventHandler<Gravitybox.Datastore.EFDAL.EventArguments.EntityListEventArgs> AfterSaveAddedEntity;
		/// <summary />
		protected virtual void OnAfterSaveAddedEntity(Gravitybox.Datastore.EFDAL.EventArguments.EntityListEventArgs e)
		{
			if(AfterSaveAddedEntity != null)
			{
				AfterSaveAddedEntity(this, e);
			}
		}

		#region Constructors

		private void ResetContextStartup()
		{
			try
			{
				var frame = new System.Diagnostics.StackFrame(2, true);
				var method = frame.GetMethod();
				int lineNumber = frame.GetFileLineNumber();
				_contextStartup.DebugInfo = method.DeclaringType.ToString() + "." + method.Name + ":" + lineNumber;
			}
			catch { }
		}

		/// <summary>
		/// Initializes a new DatastoreEntities object using the connection string found in the 'DatastoreEntities' section of the application configuration file.
		/// </summary>
		public DatastoreEntities() :
			base(Util.ConvertNormalCS2EFFromConfig("name=DatastoreEntities"))
		{
			InstanceKey = Guid.NewGuid();
			_contextStartup = new EFDAL.ContextStartup(null, true);
			ResetContextStartup();
			try
			{
				var builder = new System.Data.Odbc.OdbcConnectionStringBuilder(Util.StripEFCS2Normal(this.Database.Connection.ConnectionString));
				var timeoutValue = "30";
				if (builder.ContainsKey("connect timeout"))
					timeoutValue = (string) builder["connect timeout"];
				else if (builder.ContainsKey("connection timeout"))
					timeoutValue = (string) builder["connection timeout"];
				var v = Convert.ToInt32(timeoutValue);
				if (v > 0)
					this.CommandTimeout = v;
			}
			catch { }
			this.OnContextCreated();
		}

		/// <summary>
		/// Initialize a new DatastoreEntities object with an audit modifier.
		/// </summary>
		public DatastoreEntities(ContextStartup contextStartup) :
			base(Util.ConvertNormalCS2EFFromConfig("name=DatastoreEntities", contextStartup))
		{
			InstanceKey = Guid.NewGuid();
			_contextStartup = contextStartup;
			ResetContextStartup();
			this.ContextOptions.LazyLoadingEnabled = contextStartup.AllowLazyLoading;
			this.CommandTimeout = contextStartup.CommandTimeout;
			this.OnContextCreated();
		}

		/// <summary>
		/// Initialize a new DatastoreEntities object with an audit modifier.
		/// </summary>
		public DatastoreEntities(ContextStartup contextStartup, string connectionString) :
			base(Util.ConvertNormalCS2EF(connectionString, contextStartup))
		{
			InstanceKey = Guid.NewGuid();
			_contextStartup = contextStartup;
			ResetContextStartup();
			this.ContextOptions.LazyLoadingEnabled = contextStartup.AllowLazyLoading;
			this.CommandTimeout = contextStartup.CommandTimeout;
			this.OnContextCreated();
		}

		/// <summary>
		/// Initialize a new DatastoreEntities object.
		/// </summary>
		public DatastoreEntities(string connectionString) :
			base(Util.ConvertNormalCS2EF(connectionString))
		{
			InstanceKey = Guid.NewGuid();
			_contextStartup = new EFDAL.ContextStartup(null, true);
			ResetContextStartup();
			try
			{
				var builder = new System.Data.Odbc.OdbcConnectionStringBuilder(Util.StripEFCS2Normal(this.Database.Connection.ConnectionString));
				var timeoutValue = "30";
				if (builder.ContainsKey("connect timeout"))
					timeoutValue = (string) builder["connect timeout"];
				else if (builder.ContainsKey("connection timeout"))
					timeoutValue = (string) builder["connection timeout"];
				var v = Convert.ToInt32(timeoutValue);
				if (v > 0)
					this.CommandTimeout = v;
			}
			catch { }
			this.OnContextCreated();
		}

		#endregion

		partial void OnContextCreated();
		partial void OnBeforeSaveChanges(ref bool cancel);
		partial void OnAfterSaveChanges();

		/// <summary>
		/// Model creation event
		/// </summary>
		protected override void OnModelCreating(DbModelBuilder modelBuilder)
		{
			base.OnModelCreating(modelBuilder);
			modelBuilder.Conventions.Remove<System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention>();
			Database.SetInitializer(new CustomDatabaseInitializer<DatastoreEntities>());

			//Manually set the entities that have a security function because their DbSet<> is protected and not set

			#region Hierarchy Mapping
			#endregion

			#region Map Tables
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.AppliedPatch>().ToTable("AppliedPatch", "dbo");
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate>().ToTable("CacheInvalidate", "dbo");
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting>().ToTable("ConfigurationSetting", "dbo");
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.DeleteQueue>().ToTable("DeleteQueue", "dbo");
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem>().ToTable("DeleteQueueItem", "dbo");
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.Housekeeping>().ToTable("Housekeeping", "dbo");
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.LockStat>().ToTable("LockStat", "dbo");
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.Repository>().ToTable("Repository", "dbo");
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType>().ToTable("RepositoryActionType", "dbo");
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.RepositoryLog>().ToTable("RepositoryLog", "dbo");
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.RepositoryStat>().ToTable("RepositoryStat", "dbo");
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.Server>().ToTable("Server", "dbo");
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.ServerStat>().ToTable("ServerStat", "dbo");
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.ServiceInstance>().ToTable("ServiceInstance", "dbo");
			#endregion

			#region Setup Fields

			//Field setup for AppliedPatch entity
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.AppliedPatch>().Property(d => d.Description).IsOptional().HasMaxLength(50);
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.AppliedPatch>().Property(d => d.ID).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.AppliedPatch>().Property(d => d.Timestamp).IsConcurrencyToken(true);

			//Field setup for CacheInvalidate entity
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate>().Property(d => d.AddedDate).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate>().Property(d => d.Count).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate>().Property(d => d.RepositoryId).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate>().Property(d => d.RowId).IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);

			//Field setup for ConfigurationSetting entity
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting>().Property(d => d.ID).IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting>().Property(d => d.Name).IsRequired().HasMaxLength(50);
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting>().Property(d => d.Value).IsRequired().HasMaxLength(2147483647);
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting>().Property(d => d.Timestamp).IsConcurrencyToken(true);

			//Field setup for DeleteQueue entity
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.DeleteQueue>().Property(d => d.IsReady).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.DeleteQueue>().Property(d => d.RepositoryId).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.DeleteQueue>().Property(d => d.RowId).IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);

			//Field setup for DeleteQueueItem entity
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem>().Property(d => d.ParentRowId).IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem>().Property(d => d.RecordIdx).IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

			//Field setup for Housekeeping entity
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.Housekeeping>().Property(d => d.Data).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.Housekeeping>().Property(d => d.ID).IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.Housekeeping>().Property(d => d.Type).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.Housekeeping>().Property(d => d.Timestamp).IsConcurrencyToken(true);

			//Field setup for LockStat entity
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.LockStat>().Property(d => d.CurrentReadCount).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.LockStat>().Property(d => d.DateStamp).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.LockStat>().Property(d => d.Elapsed).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.LockStat>().Property(d => d.Failure).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.LockStat>().Property(d => d.IsWriteLockHeld).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.LockStat>().Property(d => d.LockStatId).IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.LockStat>().Property(d => d.ThreadId).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.LockStat>().Property(d => d.TraceInfo).IsOptional().HasMaxLength(50).HasColumnType("VARCHAR");
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.LockStat>().Property(d => d.WaitingReadCount).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.LockStat>().Property(d => d.WaitingWriteCount).IsRequired();

			//Field setup for Repository entity
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.Repository>().Property(d => d.Changestamp).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.Repository>().Property(d => d.DefinitionData).IsOptional().HasMaxLength(2147483647);
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.Repository>().Property(d => d.Dimensionstamp).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.Repository>().Property(d => d.IsDeleted).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.Repository>().Property(d => d.IsInitialized).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.Repository>().Property(d => d.ItemCount).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.Repository>().Property(d => d.Name).IsRequired().HasMaxLength(50);
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.Repository>().Property(d => d.ParentId).IsOptional();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.Repository>().Property(d => d.RepositoryId).IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.Repository>().Property(d => d.UniqueKey).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.Repository>().Property(d => d.VersionHash).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.Repository>().Property(d => d.Timestamp).IsConcurrencyToken(true);

			//Field setup for RepositoryActionType entity
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType>().Property(d => d.Name).IsRequired().HasMaxLength(50).HasColumnType("VARCHAR");
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType>().Ignore(d => d.RepositoryActionTypeValue);
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType>().Property(d => d.RepositoryActionTypeId).IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);

			//Field setup for RepositoryLog entity
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.RepositoryLog>().Property(d => d.Count).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.RepositoryLog>().Property(d => d.ElapsedTime).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.RepositoryLog>().Property(d => d.IPAddress).IsRequired().HasMaxLength(50).HasColumnType("VARCHAR");
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.RepositoryLog>().Property(d => d.LockTime).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.RepositoryLog>().Property(d => d.Query).IsOptional().HasMaxLength(1000);
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.RepositoryLog>().Property(d => d.QueryId).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.RepositoryLog>().Property(d => d.RepositoryId).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.RepositoryLog>().Property(d => d.RepositoryLogId).IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.RepositoryLog>().Property(d => d.UsedCache).IsRequired();

			//Field setup for RepositoryStat entity
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.RepositoryStat>().Property(d => d.Count).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.RepositoryStat>().Property(d => d.Elapsed).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.RepositoryStat>().Property(d => d.ItemCount).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.RepositoryStat>().Property(d => d.LockTime).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.RepositoryStat>().Property(d => d.ReadLockCount).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.RepositoryStat>().Ignore(d => d.RepositoryActionTypeValue);
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.RepositoryStat>().Property(d => d.RepositoryActionTypeId).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.RepositoryStat>().Property(d => d.RepositoryId).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.RepositoryStat>().Property(d => d.RepositoryStatId).IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.RepositoryStat>().Property(d => d.WaitingLocks).IsRequired();

			//Field setup for Server entity
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.Server>().Property(d => d.Name).IsRequired().HasMaxLength(50);
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.Server>().Property(d => d.ServerId).IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.Server>().Property(d => d.Timestamp).IsConcurrencyToken(true);

			//Field setup for ServerStat entity
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.ServerStat>().Property(d => d.AddedDate).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.ServerStat>().Property(d => d.CachedItems).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.ServerStat>().Property(d => d.MemoryUsageAvailable).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.ServerStat>().Property(d => d.MemoryUsageProcess).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.ServerStat>().Property(d => d.MemoryUsageTotal).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.ServerStat>().Property(d => d.ProcessorUsage).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.ServerStat>().Property(d => d.RepositoryCreateDelta).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.ServerStat>().Property(d => d.RepositoryDeleteDelta).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.ServerStat>().Property(d => d.RepositoryLoadDelta).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.ServerStat>().Property(d => d.RepositoryTotal).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.ServerStat>().Property(d => d.RepositoryUnloadDelta).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.ServerStat>().Property(d => d.ServerId).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.ServerStat>().Property(d => d.ServerStatId).IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);

			//Field setup for ServiceInstance entity
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.ServiceInstance>().Property(d => d.FirstCommunication).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.ServiceInstance>().Property(d => d.InstanceId).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.ServiceInstance>().Property(d => d.LastCommunication).IsRequired();
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.ServiceInstance>().Property(d => d.RowId).IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

			#endregion

			#region Ignore Enum Properties

			modelBuilder.Entity<RepositoryActionType>().Ignore(t => t.RepositoryActionTypeValue);
			modelBuilder.Entity<RepositoryStat>().Ignore(t => t.RepositoryActionTypeValue);

			#endregion

			#region Relations

			//Relation DeleteQueue -> DeleteQueueItem
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem>()
				.HasRequired(a => a.DeleteQueue)
				.WithMany(b => b.DeleteQueueItemList)
				.HasForeignKey(u => new { u.ParentRowId })
				.WillCascadeOnDelete(false);

			//Relation RepositoryActionType -> RepositoryStat
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.RepositoryStat>()
				.HasRequired(a => a.RepositoryActionType)
				.WithMany(b => b.RepositoryStatList)
				.HasForeignKey(u => new { u.RepositoryActionTypeId })
				.WillCascadeOnDelete(false);

			//Relation Server -> ServerStat
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.ServerStat>()
				.HasRequired(a => a.Server)
				.WithMany(b => b.ServerStatList)
				.HasForeignKey(u => new { u.ServerId })
				.WillCascadeOnDelete(false);

			#endregion

			#region Functions


			#endregion

			#region Primary Keys

			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.AppliedPatch>().HasKey(x => new { x.ID });
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate>().HasKey(x => new { x.RowId });
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting>().HasKey(x => new { x.ID });
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.DeleteQueue>().HasKey(x => new { x.RowId });
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem>().HasKey(x => new { x.ParentRowId, x.RecordIdx });
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.Housekeeping>().HasKey(x => new { x.ID });
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.LockStat>().HasKey(x => new { x.LockStatId });
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.Repository>().HasKey(x => new { x.RepositoryId });
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType>().HasKey(x => new { x.RepositoryActionTypeId });
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.RepositoryLog>().HasKey(x => new { x.RepositoryLogId });
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.RepositoryStat>().HasKey(x => new { x.RepositoryStatId });
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.Server>().HasKey(x => new { x.ServerId });
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.ServerStat>().HasKey(x => new { x.ServerStatId });
			modelBuilder.Entity<Gravitybox.Datastore.EFDAL.Entity.ServiceInstance>().HasKey(x => new { x.RowId });

			#endregion

		}

		/// <summary />
		public static void ResetSequentialGuid(EntityMappingConstants entity, string key, Guid seed)
		{
			if (string.IsNullOrEmpty(key))
				throw new Exception("Invalid key");

			lock (_seqCacheLock)
			{
				var k = entity.ToString() + "|" + key;
				if (!_sequentialIdGeneratorCache.ContainsKey(k))
					_sequentialIdGeneratorCache.Add(k, new SequentialIdGenerator(seed));
				else
					_sequentialIdGeneratorCache[k].LastValue = seed;
			}

		}

		/// <summary />
		public static Guid GetNextSequentialGuid(EntityMappingConstants entity, string key)
		{
			if (string.IsNullOrEmpty(key))
				throw new Exception("Invalid key");

			lock (_seqCacheLock)
			{
				var k = entity.ToString() + "|" + key;
				if (!_sequentialIdGeneratorCache.ContainsKey(k))
					ResetSequentialGuid(entity, key, Guid.NewGuid());
				return _sequentialIdGeneratorCache[k].NewId();
			}
		}

        private List<Tuple<string, string>> GetTableHierarchyForUpdate(object entity)
        {
            var retval = new List<Tuple<string, string>>();
            return retval.Distinct().ToList();
        }
		/// <summary>
		/// Persists all updates to the data source and resets change tracking in the object context.
		/// </summary>
		/// <returns>The number of objects in an System.Data.Entity.EntityState.Added, System.Data.Entity.EntityState.Modified, or System.Data.Entity.EntityState.Deleted state when System.Data.Objects.ObjectContext.SaveChanges() was called.</returns>
		public override int SaveChanges()
		{
			var cancel = false;
			OnBeforeSaveChanges(ref cancel);
			if (cancel) return 0;

			//This must be called to truly see all Added/Updated Entities in the ObjectStateManager!!!
			//Items added to context work fine, but children added to parent objects do not i.e. 'ParentObject.ChildItems.Add(newChild)'
			this.ChangeTracker.Entries().Any();

			//Get the added list
			var addedList = this.ObjectContext.ObjectStateManager.GetObjectStateEntries(System.Data.Entity.EntityState.Added);
			var markedTime = System.DateTime.Now;
			//Process added list
			foreach (var item in addedList)
			{
				var entity = item.Entity as IAuditable;
				if (entity != null)
				{
					var audit = entity as IAuditableSet;
					if (audit != null && entity.IsModifyAuditImplemented && entity.ModifiedBy != this.ContextStartup.Modifer)
					{
						if (audit != null) audit.ResetCreatedBy(this.ContextStartup.Modifer);
						if (audit != null) audit.ResetModifiedBy(this.ContextStartup.Modifer);
					}
					if (audit != null)
					{
						audit.CreatedDate = markedTime;
						audit.ModifiedDate = markedTime;
					}
				}
			}
			this.OnBeforeSaveAddedEntity(new EventArguments.EntityListEventArgs { List = addedList });

			var extraScripts = new List<string>();
			//Process modified list
			var modifiedList = this.ObjectContext.ObjectStateManager.GetObjectStateEntries(System.Data.Entity.EntityState.Modified);
			foreach (var item in modifiedList)
			{
				var entity = item.Entity as IAuditable;
				if (entity != null)
				{
					var audit = entity as IAuditableSet;
					if (entity.IsModifyAuditImplemented && entity.ModifiedBy != this.ContextStartup.Modifer)
					{
						if (audit != null) audit.ResetModifiedBy(this.ContextStartup.Modifer);
					}
					audit.ModifiedDate = markedTime;
					//var updateObjects = GetTableHierarchyForUpdate(item.Entity);
					//foreach (var uo in updateObjects)
					//	extraScripts.Add($"UPDATE [{uo.Item1}] SET [{uo.Item2}] = @__modifiedDate");
				}
			}
			this.OnBeforeSaveModifiedEntity(new EventArguments.EntityListEventArgs { List = modifiedList });

			var retval = 0;
			DbContextTransaction customTrans = null;
			try
			{
				_paramList.Clear();
				if (base.Database.CurrentTransaction == null)
					customTrans = base.Database.BeginTransaction();
				retval += QueryPreCache.ExecuteDeletes(this);
				retval += base.SaveChanges();
				retval += QueryPreCache.ExecuteUpdates(this);
				QueryPreCache.ExecuteModifiedScripts(this, extraScripts, markedTime);
				if (customTrans != null)
					customTrans.Commit();
			}
			catch (System.Data.Entity.Validation.DbEntityValidationException ex)
			{
				var sb = new System.Text.StringBuilder();
				foreach (var error in ex.EntityValidationErrors)
				{
					foreach (var validationError in error.ValidationErrors)
					{
						sb.AppendLine(validationError.PropertyName + ": " + validationError.ErrorMessage);
					}
				}
				throw new System.Data.Entity.Validation.DbEntityValidationException(sb.ToString(), ex.EntityValidationErrors);
			}
			catch
			{
				throw;
			}
			finally
			{
				if (customTrans != null)
					customTrans.Dispose();
			}
			this.OnAfterSaveAddedEntity(new EventArguments.EntityListEventArgs { List = addedList });
			this.OnAfterSaveModifiedEntity(new EventArguments.EntityListEventArgs { List = modifiedList });
			OnAfterSaveChanges();
			return retval;
		}

		#region Entity Sets

		/// <summary>
		/// Entity set for AppliedPatch
		/// </summary>
		public virtual DbSet<Gravitybox.Datastore.EFDAL.Entity.AppliedPatch> AppliedPatch { get; set; }

		/// <summary>
		/// Entity set for CacheInvalidate
		/// </summary>
		public virtual DbSet<Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate> CacheInvalidate { get; set; }

		/// <summary>
		/// Entity set for ConfigurationSetting
		/// </summary>
		public virtual DbSet<Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting> ConfigurationSetting { get; set; }

		/// <summary>
		/// Entity set for DeleteQueue
		/// </summary>
		public virtual DbSet<Gravitybox.Datastore.EFDAL.Entity.DeleteQueue> DeleteQueue { get; set; }

		/// <summary>
		/// Entity set for DeleteQueueItem
		/// </summary>
		public virtual DbSet<Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem> DeleteQueueItem { get; set; }

		/// <summary>
		/// Entity set for Housekeeping
		/// </summary>
		public virtual DbSet<Gravitybox.Datastore.EFDAL.Entity.Housekeeping> Housekeeping { get; set; }

		/// <summary>
		/// Entity set for LockStat
		/// </summary>
		public virtual DbSet<Gravitybox.Datastore.EFDAL.Entity.LockStat> LockStat { get; set; }

		/// <summary>
		/// Entity set for Repository
		/// </summary>
		public virtual DbSet<Gravitybox.Datastore.EFDAL.Entity.Repository> Repository { get; set; }

		/// <summary>
		/// Entity set for RepositoryActionType
		/// </summary>
		public virtual DbSet<Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType> RepositoryActionType { get; set; }

		/// <summary>
		/// Entity set for RepositoryLog
		/// </summary>
		public virtual DbSet<Gravitybox.Datastore.EFDAL.Entity.RepositoryLog> RepositoryLog { get; set; }

		/// <summary>
		/// Entity set for RepositoryStat
		/// </summary>
		public virtual DbSet<Gravitybox.Datastore.EFDAL.Entity.RepositoryStat> RepositoryStat { get; set; }

		/// <summary>
		/// Entity set for Server
		/// </summary>
		public virtual DbSet<Gravitybox.Datastore.EFDAL.Entity.Server> Server { get; set; }

		/// <summary>
		/// Entity set for ServerStat
		/// </summary>
		public virtual DbSet<Gravitybox.Datastore.EFDAL.Entity.ServerStat> ServerStat { get; set; }

		/// <summary>
		/// Entity set for ServiceInstance
		/// </summary>
		public virtual DbSet<Gravitybox.Datastore.EFDAL.Entity.ServiceInstance> ServiceInstance { get; set; }

		#endregion

		/// <summary>
		/// The global settings of this context
		/// </summary>
		public virtual ContextStartup ContextStartup
		{
			get { return _contextStartup; }
		}

		/// <summary />
		public virtual System.Data.Entity.Core.Objects.ObjectContextOptions ContextOptions
		{
			get { return this.ObjectContext.ContextOptions; }
		}

		/// <summary>
		/// Determines the version of the model that created this library.
		/// </summary>
		public virtual string Version
		{
			get { return _version; }
		}

		/// <summary>
		/// Determines the key of the model that created this library.
		/// </summary>
		public virtual string ModelKey
		{
			get { return _modelKey; }
		}

		/// <summary>
		/// Determines if the API matches the database connection
		/// </summary>
		public virtual bool IsValidConnection()
		{
			return IsValidConnection(GetConnectionString(), true);
		}

		/// <summary>
		/// Determines if the API matches the database connection
		/// </summary>
		public virtual bool IsValidConnection(bool checkVersion)
		{
			return IsValidConnection(GetConnectionString(), checkVersion);
		}

		/// <summary>
		/// Determines if the API matches the database connection
		/// </summary>
		/// <param name="checkVersion">Determines if the check also includes the exact version of the model</param>
		/// <param name="connectionString">Determines the connection string to use when connecting to the database</param>
		/// <returns></returns>
		public virtual bool IsValidConnection(string connectionString, bool checkVersion = true)
		{
			if (string.IsNullOrEmpty(connectionString))
				return false;

			//Get current version
			var version = GetDBVersion(connectionString);

			//If there is any version then the ModelKey was found, if not found then the database does not contain this model
			if (string.IsNullOrEmpty(version))
				return false;

			if (checkVersion)
			{
				if (version != this.Version)
					return false;
			}

			return true;
		}

		/// <summary>
		/// Retrieves the latest database version for the current model
		/// </summary>
		public string GetDBVersion(string connectionString = null)
		{
			try
			{
				using (var conn = new System.Data.SqlClient.SqlConnection())
				{
					if (string.IsNullOrEmpty(connectionString))
						connectionString = this.ConnectionString;
					conn.ConnectionString = connectionString;
					conn.Open();

					var da = new SqlDataAdapter("select * from sys.tables where name = '__nhydrateschema'", conn);
					var ds = new DataSet();
					da.Fill(ds);
					if (ds.Tables[0].Rows.Count > 0)
					{
						da = new SqlDataAdapter("SELECT * FROM [__nhydrateschema] where [ModelKey] = '" + this.ModelKey + "'", conn);
						ds = new DataSet();
						da.Fill(ds);
						var t = ds.Tables[0];
						if (t.Rows.Count > 0)
						{
							return (string) t.Rows[0]["dbVersion"];
						}
					}
					return string.Empty;
				}
			}
			catch (Exception)
			{
				return string.Empty;
			}
		}

		#region AddItem Methods

		/// <summary>
		/// Adds an entity of to the object context
		/// </summary>
		/// <param name="entity">The entity to add</param>
		public virtual Gravitybox.Datastore.EFDAL.IBusinessObject AddItem(Gravitybox.Datastore.EFDAL.IBusinessObject entity)
		{
			if (entity == null) throw new NullReferenceException();
			var audit = entity as Gravitybox.Datastore.EFDAL.IAuditableSet;
			if (audit != null)
			{
				audit.CreatedBy = _contextStartup.Modifer;
				audit.ModifiedBy = _contextStartup.Modifer;
			}
			if (false) { }
			else if (entity is Gravitybox.Datastore.EFDAL.Entity.AppliedPatch)
			{
				this.AppliedPatch.Add((Gravitybox.Datastore.EFDAL.Entity.AppliedPatch)entity);
			}
			else if (entity is Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate)
			{
				this.CacheInvalidate.Add((Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate)entity);
			}
			else if (entity is Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting)
			{
				this.ConfigurationSetting.Add((Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting)entity);
			}
			else if (entity is Gravitybox.Datastore.EFDAL.Entity.DeleteQueue)
			{
				this.DeleteQueue.Add((Gravitybox.Datastore.EFDAL.Entity.DeleteQueue)entity);
			}
			else if (entity is Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem)
			{
				this.DeleteQueueItem.Add((Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem)entity);
			}
			else if (entity is Gravitybox.Datastore.EFDAL.Entity.Housekeeping)
			{
				this.Housekeeping.Add((Gravitybox.Datastore.EFDAL.Entity.Housekeeping)entity);
			}
			else if (entity is Gravitybox.Datastore.EFDAL.Entity.LockStat)
			{
				this.LockStat.Add((Gravitybox.Datastore.EFDAL.Entity.LockStat)entity);
			}
			else if (entity is Gravitybox.Datastore.EFDAL.Entity.Repository)
			{
				this.Repository.Add((Gravitybox.Datastore.EFDAL.Entity.Repository)entity);
			}
			else if (entity is Gravitybox.Datastore.EFDAL.Entity.RepositoryLog)
			{
				this.RepositoryLog.Add((Gravitybox.Datastore.EFDAL.Entity.RepositoryLog)entity);
			}
			else if (entity is Gravitybox.Datastore.EFDAL.Entity.RepositoryStat)
			{
				this.RepositoryStat.Add((Gravitybox.Datastore.EFDAL.Entity.RepositoryStat)entity);
			}
			else if (entity is Gravitybox.Datastore.EFDAL.Entity.Server)
			{
				this.Server.Add((Gravitybox.Datastore.EFDAL.Entity.Server)entity);
			}
			else if (entity is Gravitybox.Datastore.EFDAL.Entity.ServerStat)
			{
				this.ServerStat.Add((Gravitybox.Datastore.EFDAL.Entity.ServerStat)entity);
			}
			else if (entity is Gravitybox.Datastore.EFDAL.Entity.ServiceInstance)
			{
				this.ServiceInstance.Add((Gravitybox.Datastore.EFDAL.Entity.ServiceInstance)entity);
			}
			return entity;
		}

		#endregion

		#region DeleteItem Methods

		/// <summary>
		/// Deletes an entity from the context
		/// </summary>
		/// <param name="entity">The entity to delete</param>
		public virtual void DeleteItem(IBusinessObject entity)
		{
			if (entity == null) return;
			else this.ObjectContext.DeleteObject(entity);
		}

		#endregion

		/// <summary>
		/// Returns the connection string used for this context object
		/// </summary>
		public string ConnectionString
		{
			get
			{
				try
				{
					if (this.Database.Connection != null && !string.IsNullOrEmpty(this.Database.Connection.ConnectionString))
					{
						return Util.StripEFCS2Normal(this.Database.Connection.ConnectionString);
					}
					else
					{
						return null;
					}
				}
				catch (Exception)
				{
					return null;
				}
			}
		}

		/// <summary>
		/// Returns the globally configured connection string for this context type
		/// </summary>
		internal static string GetConnectionString()
		{
			try
			{
				var a = System.Configuration.ConfigurationManager.ConnectionStrings["DatastoreEntities"];
				if (a != null)
				{
					var s = a.ConnectionString;
					var regEx = new System.Text.RegularExpressions.Regex("provider connection string\\s*=\\s*\"([^\"]*)");
					var m = regEx.Match(s);
					var connString = s;
					if (m != null && m.Groups.Count > 1)
					{
						connString = m.Groups[1].Value;
					}
					return connString;
				}
				else
				{
					throw new Exception("The connection string was not found.");
				}
			}
			catch (Exception)
			{
				throw new Exception("The connection string was not found.");
			}
		}

		#region IDatastore Members

		/// <summary />
		IQueryable<Gravitybox.Datastore.EFDAL.Entity.AppliedPatch> Gravitybox.Datastore.EFDAL.IDatastoreEntities.AppliedPatch
		{
			get { return this.AppliedPatch.AsQueryable(); }
		}

		/// <summary />
		IQueryable<Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate> Gravitybox.Datastore.EFDAL.IDatastoreEntities.CacheInvalidate
		{
			get { return this.CacheInvalidate.AsQueryable(); }
		}

		/// <summary />
		IQueryable<Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting> Gravitybox.Datastore.EFDAL.IDatastoreEntities.ConfigurationSetting
		{
			get { return this.ConfigurationSetting.AsQueryable(); }
		}

		/// <summary />
		IQueryable<Gravitybox.Datastore.EFDAL.Entity.DeleteQueue> Gravitybox.Datastore.EFDAL.IDatastoreEntities.DeleteQueue
		{
			get { return this.DeleteQueue.AsQueryable(); }
		}

		/// <summary />
		IQueryable<Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem> Gravitybox.Datastore.EFDAL.IDatastoreEntities.DeleteQueueItem
		{
			get { return this.DeleteQueueItem.AsQueryable(); }
		}

		/// <summary />
		IQueryable<Gravitybox.Datastore.EFDAL.Entity.Housekeeping> Gravitybox.Datastore.EFDAL.IDatastoreEntities.Housekeeping
		{
			get { return this.Housekeeping.AsQueryable(); }
		}

		/// <summary />
		IQueryable<Gravitybox.Datastore.EFDAL.Entity.LockStat> Gravitybox.Datastore.EFDAL.IDatastoreEntities.LockStat
		{
			get { return this.LockStat.AsQueryable(); }
		}

		/// <summary />
		IQueryable<Gravitybox.Datastore.EFDAL.Entity.Repository> Gravitybox.Datastore.EFDAL.IDatastoreEntities.Repository
		{
			get { return this.Repository.AsQueryable(); }
		}

		/// <summary />
		IQueryable<Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType> Gravitybox.Datastore.EFDAL.IDatastoreEntities.RepositoryActionType
		{
			get { return this.RepositoryActionType.AsQueryable(); }
		}

		/// <summary />
		IQueryable<Gravitybox.Datastore.EFDAL.Entity.RepositoryLog> Gravitybox.Datastore.EFDAL.IDatastoreEntities.RepositoryLog
		{
			get { return this.RepositoryLog.AsQueryable(); }
		}

		/// <summary />
		IQueryable<Gravitybox.Datastore.EFDAL.Entity.RepositoryStat> Gravitybox.Datastore.EFDAL.IDatastoreEntities.RepositoryStat
		{
			get { return this.RepositoryStat.AsQueryable(); }
		}

		/// <summary />
		IQueryable<Gravitybox.Datastore.EFDAL.Entity.Server> Gravitybox.Datastore.EFDAL.IDatastoreEntities.Server
		{
			get { return this.Server.AsQueryable(); }
		}

		/// <summary />
		IQueryable<Gravitybox.Datastore.EFDAL.Entity.ServerStat> Gravitybox.Datastore.EFDAL.IDatastoreEntities.ServerStat
		{
			get { return this.ServerStat.AsQueryable(); }
		}

		/// <summary />
		IQueryable<Gravitybox.Datastore.EFDAL.Entity.ServiceInstance> Gravitybox.Datastore.EFDAL.IDatastoreEntities.ServiceInstance
		{
			get { return this.ServiceInstance.AsQueryable(); }
		}

		/// <summary />
		protected List<string> _paramList = new List<string>();
		#endregion

		#region IContext Interface

		Enum IContext.GetEntityFromField(Enum field)
		{
			return GetEntityFromField(field);
		}

		object IContext.GetMetaData(Enum entity)
		{
			return GetMetaData((EntityMappingConstants)entity);
		}

		System.Type IContext.GetFieldType(Enum field)
		{
			return this.GetFieldType(field);
		}

		#endregion

		#region GetEntityFromField

		/// <summary>
		/// Determines the entity from one of its fields
		/// </summary>
		public static EntityMappingConstants GetEntityFromField(Enum field)
		{
			if (field is Gravitybox.Datastore.EFDAL.Entity.AppliedPatch.FieldNameConstants) return Gravitybox.Datastore.EFDAL.EntityMappingConstants.AppliedPatch;
			if (field is Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants) return Gravitybox.Datastore.EFDAL.EntityMappingConstants.CacheInvalidate;
			if (field is Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants) return Gravitybox.Datastore.EFDAL.EntityMappingConstants.ConfigurationSetting;
			if (field is Gravitybox.Datastore.EFDAL.Entity.DeleteQueue.FieldNameConstants) return Gravitybox.Datastore.EFDAL.EntityMappingConstants.DeleteQueue;
			if (field is Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants) return Gravitybox.Datastore.EFDAL.EntityMappingConstants.DeleteQueueItem;
			if (field is Gravitybox.Datastore.EFDAL.Entity.Housekeeping.FieldNameConstants) return Gravitybox.Datastore.EFDAL.EntityMappingConstants.Housekeeping;
			if (field is Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants) return Gravitybox.Datastore.EFDAL.EntityMappingConstants.LockStat;
			if (field is Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants) return Gravitybox.Datastore.EFDAL.EntityMappingConstants.Repository;
			if (field is Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType.FieldNameConstants) return Gravitybox.Datastore.EFDAL.EntityMappingConstants.RepositoryActionType;
			if (field is Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants) return Gravitybox.Datastore.EFDAL.EntityMappingConstants.RepositoryLog;
			if (field is Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants) return Gravitybox.Datastore.EFDAL.EntityMappingConstants.RepositoryStat;
			if (field is Gravitybox.Datastore.EFDAL.Entity.Server.FieldNameConstants) return Gravitybox.Datastore.EFDAL.EntityMappingConstants.Server;
			if (field is Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants) return Gravitybox.Datastore.EFDAL.EntityMappingConstants.ServerStat;
			if (field is Gravitybox.Datastore.EFDAL.Entity.ServiceInstance.FieldNameConstants) return Gravitybox.Datastore.EFDAL.EntityMappingConstants.ServiceInstance;
			throw new Exception("Unknown field type!");
		}

		#endregion

		#region GetMetaData

		/// <summary>
		/// Gets the meta data object for an entity
		/// </summary>
		public static Gravitybox.Datastore.EFDAL.IMetadata GetMetaData(Gravitybox.Datastore.EFDAL.EntityMappingConstants table)
		{
			switch (table)
			{
				case Gravitybox.Datastore.EFDAL.EntityMappingConstants.AppliedPatch: return new Gravitybox.Datastore.EFDAL.Entity.Metadata.AppliedPatchMetadata();
				case Gravitybox.Datastore.EFDAL.EntityMappingConstants.CacheInvalidate: return new Gravitybox.Datastore.EFDAL.Entity.Metadata.CacheInvalidateMetadata();
				case Gravitybox.Datastore.EFDAL.EntityMappingConstants.ConfigurationSetting: return new Gravitybox.Datastore.EFDAL.Entity.Metadata.ConfigurationSettingMetadata();
				case Gravitybox.Datastore.EFDAL.EntityMappingConstants.DeleteQueue: return new Gravitybox.Datastore.EFDAL.Entity.Metadata.DeleteQueueMetadata();
				case Gravitybox.Datastore.EFDAL.EntityMappingConstants.DeleteQueueItem: return new Gravitybox.Datastore.EFDAL.Entity.Metadata.DeleteQueueItemMetadata();
				case Gravitybox.Datastore.EFDAL.EntityMappingConstants.Housekeeping: return new Gravitybox.Datastore.EFDAL.Entity.Metadata.HousekeepingMetadata();
				case Gravitybox.Datastore.EFDAL.EntityMappingConstants.LockStat: return new Gravitybox.Datastore.EFDAL.Entity.Metadata.LockStatMetadata();
				case Gravitybox.Datastore.EFDAL.EntityMappingConstants.Repository: return new Gravitybox.Datastore.EFDAL.Entity.Metadata.RepositoryMetadata();
				case Gravitybox.Datastore.EFDAL.EntityMappingConstants.RepositoryActionType: return new Gravitybox.Datastore.EFDAL.Entity.Metadata.RepositoryActionTypeMetadata();
				case Gravitybox.Datastore.EFDAL.EntityMappingConstants.RepositoryLog: return new Gravitybox.Datastore.EFDAL.Entity.Metadata.RepositoryLogMetadata();
				case Gravitybox.Datastore.EFDAL.EntityMappingConstants.RepositoryStat: return new Gravitybox.Datastore.EFDAL.Entity.Metadata.RepositoryStatMetadata();
				case Gravitybox.Datastore.EFDAL.EntityMappingConstants.Server: return new Gravitybox.Datastore.EFDAL.Entity.Metadata.ServerMetadata();
				case Gravitybox.Datastore.EFDAL.EntityMappingConstants.ServerStat: return new Gravitybox.Datastore.EFDAL.Entity.Metadata.ServerStatMetadata();
				case Gravitybox.Datastore.EFDAL.EntityMappingConstants.ServiceInstance: return new Gravitybox.Datastore.EFDAL.Entity.Metadata.ServiceInstanceMetadata();
			}
			throw new Exception("Entity not found!");
		}

		/// <summary />
		public static string GetTableName(Gravitybox.Datastore.EFDAL.EntityMappingConstants entity)
		{
			var item = GetMetaData(entity);
			if (item == null) return null;
			return item.GetTableName();
		}
		#endregion

		#region Interface Extras

		/// <summary>
		/// Reloads the context object from database
		/// </summary>
		public void ReloadItem(BaseEntity entity)
		{
			this.Entry(entity).Reload();
		}

		/// <summary>
		/// Detaches the the object from context
		/// </summary>
		public void DetachItem(BaseEntity entity)
		{
			this.ObjectContext.Detach(entity);
		}

		#endregion

		#region ObjectContext

		/// <summary>
		/// Gets the object context
		/// </summary>
		public System.Data.Entity.Core.Objects.ObjectContext ObjectContext
		{
			get
			{
				if (_objectContext == null)
					_objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter)this).ObjectContext;
				return _objectContext;
			}
		}
		private System.Data.Entity.Core.Objects.ObjectContext _objectContext = null;

		/// <summary>
		/// Accepts all changes made to objects in the object context
		/// </summary>
		public void AcceptAllChanges()
		{
			this.ObjectContext.AcceptAllChanges();
		}

		/// <summary>
		/// Determines the timeout of the database connection
		/// </summary>
		public int? CommandTimeout
		{
			get { return this.Database.CommandTimeout; }
			set { this.Database.CommandTimeout = value; }
		}

		#endregion

	}
	#endregion

	internal class CustomDatabaseInitializer<TContext> : IDatabaseInitializer<TContext> where TContext : global::System.Data.Entity.DbContext
	{
		public void InitializeDatabase(TContext context)
		{
		}
	}

	#region DbInterceptor
	internal class DbInterceptor : System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor
	{
		#region IDbCommandInterceptor Members

		void System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.NonQueryExecuted(System.Data.Common.DbCommand command, System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext<int> interceptionContext)
		{
		}

		void System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.NonQueryExecuting(System.Data.Common.DbCommand command, System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext<int> interceptionContext)
		{
		}

		void System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ReaderExecuted(System.Data.Common.DbCommand command, System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext<System.Data.Common.DbDataReader> interceptionContext)
		{
		}

		void System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ReaderExecuting(System.Data.Common.DbCommand command, System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext<System.Data.Common.DbDataReader> interceptionContext)
		{
			try
			{
				//If this is a tenant table then rig query plan for this specific tenant
				if (command.CommandText.Contains("__vw_tenant") || command.CommandText.Contains("__security"))
				{
					var builder = new SqlConnectionStringBuilder(command.Connection.ConnectionString);
					command.CommandText = "--T:" + builder.UserID + "\r\n" + command.CommandText;
				}
				if (DatastoreEntities.QueryLogger != null)
				{
					var debugInfo = ((IDatastoreEntities)(interceptionContext.DbContexts.First())).ContextStartup.DebugInfo;
					DatastoreEntities.QueryLogger(debugInfo + "\r\n" + command.CommandText);
				}
			}
			catch { }
		}

		void System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ScalarExecuted(System.Data.Common.DbCommand command, System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext<object> interceptionContext)
		{
		}

		void System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ScalarExecuting(System.Data.Common.DbCommand command, System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext<object> interceptionContext)
		{
		}

		#endregion
	}
	#endregion
}

namespace Gravitybox.Datastore.EFDAL.Entity
{
}
#pragma warning restore 612

