//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 612
using System;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.ComponentModel;
using System.Collections.Generic;
using System.Text;
using Gravitybox.Datastore.EFDAL;
using Gravitybox.Datastore.EFDAL.EventArguments;
using System.Text.RegularExpressions;
using System.Linq.Expressions;
using System.Data.Entity;
using System.Data.Linq;
using System.Data.Entity.ModelConfiguration;
using System.ComponentModel.DataAnnotations;

namespace Gravitybox.Datastore.EFDAL.Entity
{
	/// <summary>
	/// The 'RepositoryActionType' entity
	/// </summary>
	[DataContract]
	[Serializable]
	[System.CodeDom.Compiler.GeneratedCode("nHydrateModelGenerator", "6.0.0")]
	[FieldNameConstants(typeof(Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType.FieldNameConstants))]
	[System.ComponentModel.DataAnnotations.MetadataType(typeof(Gravitybox.Datastore.EFDAL.Entity.Metadata.RepositoryActionTypeMetadata))]
	[EntityMetadata("RepositoryActionType", false, false, false, false, "", true, true, true, "dbo")]
	public partial class RepositoryActionType : BaseEntity, Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject, System.ICloneable
	{
		#region FieldNameConstants Enumeration

		/// <summary>
		/// Enumeration to define each property that maps to a database field for the 'RepositoryActionType' table.
		/// </summary>
		public enum FieldNameConstants
		{
			/// <summary>
			/// Field mapping for the 'Name' property
			/// </summary>
			[System.ComponentModel.ReadOnly(true)]
			[System.ComponentModel.Description("Field mapping for the 'Name' property")]
			Name,
			/// <summary>
			/// Field mapping for the 'RepositoryActionTypeId' property
			/// </summary>
			[System.ComponentModel.DataAnnotations.Key]
			[System.ComponentModel.ReadOnly(true)]
			[System.ComponentModel.Description("Field mapping for the 'RepositoryActionTypeId' property")]
			RepositoryActionTypeId,
		}
		#endregion

		#region Constructors

		/// <summary>
		/// Initializes a new instance of the Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType class
		/// </summary>
		protected internal RepositoryActionType()
		{

		}

		#endregion

		#region Properties

		/// <summary>
		/// The property that maps back to the database 'RepositoryActionType.Name' field.
		/// </summary>
		/// <remarks>Field: [RepositoryActionType].[Name], Field Length: 50, Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("Name")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual string Name
		{
			get { return _name; }
			protected internal set
			{
				if ((value != null) && (value.Length > GetMaxLength(Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType.FieldNameConstants.Name))) throw new Exception(string.Format(GlobalValues.ERROR_DATA_TOO_BIG, value, "RepositoryActionType.Name", GetMaxLength(Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType.FieldNameConstants.Name)));
				_name = value;
			}
		}

		/// <summary>
		/// This property is a wrapper for the typed enumeration for the 'RepositoryActionTypeId' field.
		/// </summary>
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual Gravitybox.Datastore.EFDAL.RepositoryActionTypeConstants RepositoryActionTypeValue
		{
			get { return (Gravitybox.Datastore.EFDAL.RepositoryActionTypeConstants)this.RepositoryActionTypeId; }
			set { this.RepositoryActionTypeId = (int)value; }
		}

		/// <summary>
		/// The property that maps back to the database 'RepositoryActionType.RepositoryActionTypeId' field.
		/// This property has an additional enumeration wrapper property RepositoryActionTypeValue. Use it as a strongly-typed property.
		/// </summary>
		/// <remarks>Field: [RepositoryActionType].[RepositoryActionTypeId], Not Nullable, Primary Key, AutoNumber, Unique, Indexed</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("RepositoryActionTypeId")]
		[System.ComponentModel.DataAnnotations.Schema.Index(IsUnique = true)]
		[System.ComponentModel.DataAnnotations.Key()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int RepositoryActionTypeId
		{
			get { return _repositoryActionTypeId; }
			protected internal set
			{
				//Error check the wrapped enumeration
				switch(value)
				{
					case 1:
					case 2:
					case 3:
					case 4:
					case 5:
					case 6:
					case 7:
					case 8:
					case 9:
					case 10:
					case 11:
						break;
					default: throw new Exception(string.Format(GlobalValues.ERROR_INVALID_ENUM, value.ToString(), "RepositoryActionType.RepositoryActionTypeId"));
				}

				_repositoryActionTypeId = value;
			}
		}

		#endregion

		#region Property Holders

		/// <summary />
		protected string _name;
		/// <summary />
		protected int _repositoryActionTypeId;

		#endregion

		#region GetMaxLength

		/// <summary>
		/// Gets the maximum size of the field value.
		/// </summary>
		public static int GetMaxLength(Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType.FieldNameConstants field)
		{
			switch (field)
			{
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType.FieldNameConstants.Name:
					return 50;
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType.FieldNameConstants.RepositoryActionTypeId:
					return 0;
			}
			return 0;
		}

		int Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetMaxLength(Enum field)
		{
			return GetMaxLength((Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType.FieldNameConstants)field);
		}

		#endregion

		#region GetFieldNameConstants

		System.Type Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetFieldNameConstants()
		{
			return typeof(Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType.FieldNameConstants);
		}

		#endregion

		#region GetFieldType

		/// <summary>
		/// Gets the system type of a field on this object
		/// </summary>
		public static System.Type GetFieldType(Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType.FieldNameConstants field)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType.FieldNameConstants'.");

			switch ((Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType.FieldNameConstants)field)
			{
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType.FieldNameConstants.Name: return typeof(string);
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType.FieldNameConstants.RepositoryActionTypeId: return typeof(int);
			}
			return null;
		}

		System.Type Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetFieldType(Enum field)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType.FieldNameConstants'.");

			return GetFieldType((Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType.FieldNameConstants)field);
		}

		#endregion

		#region Get/Set Value

		object Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetValue(System.Enum field)
		{
			return ((Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject)this).GetValue(field, null);
		}

		object Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetValue(System.Enum field, object defaultValue)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType.FieldNameConstants'.");
			return this.GetValue((Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType.FieldNameConstants)field, defaultValue);
		}

		#endregion

		#region PrimaryKey

		/// <summary>
		/// Generic primary key for this object
		/// </summary>
		Gravitybox.Datastore.EFDAL.IPrimaryKey Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.PrimaryKey
		{
			get { return new PrimaryKey(Util.HashPK("RepositoryActionType", this.RepositoryActionTypeId)); }
		}

		#endregion

		#region Clone

		/// <summary>
		/// Creates a shallow copy of this object
		/// </summary>
		public virtual object Clone()
		{
			return Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType.Clone(this);
		}

		/// <summary>
		/// Creates a shallow copy of this object with defined, default values and new PK
		/// </summary>
		public virtual object CloneAsNew()
		{
			var item = Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType.Clone(this);
			item._repositoryActionTypeId = 0;
			return item;
		}

		/// <summary>
		/// Creates a shallow copy of this object
		/// </summary>
		public static RepositoryActionType Clone(Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType item)
		{
			var newItem = new RepositoryActionType();
			newItem.Name = item.Name;
			newItem.RepositoryActionTypeId = item.RepositoryActionTypeId;
			return newItem;
		}

		#endregion

		#region GetValue

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		public virtual object GetValue(Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType.FieldNameConstants field)
		{
			return GetValue(field, null);
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		public virtual object GetValue(Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType.FieldNameConstants field, object defaultValue)
		{
			if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType.FieldNameConstants.Name)
				return this.Name;
			if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType.FieldNameConstants.RepositoryActionTypeId)
				return this.RepositoryActionTypeId;
			throw new Exception("Field '" + field.ToString() + "' not found!");
		}

		#endregion

		#region Navigation Properties

		/// <summary>
		/// The navigation definition for walking RepositoryActionType->RepositoryStat
		/// </summary>
		[DataMember]
		[XmlIgnore]
		public virtual ICollection<Gravitybox.Datastore.EFDAL.Entity.RepositoryStat> RepositoryStatList
		{
			get
			{
				if (_RepositoryStatList == null) _RepositoryStatList = new List<Gravitybox.Datastore.EFDAL.Entity.RepositoryStat>();
				return _RepositoryStatList;
			}
			set { _RepositoryStatList = value; }
		}
		/// <summary />
		protected virtual ICollection<Gravitybox.Datastore.EFDAL.Entity.RepositoryStat> _RepositoryStatList { get; set; }

		#endregion

		#region Static SQL Methods

		internal static string GetFieldAliasFromFieldNameSqlMapping(string alias)
		{
			alias = alias.Replace("[", string.Empty).Replace("]", string.Empty);
			switch (alias.ToLower())
			{
				case "name": return "name";
				case "repositoryactiontypeid": return "repositoryactiontypeid";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetTableFromFieldAliasSqlMapping(string alias)
		{
			switch (alias.ToLower())
			{
				case "name": return "RepositoryActionType";
				case "repositoryactiontypeid": return "RepositoryActionType";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetTableFromFieldNameSqlMapping(string field)
		{
			switch (field.ToLower())
			{
				case "name": return "RepositoryActionType";
				case "repositoryactiontypeid": return "RepositoryActionType";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetRemappedLinqSql(string sql, string parentAlias, LinqSQLFromClauseCollection childTables)
		{
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[name\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "RepositoryActionType") + "].[name]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[repositoryactiontypeid\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "RepositoryActionType") + "].[repositoryactiontypeid]", RegexOptions.IgnoreCase);
			return sql;
		}

		#endregion

		#region GetDatabaseFieldName

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		internal static string GetDatabaseFieldName(Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType.FieldNameConstants field)
		{
			return GetDatabaseFieldName(field.ToString());
		}

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		internal static string GetDatabaseFieldName(string field)
		{
			switch (field)
			{
				case "Name": return "Name";
				case "RepositoryActionTypeId": return "RepositoryActionTypeId";
			}
			return string.Empty;
		}

		#endregion

		#region Equals
		/// <summary>
		/// Compares two objects of 'RepositoryActionType' type and determines if all properties match
		/// </summary>
		/// <returns>True if all properties match, false otherwise</returns>
		public override bool Equals(object obj)
		{
			var other = obj as Gravitybox.Datastore.EFDAL.Entity.RepositoryActionType;
			if (other == null) return false;
			return (
				other.Name == this.Name &&
				other.RepositoryActionTypeId == this.RepositoryActionTypeId
				);
		}

		/// <summary>
		/// Serves as a hash function for this type.
		/// </summary>
		public override int GetHashCode()
		{
			return base.GetHashCode();
		}

		#endregion

	}
}

#region Metadata Class

namespace Gravitybox.Datastore.EFDAL.Entity.Metadata
{
	/// <summary>
	/// Metadata class for the 'RepositoryActionType' entity
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("nHydrateModelGenerator", "6.0.0")]
	public partial class RepositoryActionTypeMetadata : Gravitybox.Datastore.EFDAL.IMetadata
	{
		#region Properties

		/// <summary>
		/// Metadata information for the 'Name' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'Name' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.StringLength(50, ErrorMessage = "The property 'Name' has a maximum length of 50")]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "Name", AutoGenerateField = true)]
		public object Name;

		/// <summary>
		/// Metadata information for the 'RepositoryActionTypeId' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'RepositoryActionTypeId' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Key()]
		[System.ComponentModel.ReadOnly(true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "RepositoryActionTypeId", AutoGenerateField = true)]
		public object RepositoryActionTypeId;

		#endregion

		#region Methods
		/// <summary>
		/// Gets the underlying table name.
		/// </summary>
		public virtual string GetTableName()
		{
			return "RepositoryActionType";
		}

		/// <summary>
		/// Gets a list of all object fields with alias/code facade applied excluding inheritance.
		/// </summary>
		public virtual List<string> GetFields()
		{
			var retval = new List<string>();
			retval.Add("Name");
			retval.Add("RepositoryActionTypeId");
			return retval;
		}

		/// <summary>
		/// Returns the type of the parent object if one exists.
		/// </summary>
		public virtual System.Type InheritsFrom()
		{
			return null;
		}

		/// <summary>
		/// Returns the database schema name.
		/// </summary>
		public virtual string Schema()
		{
			return "dbo";
		}

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		public virtual string GetDatabaseFieldName(string field)
		{
			switch (field)
			{
				case "Name": return "Name";
				case "RepositoryActionTypeId": return "RepositoryActionTypeId";
			}
			return string.Empty;
		}

		#endregion

	}

}

#endregion

#pragma warning restore 612

