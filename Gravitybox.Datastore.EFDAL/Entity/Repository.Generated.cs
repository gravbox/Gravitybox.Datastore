//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 612
using System;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.ComponentModel;
using System.Collections.Generic;
using System.Text;
using Gravitybox.Datastore.EFDAL;
using Gravitybox.Datastore.EFDAL.EventArguments;
using System.Text.RegularExpressions;
using System.Linq.Expressions;
using System.Data.Entity;
using System.Data.Linq;
using System.Data.Entity.ModelConfiguration;
using System.ComponentModel.DataAnnotations;

namespace Gravitybox.Datastore.EFDAL.Entity
{
	/// <summary>
	/// The 'Repository' entity
	/// </summary>
	[DataContract]
	[Serializable]
	[System.CodeDom.Compiler.GeneratedCode("nHydrateModelGenerator", "6.0.0")]
	[FieldNameConstants(typeof(Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants))]
	[System.ComponentModel.DataAnnotations.MetadataType(typeof(Gravitybox.Datastore.EFDAL.Entity.Metadata.RepositoryMetadata))]
	[EntityMetadata("Repository", false, true, true, true, "", true, false, false, "dbo")]
	public partial class Repository : BaseEntity, Gravitybox.Datastore.EFDAL.IBusinessObject, System.ICloneable, Gravitybox.Datastore.EFDAL.IAuditable, Gravitybox.Datastore.EFDAL.IAuditableSet, Gravitybox.Datastore.EFDAL.ICreatable
	{
		#region FieldNameConstants Enumeration

		/// <summary>
		/// Enumeration to define each property that maps to a database field for the 'Repository' table.
		/// </summary>
		public enum FieldNameConstants
		{
			/// <summary>
			/// Field mapping for the 'Changestamp' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'Changestamp' property")]
			Changestamp,
			/// <summary>
			/// Field mapping for the 'DefinitionData' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'DefinitionData' property")]
			DefinitionData,
			/// <summary>
			/// Field mapping for the 'Dimensionstamp' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'Dimensionstamp' property")]
			Dimensionstamp,
			/// <summary>
			/// Field mapping for the 'IsDeleted' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'IsDeleted' property")]
			IsDeleted,
			/// <summary>
			/// Field mapping for the 'IsInitialized' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'IsInitialized' property")]
			IsInitialized,
			/// <summary>
			/// Field mapping for the 'ItemCount' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'ItemCount' property")]
			ItemCount,
			/// <summary>
			/// Field mapping for the 'Name' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'Name' property")]
			Name,
			/// <summary>
			/// Field mapping for the 'ParentId' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'ParentId' property")]
			ParentId,
			/// <summary>
			/// Field mapping for the 'RepositoryId' property
			/// </summary>
			[System.ComponentModel.DataAnnotations.Key]
			[System.ComponentModel.ReadOnly(true)]
			[System.ComponentModel.Description("Field mapping for the 'RepositoryId' property")]
			RepositoryId,
			/// <summary>
			/// Field mapping for the 'UniqueKey' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'UniqueKey' property")]
			UniqueKey,
			/// <summary>
			/// Field mapping for the 'VersionHash' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'VersionHash' property")]
			VersionHash,
			/// <summary>
			/// Field mapping for the 'CreatedBy' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'CreatedBy' property")]
			CreatedBy,
			/// <summary>
			/// Field mapping for the 'CreatedDate' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'CreatedDate' property")]
			CreatedDate,
			/// <summary>
			/// Field mapping for the 'ModifiedBy' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'ModifiedBy' property")]
			ModifiedBy,
			/// <summary>
			/// Field mapping for the 'ModifiedDate' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'ModifiedDate' property")]
			ModifiedDate,
		}
		#endregion

		#region Constructors

		/// <summary>
		/// Initializes a new instance of the Gravitybox.Datastore.EFDAL.Entity.Repository class
		/// </summary>
		public Repository()
		{
			this._changestamp = 0;
			this._dimensionstamp = 0;
			this._isDeleted = false;
			this._isInitialized = true;

		}

		#endregion

		#region Properties

		/// <summary>
		/// Value is reset on when a repository is changed
		/// </summary>
		/// <remarks>Field: [Repository].[Changestamp], Not Nullable, Default Value: 0</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("Changestamp")]
		[System.ComponentModel.Description("Value is reset on when a repository is changed")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int Changestamp
		{
			get { return _changestamp; }
			set
			{
				_changestamp = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'Repository.DefinitionData' field.
		/// </summary>
		/// <remarks>Field: [Repository].[DefinitionData], Field Length: max, Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("DefinitionData")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual string DefinitionData
		{
			get { return _definitionData; }
			set
			{
				if ((value != null) && (value.Length > GetMaxLength(Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.DefinitionData))) throw new Exception(string.Format(GlobalValues.ERROR_DATA_TOO_BIG, value, "Repository.DefinitionData", GetMaxLength(Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.DefinitionData)));
				_definitionData = value;
			}
		}

		/// <summary>
		/// Value is reset on when the dimensions of a repository changed
		/// </summary>
		/// <remarks>Field: [Repository].[Dimensionstamp], Not Nullable, Default Value: 0</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("Dimensionstamp")]
		[System.ComponentModel.Description("Value is reset on when the dimensions of a repository changed")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int Dimensionstamp
		{
			get { return _dimensionstamp; }
			set
			{
				_dimensionstamp = value;
			}
		}

		/// <summary>
		/// Determines if this item has been marked for deletion
		/// </summary>
		/// <remarks>Field: [Repository].[IsDeleted], Not Nullable, Indexed, Default Value: false</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("IsDeleted")]
		[System.ComponentModel.DataAnnotations.Schema.Index()]
		[System.ComponentModel.Description("Determines if this item has been marked for deletion")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual bool IsDeleted
		{
			get { return _isDeleted; }
			set
			{
				_isDeleted = value;
			}
		}

		/// <summary>
		/// Determines if the item has been fully created
		/// </summary>
		/// <remarks>Field: [Repository].[IsInitialized], Not Nullable, Indexed, Default Value: true</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("IsInitialized")]
		[System.ComponentModel.DataAnnotations.Schema.Index()]
		[System.ComponentModel.Description("Determines if the item has been fully created")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual bool IsInitialized
		{
			get { return _isInitialized; }
			set
			{
				_isInitialized = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'Repository.ItemCount' field.
		/// </summary>
		/// <remarks>Field: [Repository].[ItemCount], Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("ItemCount")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int ItemCount
		{
			get { return _itemCount; }
			set
			{
				_itemCount = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'Repository.Name' field.
		/// </summary>
		/// <remarks>Field: [Repository].[Name], Field Length: 50, Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("Name")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual string Name
		{
			get { return _name; }
			set
			{
				if ((value != null) && (value.Length > GetMaxLength(Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.Name))) throw new Exception(string.Format(GlobalValues.ERROR_DATA_TOO_BIG, value, "Repository.Name", GetMaxLength(Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.Name)));
				_name = value;
			}
		}

		/// <summary>
		/// The parent abstract repository
		/// </summary>
		/// <remarks>Field: [Repository].[ParentId], Nullable, Indexed</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("ParentId")]
		[System.ComponentModel.DataAnnotations.Schema.Index()]
		[System.ComponentModel.Description("The parent abstract repository")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int? ParentId
		{
			get { return _parentId; }
			set
			{
				_parentId = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'Repository.RepositoryId' field.
		/// </summary>
		/// <remarks>Field: [Repository].[RepositoryId], Not Nullable, Primary Key, AutoNumber, Unique, Indexed</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("RepositoryId")]
		[System.ComponentModel.DataAnnotations.Schema.Index(IsUnique = true)]
		[System.ComponentModel.DataAnnotations.Key()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int RepositoryId
		{
			get { return _repositoryId; }
			protected internal set
			{
				_repositoryId = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'Repository.UniqueKey' field.
		/// </summary>
		/// <remarks>Field: [Repository].[UniqueKey], Not Nullable, Indexed</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("UniqueKey")]
		[System.ComponentModel.DataAnnotations.Schema.Index()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual System.Guid UniqueKey
		{
			get { return _uniqueKey; }
			set
			{
				_uniqueKey = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'Repository.VersionHash' field.
		/// </summary>
		/// <remarks>Field: [Repository].[VersionHash], Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("VersionHash")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual long VersionHash
		{
			get { return _versionHash; }
			set
			{
				_versionHash = value;
			}
		}

		/// <summary>
		/// The audit field for the 'Created By' parameter.
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[DataMember()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual string CreatedBy
		{
			get { return _createdby; }
			protected internal set
			{
				_createdby = value;
			}
		}

		/// <summary />
		protected string _createdby;

		/// <summary>
		/// The audit field for the 'Created Date' parameter.
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[DataMember()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual DateTime? CreatedDate
		{
			get { return _createddate; }
			protected internal set
			{
				_createddate = value;
			}
		}

		/// <summary />
		protected DateTime? _createddate;

		/// <summary>
		/// The audit field for the 'Modified By' parameter.
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[DataMember()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual string ModifiedBy
		{
			get { return _modifiedby; }
			protected internal set
			{
				_modifiedby = value;
			}
		}

		/// <summary />
		protected string _modifiedby;

		/// <summary>
		/// The audit field for the 'Modified Date' parameter.
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[DataMember()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual DateTime? ModifiedDate
		{
			get { return _modifieddate; }
			protected internal set
			{
				_modifieddate = value;
			}
		}

		/// <summary />
		protected DateTime? _modifieddate;

		/// <summary>
		/// The audit field for the 'Timestamp' parameter.
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[DataMember()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual byte[] Timestamp
		{
			get { return _timestamp; }
			protected internal set
			{
				_timestamp = value;
			}
		}

		/// <summary />
		protected byte[] _timestamp;

		#endregion

		#region Property Holders

		/// <summary />
		protected int _changestamp;
		/// <summary />
		protected string _definitionData;
		/// <summary />
		protected int _dimensionstamp;
		/// <summary />
		protected bool _isDeleted;
		/// <summary />
		protected bool _isInitialized;
		/// <summary />
		protected int _itemCount;
		/// <summary />
		protected string _name;
		/// <summary />
		protected int? _parentId;
		/// <summary />
		protected int _repositoryId;
		/// <summary />
		protected System.Guid _uniqueKey;
		/// <summary />
		protected long _versionHash;

		#endregion

		#region GetMaxLength

		/// <summary>
		/// Gets the maximum size of the field value.
		/// </summary>
		public static int GetMaxLength(Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants field)
		{
			switch (field)
			{
				case Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.Changestamp:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.DefinitionData:
					return int.MaxValue;
				case Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.Dimensionstamp:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.IsDeleted:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.IsInitialized:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.ItemCount:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.Name:
					return 50;
				case Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.ParentId:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.RepositoryId:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.UniqueKey:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.VersionHash:
					return 0;
			}
			return 0;
		}

		int Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetMaxLength(Enum field)
		{
			return GetMaxLength((Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants)field);
		}

		#endregion

		#region GetFieldNameConstants

		System.Type Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetFieldNameConstants()
		{
			return typeof(Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants);
		}

		#endregion

		#region GetFieldType

		/// <summary>
		/// Gets the system type of a field on this object
		/// </summary>
		public static System.Type GetFieldType(Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants field)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants'.");

			switch ((Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants)field)
			{
				case Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.Changestamp: return typeof(int);
				case Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.DefinitionData: return typeof(string);
				case Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.Dimensionstamp: return typeof(int);
				case Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.IsDeleted: return typeof(bool);
				case Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.IsInitialized: return typeof(bool);
				case Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.ItemCount: return typeof(int);
				case Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.Name: return typeof(string);
				case Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.ParentId: return typeof(int?);
				case Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.RepositoryId: return typeof(int);
				case Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.UniqueKey: return typeof(System.Guid);
				case Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.VersionHash: return typeof(long);
			}
			return null;
		}

		System.Type Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetFieldType(Enum field)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants'.");

			return GetFieldType((Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants)field);
		}

		#endregion

		#region Get/Set Value

		object Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetValue(System.Enum field)
		{
			return ((Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject)this).GetValue(field, null);
		}

		object Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetValue(System.Enum field, object defaultValue)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants'.");
			return this.GetValue((Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants)field, defaultValue);
		}

		void Gravitybox.Datastore.EFDAL.IBusinessObject.SetValue(System.Enum field, object newValue)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants'.");
			this.SetValue((Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants)field, newValue);
		}

		void Gravitybox.Datastore.EFDAL.IBusinessObject.SetValue(System.Enum field, object newValue, bool fixLength)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants'.");
			this.SetValue((Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants)field, newValue, fixLength);
		}

		#endregion

		#region PrimaryKey

		/// <summary>
		/// Generic primary key for this object
		/// </summary>
		Gravitybox.Datastore.EFDAL.IPrimaryKey Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.PrimaryKey
		{
			get { return new PrimaryKey(Util.HashPK("Repository", this.RepositoryId)); }
		}

		#endregion

		#region Clone

		/// <summary>
		/// Creates a shallow copy of this object
		/// </summary>
		public virtual object Clone()
		{
			return Gravitybox.Datastore.EFDAL.Entity.Repository.Clone(this);
		}

		/// <summary>
		/// Creates a shallow copy of this object with defined, default values and new PK
		/// </summary>
		public virtual object CloneAsNew()
		{
			var item = Gravitybox.Datastore.EFDAL.Entity.Repository.Clone(this);
			item._repositoryId = 0;
			item._changestamp = 0;
			item._dimensionstamp = 0;
			item._isDeleted = false;
			item._isInitialized = true;
			return item;
		}

		/// <summary>
		/// Creates a shallow copy of this object
		/// </summary>
		public static Repository Clone(Gravitybox.Datastore.EFDAL.Entity.Repository item)
		{
			var newItem = new Repository();
			newItem.Changestamp = item.Changestamp;
			newItem.DefinitionData = item.DefinitionData;
			newItem.Dimensionstamp = item.Dimensionstamp;
			newItem.IsDeleted = item.IsDeleted;
			newItem.IsInitialized = item.IsInitialized;
			newItem.ItemCount = item.ItemCount;
			newItem.Name = item.Name;
			newItem.ParentId = item.ParentId;
			newItem.RepositoryId = item.RepositoryId;
			newItem.UniqueKey = item.UniqueKey;
			newItem.VersionHash = item.VersionHash;
			newItem.CreatedDate = item.CreatedDate;
			newItem.CreatedBy = item.CreatedBy;
			newItem.ModifiedDate = item.ModifiedDate;
			newItem.ModifiedBy = item.ModifiedBy;
			return newItem;
		}

		#endregion

		#region GetValue

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		public virtual object GetValue(Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants field)
		{
			return GetValue(field, null);
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		public virtual object GetValue(Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants field, object defaultValue)
		{
			if (field == Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.Changestamp)
				return this.Changestamp;
			if (field == Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.DefinitionData)
				return ((this.DefinitionData == null) ? defaultValue : this.DefinitionData);
			if (field == Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.Dimensionstamp)
				return this.Dimensionstamp;
			if (field == Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.IsDeleted)
				return this.IsDeleted;
			if (field == Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.IsInitialized)
				return this.IsInitialized;
			if (field == Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.ItemCount)
				return this.ItemCount;
			if (field == Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.Name)
				return this.Name;
			if (field == Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.ParentId)
				return ((this.ParentId == null) ? defaultValue : this.ParentId);
			if (field == Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.RepositoryId)
				return this.RepositoryId;
			if (field == Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.UniqueKey)
				return this.UniqueKey;
			if (field == Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.VersionHash)
				return this.VersionHash;
			if (field == Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.CreatedBy)
				return ((this.CreatedBy == null) ? defaultValue : this.CreatedBy);
			if (field == Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.CreatedDate)
				return ((this.CreatedDate == null) ? defaultValue : this.CreatedDate);
			if (field == Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.ModifiedBy)
				return ((this.ModifiedBy == null) ? defaultValue : this.ModifiedBy);
			if (field == Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.ModifiedDate)
				return ((this.ModifiedDate == null) ? defaultValue : this.ModifiedDate);
			throw new Exception("Field '" + field.ToString() + "' not found!");
		}

		#endregion

		#region SetValue

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="field">The field to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		public virtual void SetValue(Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants field, object newValue)
		{
			SetValue(field, newValue, false);
		}

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="field">The field to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		/// <param name="fixLength">Determines if the length should be truncated if too long. When false, an error will be raised if data is too large to be assigned to the field.</param>
		public virtual void SetValue(Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants field, object newValue, bool fixLength)
		{
			if (field == Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.Changestamp)
			{
				this.Changestamp = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'Changestamp' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.DefinitionData)
			{
				this.DefinitionData = GlobalValues.SetValueHelperInternal((string)newValue, fixLength, GetMaxLength(field));
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.Dimensionstamp)
			{
				this.Dimensionstamp = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'Dimensionstamp' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.IsDeleted)
			{
				this.IsDeleted = GlobalValues.SetValueHelperBoolNotNullableInternal(newValue, "Field 'IsDeleted' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.IsInitialized)
			{
				this.IsInitialized = GlobalValues.SetValueHelperBoolNotNullableInternal(newValue, "Field 'IsInitialized' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.ItemCount)
			{
				this.ItemCount = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'ItemCount' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.Name)
			{
				this.Name = GlobalValues.SetValueHelperInternal((string)newValue, fixLength, GetMaxLength(field));
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.ParentId)
			{
				this.ParentId = GlobalValues.SetValueHelperIntNullableInternal(newValue);
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.RepositoryId)
			{
				throw new Exception("Field '" + field.ToString() + "' is a primary key and cannot be set!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.UniqueKey)
			{
				if (newValue == null)
				{
					throw new Exception("Field 'UniqueKey' does not allow null values!");
				}
				else
				{
					this.UniqueKey = (System.Guid)newValue;
				}
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants.VersionHash)
			{
				this.VersionHash = GlobalValues.SetValueHelperLongNotNullableInternal(newValue, "Field 'VersionHash' does not allow null values!");
			}
			else
				throw new Exception("Field '" + field.ToString() + "' not found!");
		}

		#endregion

		#region Navigation Properties

		#endregion

		#region Static SQL Methods

		internal static string GetFieldAliasFromFieldNameSqlMapping(string alias)
		{
			alias = alias.Replace("[", string.Empty).Replace("]", string.Empty);
			switch (alias.ToLower())
			{
				case "changestamp": return "changestamp";
				case "definitiondata": return "definitiondata";
				case "dimensionstamp": return "dimensionstamp";
				case "isdeleted": return "isdeleted";
				case "isinitialized": return "isinitialized";
				case "itemcount": return "itemcount";
				case "name": return "name";
				case "parentid": return "parentid";
				case "repositoryid": return "repositoryid";
				case "uniquekey": return "uniquekey";
				case "versionhash": return "versionhash";
				case "createddate": return "createddate";
				case "createdby": return "createdby";
				case "modifieddate": return "modifieddate";
				case "modifiedby": return "modifiedby";
				case "timestamp": return "timestamp";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetTableFromFieldAliasSqlMapping(string alias)
		{
			switch (alias.ToLower())
			{
				case "changestamp": return "Repository";
				case "definitiondata": return "Repository";
				case "dimensionstamp": return "Repository";
				case "isdeleted": return "Repository";
				case "isinitialized": return "Repository";
				case "itemcount": return "Repository";
				case "name": return "Repository";
				case "parentid": return "Repository";
				case "repositoryid": return "Repository";
				case "uniquekey": return "Repository";
				case "versionhash": return "Repository";
				case "createdby": return "Repository";
				case "createddate": return "Repository";
				case "modifiedby": return "Repository";
				case "modifieddate": return "Repository";
				case "timestamp": return "Repository";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetTableFromFieldNameSqlMapping(string field)
		{
			switch (field.ToLower())
			{
				case "changestamp": return "Repository";
				case "definitiondata": return "Repository";
				case "dimensionstamp": return "Repository";
				case "isdeleted": return "Repository";
				case "isinitialized": return "Repository";
				case "itemcount": return "Repository";
				case "name": return "Repository";
				case "parentid": return "Repository";
				case "repositoryid": return "Repository";
				case "uniquekey": return "Repository";
				case "versionhash": return "Repository";
				case "createdby": return "Repository";
				case "createddate": return "Repository";
				case "modifiedby": return "Repository";
				case "modifieddate": return "Repository";
				case "timestamp": return "Repository";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetRemappedLinqSql(string sql, string parentAlias, LinqSQLFromClauseCollection childTables)
		{
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[changestamp\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Repository") + "].[changestamp]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[definitiondata\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Repository") + "].[definitiondata]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[dimensionstamp\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Repository") + "].[dimensionstamp]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[isdeleted\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Repository") + "].[isdeleted]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[isinitialized\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Repository") + "].[isinitialized]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[itemcount\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Repository") + "].[itemcount]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[name\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Repository") + "].[name]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[parentid\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Repository") + "].[parentid]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[repositoryid\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Repository") + "].[repositoryid]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[uniquekey\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Repository") + "].[uniquekey]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[versionhash\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Repository") + "].[versionhash]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[createdby\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Repository") + "].[createdby]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[createddate\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Repository") + "].[createddate]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[modifiedby\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Repository") + "].[modifiedby]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[modifieddate\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Repository") + "].[modifieddate]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[timestamp\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Repository") + "].[timestamp]", RegexOptions.IgnoreCase);
			return sql;
		}

		#endregion

		#region DeleteData

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryQuery, bool>> where)
		{
			return DeleteData(where: where, optimizer: new QueryOptimizer(), startup: new ContextStartup(null), connectionString: Gravitybox.Datastore.EFDAL.DatastoreEntities.GetConnectionString());
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="optimizer">The optimization object to use for running queries</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryQuery, bool>> where, QueryOptimizer optimizer)
		{
			return DeleteData(where: where, optimizer: optimizer, startup: new ContextStartup(null), connectionString: Gravitybox.Datastore.EFDAL.DatastoreEntities.GetConnectionString());
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="connectionString">The database connection string to use for this access</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryQuery, bool>> where, string connectionString)
		{
			return DeleteData(where: where, optimizer: new QueryOptimizer(), startup: new ContextStartup(null), connectionString: connectionString);
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="optimizer">The optimization object to use for running queries</param>
		/// <param name="startup">The startup options</param>
		/// <param name="connectionString">The database connection string to use for this access</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryQuery, bool>> where, QueryOptimizer optimizer, ContextStartup startup, string connectionString)
		{
			if (optimizer == null)
				optimizer = new QueryOptimizer();
				if (startup == null) startup = new ContextStartup(null);

			using (var connection = Gravitybox.Datastore.EFDAL.DBHelper.GetConnection(Gravitybox.Datastore.EFDAL.Util.StripEFCS2Normal(connectionString)))
			{
				using (var dc = new DataContext(connection))
				{
					var template = dc.GetTable<Gravitybox.Datastore.EFDAL.RepositoryQuery>();
					using (var cmd = BusinessEntityQuery.GetCommand<Gravitybox.Datastore.EFDAL.RepositoryQuery>(dc, template, where))
					{
						if (!startup.DefaultTimeout && startup.CommandTimeout > 0) cmd.CommandTimeout = startup.CommandTimeout;
						else
						{
							var cb = new System.Data.SqlClient.SqlConnectionStringBuilder(connectionString);
							cmd.CommandTimeout = cb.ConnectTimeout;
						}

						var parser = LinqSQLParser.Create(cmd.CommandText, LinqSQLParser.ObjectTypeConstants.Table);
						var sql = "CREATE TABLE #t ([RepositoryId] [Int])";
						sql += "set rowcount " + optimizer.ChunkSize + ";";
						sql += "INSERT INTO #t ([RepositoryId])";
						sql += "SELECT [t0].[RepositoryId] #t\r\n";
						sql += parser.GetFromClause(optimizer) + "\r\n";
						sql += parser.GetWhereClause();
						sql += "\r\n";

						var noLock = string.Empty;
						noLock = (optimizer.NoLocking ? "WITH (READUNCOMMITTED) " : string.Empty);
						sql += "DELETE [Repository] FROM [dbo].[Repository] " + noLock + "INNER JOIN #t ON [dbo].[Repository].[RepositoryId] = #t.[RepositoryId]\r\n";
						sql += ";select @@rowcount";
						sql = "set ansi_nulls off;" + sql + ";drop table #t;";
						cmd.CommandText = sql;
						dc.Connection.Open();
						var startTime = DateTime.Now;
						var affected = 0;
						var count = 0;
						do
						{
							count = (int)cmd.ExecuteScalar();
							affected += count;
						} while (count > 0 && optimizer.ChunkSize > 0);
						var endTime = DateTime.Now;
						optimizer.TotalMilliseconds = (long)endTime.Subtract(startTime).TotalMilliseconds;
						dc.Connection.Close();
						return affected;
					}
				}
			}
		}

		#endregion

		#region UpdateData

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryQuery, bool>> where, TSource newValue)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.Repository, Gravitybox.Datastore.EFDAL.RepositoryQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "Repository", getField: GetDatabaseFieldName, hasModifyAudit: true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryQuery, bool>> where, TSource newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.Repository, Gravitybox.Datastore.EFDAL.RepositoryQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "Repository", getField: GetDatabaseFieldName, hasModifyAudit: true, startup: null, connection: connection, transaction: transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="startup">A configuration object</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryQuery, bool>> where, TSource newValue, ContextStartup startup, string connectionString)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.Repository, Gravitybox.Datastore.EFDAL.RepositoryQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "Repository", getField: GetDatabaseFieldName, hasModifyAudit: true, startup: startup, connectionString: connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryQuery, bool>> where, TSource newValue, string connectionString)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.Repository, Gravitybox.Datastore.EFDAL.RepositoryQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "Repository", getField: GetDatabaseFieldName, hasModifyAudit: true, connectionString: connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryQuery, bool>> where, Gravitybox.Datastore.EFDAL.Entity.Repository newValue)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.Repository, Gravitybox.Datastore.EFDAL.RepositoryQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "Repository", getField: GetDatabaseFieldName, hasModifyAudit: true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryQuery, bool>> where, Gravitybox.Datastore.EFDAL.Entity.Repository newValue, string connectionString)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.Repository, Gravitybox.Datastore.EFDAL.RepositoryQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "Repository", getField: GetDatabaseFieldName, hasModifyAudit: true, connectionString: connectionString);
		}

		#endregion

		#region GetDatabaseFieldName

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		internal static string GetDatabaseFieldName(Gravitybox.Datastore.EFDAL.Entity.Repository.FieldNameConstants field)
		{
			return GetDatabaseFieldName(field.ToString());
		}

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		internal static string GetDatabaseFieldName(string field)
		{
			switch (field)
			{
				case "Changestamp": return "Changestamp";
				case "DefinitionData": return "DefinitionData";
				case "Dimensionstamp": return "Dimensionstamp";
				case "IsDeleted": return "IsDeleted";
				case "IsInitialized": return "IsInitialized";
				case "ItemCount": return "ItemCount";
				case "Name": return "Name";
				case "ParentId": return "ParentId";
				case "RepositoryId": return "RepositoryId";
				case "UniqueKey": return "UniqueKey";
				case "VersionHash": return "VersionHash";
				case "CreatedBy": return "CreatedBy";
				case "CreatedDate": return "CreatedDate";
				case "ModifiedBy": return "ModifiedBy";
				case "ModifiedDate": return "ModifiedDate";
				case "Timestamp": return "Timestamp";
			}
			return string.Empty;
		}

		#endregion

		#region Auditing
		string Gravitybox.Datastore.EFDAL.IAuditableSet.CreatedBy
		{
			get { return this.CreatedBy; }
			set { this.CreatedBy = value; }
		}

		string Gravitybox.Datastore.EFDAL.IAuditableSet.ModifiedBy
		{
			get { return this.ModifiedBy; }
			set { this.ModifiedBy = value; }
		}
		string Gravitybox.Datastore.EFDAL.IAuditable.CreatedBy
		{
			get { return this.CreatedBy; }
		}

		System.DateTime? Gravitybox.Datastore.EFDAL.IAuditable.CreatedDate
		{
			get { return this.CreatedDate; }
		}

		bool Gravitybox.Datastore.EFDAL.IAuditable.IsCreateAuditImplemented
		{
			get { return true; }
		}

		bool Gravitybox.Datastore.EFDAL.IAuditable.IsModifyAuditImplemented
		{
			get { return true; }
		}

		bool Gravitybox.Datastore.EFDAL.IAuditable.IsTimestampAuditImplemented
		{
			get { return true; }
		}

		string Gravitybox.Datastore.EFDAL.IAuditable.ModifiedBy
		{
			get { return this.ModifiedBy; }
		}

		System.DateTime? Gravitybox.Datastore.EFDAL.IAuditable.ModifiedDate
		{
			get { return this.ModifiedDate; }
		}

		byte[] Gravitybox.Datastore.EFDAL.IAuditable.TimeStamp
		{
			get { return this.Timestamp; }
		}

		void IAuditableSet.ResetModifiedBy(string modifier)
		{
			if (this.ModifiedBy != modifier)
				this.ModifiedBy = modifier;
		}

		void IAuditableSet.ResetCreatedBy(string modifier)
		{
			if (this.CreatedBy != modifier)
				this.CreatedBy = modifier;
			((IAuditableSet)this).ResetModifiedBy(modifier);
		}

		System.DateTime? Gravitybox.Datastore.EFDAL.IAuditableSet.CreatedDate
		{
			get { return this.CreatedDate; }
			set { this.CreatedDate = value; }
		}

		System.DateTime? Gravitybox.Datastore.EFDAL.IAuditableSet.ModifiedDate
		{
			get { return this.ModifiedDate; }
			set { this.ModifiedDate = value; }
		}

		#endregion

		#region Equals
		/// <summary>
		/// Compares two objects of 'Repository' type and determines if all properties match
		/// </summary>
		/// <returns>True if all properties match, false otherwise</returns>
		public override bool Equals(object obj)
		{
			var other = obj as Gravitybox.Datastore.EFDAL.Entity.Repository;
			if (other == null) return false;
			return (
				other.Changestamp == this.Changestamp &&
				other.DefinitionData == this.DefinitionData &&
				other.Dimensionstamp == this.Dimensionstamp &&
				other.IsDeleted == this.IsDeleted &&
				other.IsInitialized == this.IsInitialized &&
				other.ItemCount == this.ItemCount &&
				other.Name == this.Name &&
				other.ParentId == this.ParentId &&
				other.RepositoryId == this.RepositoryId &&
				other.UniqueKey == this.UniqueKey &&
				other.VersionHash == this.VersionHash
				);
		}

		/// <summary>
		/// Serves as a hash function for this type.
		/// </summary>
		public override int GetHashCode()
		{
			return base.GetHashCode();
		}

		#endregion

	}
}

#region Metadata Class

namespace Gravitybox.Datastore.EFDAL.Entity.Metadata
{
	/// <summary>
	/// Metadata class for the 'Repository' entity
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("nHydrateModelGenerator", "6.0.0")]
	public partial class RepositoryMetadata : Gravitybox.Datastore.EFDAL.IMetadata
	{
		#region Properties

		/// <summary>
		/// Metadata information for the 'Changestamp' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'Changestamp' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "Value is reset on when a repository is changed", Name = "Changestamp", AutoGenerateField = true)]
		public object Changestamp;

		/// <summary>
		/// Metadata information for the 'DefinitionData' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.StringLength(2147483647, ErrorMessage = "The property 'DefinitionData' has a maximum length of 2147483647")]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "DefinitionData", AutoGenerateField = true)]
		public object DefinitionData;

		/// <summary>
		/// Metadata information for the 'Dimensionstamp' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'Dimensionstamp' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "Value is reset on when the dimensions of a repository changed", Name = "Dimensionstamp", AutoGenerateField = true)]
		public object Dimensionstamp;

		/// <summary>
		/// Metadata information for the 'IsDeleted' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'IsDeleted' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "Determines if this item has been marked for deletion", Name = "IsDeleted", AutoGenerateField = true)]
		public object IsDeleted;

		/// <summary>
		/// Metadata information for the 'IsInitialized' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'IsInitialized' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "Determines if the item has been fully created", Name = "IsInitialized", AutoGenerateField = true)]
		public object IsInitialized;

		/// <summary>
		/// Metadata information for the 'ItemCount' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'ItemCount' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "ItemCount", AutoGenerateField = true)]
		public object ItemCount;

		/// <summary>
		/// Metadata information for the 'Name' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'Name' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.StringLength(50, ErrorMessage = "The property 'Name' has a maximum length of 50")]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "Name", AutoGenerateField = true)]
		public object Name;

		/// <summary>
		/// Metadata information for the 'ParentId' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Display(Description = "The parent abstract repository", Name = "ParentId", AutoGenerateField = true)]
		public object ParentId;

		/// <summary>
		/// Metadata information for the 'RepositoryId' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'RepositoryId' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Key()]
		[System.ComponentModel.ReadOnly(true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "RepositoryId", AutoGenerateField = true)]
		public object RepositoryId;

		/// <summary>
		/// Metadata information for the 'UniqueKey' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'UniqueKey' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "UniqueKey", AutoGenerateField = true)]
		public object UniqueKey;

		/// <summary>
		/// Metadata information for the 'VersionHash' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'VersionHash' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "VersionHash", AutoGenerateField = true)]
		public object VersionHash;

		/// <summary>
		/// Metadata information for the 'CreatedBy' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.StringLength(100, ErrorMessage = "The property 'CreatedBy' has a maximum length of 100")]
		[System.ComponentModel.ReadOnly(true)]
		public object CreatedBy;

		/// <summary>
		/// Metadata information for the 'CreatedDate' parameter
		/// </summary>
		[System.ComponentModel.ReadOnly(true)]
		public object CreatedDate;

		/// <summary>
		/// Metadata information for the 'ModifiedBy' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.StringLength(100, ErrorMessage = "The property 'ModifiedBy' has a maximum length of 100")]
		[System.ComponentModel.ReadOnly(true)]
		public object ModifiedBy;

		/// <summary>
		/// Metadata information for the 'ModifiedDate' parameter
		/// </summary>
		[System.ComponentModel.ReadOnly(true)]
		public object ModifiedDate;

		/// <summary>
		/// Metadata information for the 'Timestamp' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Timestamp()]
		[System.ComponentModel.DataAnnotations.ConcurrencyCheck()]
		[System.ComponentModel.ReadOnly(true)]
		public object Timestamp;

		#endregion

		#region Methods
		/// <summary>
		/// Gets the underlying table name.
		/// </summary>
		public virtual string GetTableName()
		{
			return "Repository";
		}

		/// <summary>
		/// Gets a list of all object fields with alias/code facade applied excluding inheritance.
		/// </summary>
		public virtual List<string> GetFields()
		{
			var retval = new List<string>();
			retval.Add("Changestamp");
			retval.Add("DefinitionData");
			retval.Add("Dimensionstamp");
			retval.Add("IsDeleted");
			retval.Add("IsInitialized");
			retval.Add("ItemCount");
			retval.Add("Name");
			retval.Add("ParentId");
			retval.Add("RepositoryId");
			retval.Add("UniqueKey");
			retval.Add("VersionHash");
			return retval;
		}

		/// <summary>
		/// Returns the type of the parent object if one exists.
		/// </summary>
		public virtual System.Type InheritsFrom()
		{
			return null;
		}

		/// <summary>
		/// Returns the database schema name.
		/// </summary>
		public virtual string Schema()
		{
			return "dbo";
		}

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		public virtual string GetDatabaseFieldName(string field)
		{
			switch (field)
			{
				case "Changestamp": return "Changestamp";
				case "DefinitionData": return "DefinitionData";
				case "Dimensionstamp": return "Dimensionstamp";
				case "IsDeleted": return "IsDeleted";
				case "IsInitialized": return "IsInitialized";
				case "ItemCount": return "ItemCount";
				case "Name": return "Name";
				case "ParentId": return "ParentId";
				case "RepositoryId": return "RepositoryId";
				case "UniqueKey": return "UniqueKey";
				case "VersionHash": return "VersionHash";
				case "CreatedBy": return "CreatedBy";
				case "CreatedDate": return "CreatedDate";
				case "ModifiedBy": return "ModifiedBy";
				case "ModifiedDate": return "ModifiedDate";
				case "Timestamp": return "Timestamp";
			}
			return string.Empty;
		}

		#endregion

	}

}

#endregion

#pragma warning restore 612

