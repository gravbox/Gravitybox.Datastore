//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 612
using System;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.ComponentModel;
using System.Collections.Generic;
using System.Text;
using Gravitybox.Datastore.EFDAL;
using Gravitybox.Datastore.EFDAL.EventArguments;
using System.Text.RegularExpressions;
using System.Linq.Expressions;
using System.Data.Entity;
using System.Data.Linq;
using System.Data.Entity.ModelConfiguration;
using System.ComponentModel.DataAnnotations;

namespace Gravitybox.Datastore.EFDAL.Entity
{
	/// <summary>
	/// The 'RepositoryLog' entity
	/// </summary>
	[DataContract]
	[Serializable]
	[System.CodeDom.Compiler.GeneratedCode("nHydrateModelGenerator", "6.0.0")]
	[FieldNameConstants(typeof(Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants))]
	[System.ComponentModel.DataAnnotations.MetadataType(typeof(Gravitybox.Datastore.EFDAL.Entity.Metadata.RepositoryLogMetadata))]
	[EntityMetadata("RepositoryLog", false, true, false, false, "", true, false, false, "dbo")]
	public partial class RepositoryLog : BaseEntity, Gravitybox.Datastore.EFDAL.IBusinessObject, System.ICloneable, Gravitybox.Datastore.EFDAL.IAuditable, Gravitybox.Datastore.EFDAL.IAuditableSet, Gravitybox.Datastore.EFDAL.ICreatable
	{
		#region FieldNameConstants Enumeration

		/// <summary>
		/// Enumeration to define each property that maps to a database field for the 'RepositoryLog' table.
		/// </summary>
		public enum FieldNameConstants
		{
			/// <summary>
			/// Field mapping for the 'Count' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'Count' property")]
			Count,
			/// <summary>
			/// Field mapping for the 'ElapsedTime' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'ElapsedTime' property")]
			ElapsedTime,
			/// <summary>
			/// Field mapping for the 'IPAddress' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'IPAddress' property")]
			IPAddress,
			/// <summary>
			/// Field mapping for the 'LockTime' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'LockTime' property")]
			LockTime,
			/// <summary>
			/// Field mapping for the 'Query' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'Query' property")]
			Query,
			/// <summary>
			/// Field mapping for the 'QueryId' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'QueryId' property")]
			QueryId,
			/// <summary>
			/// Field mapping for the 'RepositoryId' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'RepositoryId' property")]
			RepositoryId,
			/// <summary>
			/// Field mapping for the 'RepositoryLogId' property
			/// </summary>
			[System.ComponentModel.DataAnnotations.Key]
			[System.ComponentModel.ReadOnly(true)]
			[System.ComponentModel.Description("Field mapping for the 'RepositoryLogId' property")]
			RepositoryLogId,
			/// <summary>
			/// Field mapping for the 'UsedCache' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'UsedCache' property")]
			UsedCache,
			/// <summary>
			/// Field mapping for the 'CreatedBy' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'CreatedBy' property")]
			CreatedBy,
			/// <summary>
			/// Field mapping for the 'CreatedDate' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'CreatedDate' property")]
			CreatedDate,
		}
		#endregion

		#region Constructors

		/// <summary>
		/// Initializes a new instance of the Gravitybox.Datastore.EFDAL.Entity.RepositoryLog class
		/// </summary>
		public RepositoryLog()
		{
			this._lockTime = 0;

		}

		#endregion

		#region Properties

		/// <summary>
		/// The property that maps back to the database 'RepositoryLog.Count' field.
		/// </summary>
		/// <remarks>Field: [RepositoryLog].[Count], Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("Count")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int Count
		{
			get { return _count; }
			set
			{
				_count = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'RepositoryLog.ElapsedTime' field.
		/// </summary>
		/// <remarks>Field: [RepositoryLog].[ElapsedTime], Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("ElapsedTime")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int ElapsedTime
		{
			get { return _elapsedTime; }
			set
			{
				_elapsedTime = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'RepositoryLog.IPAddress' field.
		/// </summary>
		/// <remarks>Field: [RepositoryLog].[IPAddress], Field Length: 50, Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("IPAddress")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual string IPAddress
		{
			get { return _iPAddress; }
			set
			{
				if ((value != null) && (value.Length > GetMaxLength(Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.IPAddress))) throw new Exception(string.Format(GlobalValues.ERROR_DATA_TOO_BIG, value, "RepositoryLog.IPAddress", GetMaxLength(Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.IPAddress)));
				_iPAddress = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'RepositoryLog.LockTime' field.
		/// </summary>
		/// <remarks>Field: [RepositoryLog].[LockTime], Not Nullable, Default Value: 0</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("LockTime")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int LockTime
		{
			get { return _lockTime; }
			set
			{
				_lockTime = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'RepositoryLog.Query' field.
		/// </summary>
		/// <remarks>Field: [RepositoryLog].[Query], Field Length: 1000, Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("Query")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual string Query
		{
			get { return _query; }
			set
			{
				if ((value != null) && (value.Length > GetMaxLength(Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.Query))) throw new Exception(string.Format(GlobalValues.ERROR_DATA_TOO_BIG, value, "RepositoryLog.Query", GetMaxLength(Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.Query)));
				_query = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'RepositoryLog.QueryId' field.
		/// </summary>
		/// <remarks>Field: [RepositoryLog].[QueryId], Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("QueryId")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual System.Guid QueryId
		{
			get { return _queryId; }
			set
			{
				_queryId = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'RepositoryLog.RepositoryId' field.
		/// </summary>
		/// <remarks>Field: [RepositoryLog].[RepositoryId], Not Nullable, Indexed</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("RepositoryId")]
		[System.ComponentModel.DataAnnotations.Schema.Index()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int RepositoryId
		{
			get { return _repositoryId; }
			set
			{
				_repositoryId = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'RepositoryLog.RepositoryLogId' field.
		/// </summary>
		/// <remarks>Field: [RepositoryLog].[RepositoryLogId], Not Nullable, Primary Key, AutoNumber, Unique, Indexed</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("RepositoryLogId")]
		[System.ComponentModel.DataAnnotations.Schema.Index(IsUnique = true)]
		[System.ComponentModel.DataAnnotations.Key()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual long RepositoryLogId
		{
			get { return _repositoryLogId; }
			protected internal set
			{
				_repositoryLogId = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'RepositoryLog.UsedCache' field.
		/// </summary>
		/// <remarks>Field: [RepositoryLog].[UsedCache], Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("UsedCache")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual bool UsedCache
		{
			get { return _usedCache; }
			set
			{
				_usedCache = value;
			}
		}

		/// <summary>
		/// The audit field for the 'Created By' parameter.
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[DataMember()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual string CreatedBy
		{
			get { return _createdby; }
			protected internal set
			{
				_createdby = value;
			}
		}

		/// <summary />
		protected string _createdby;

		/// <summary>
		/// The audit field for the 'Created Date' parameter.
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[DataMember()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual DateTime? CreatedDate
		{
			get { return _createddate; }
			protected internal set
			{
				_createddate = value;
			}
		}

		/// <summary />
		protected DateTime? _createddate;

		#endregion

		#region Property Holders

		/// <summary />
		protected int _count;
		/// <summary />
		protected int _elapsedTime;
		/// <summary />
		protected string _iPAddress;
		/// <summary />
		protected int _lockTime;
		/// <summary />
		protected string _query;
		/// <summary />
		protected System.Guid _queryId;
		/// <summary />
		protected int _repositoryId;
		/// <summary />
		protected long _repositoryLogId;
		/// <summary />
		protected bool _usedCache;

		#endregion

		#region GetMaxLength

		/// <summary>
		/// Gets the maximum size of the field value.
		/// </summary>
		public static int GetMaxLength(Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants field)
		{
			switch (field)
			{
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.Count:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.ElapsedTime:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.IPAddress:
					return 50;
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.LockTime:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.Query:
					return 1000;
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.QueryId:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.RepositoryId:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.RepositoryLogId:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.UsedCache:
					return 0;
			}
			return 0;
		}

		int Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetMaxLength(Enum field)
		{
			return GetMaxLength((Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants)field);
		}

		#endregion

		#region GetFieldNameConstants

		System.Type Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetFieldNameConstants()
		{
			return typeof(Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants);
		}

		#endregion

		#region GetFieldType

		/// <summary>
		/// Gets the system type of a field on this object
		/// </summary>
		public static System.Type GetFieldType(Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants field)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants'.");

			switch ((Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants)field)
			{
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.Count: return typeof(int);
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.ElapsedTime: return typeof(int);
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.IPAddress: return typeof(string);
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.LockTime: return typeof(int);
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.Query: return typeof(string);
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.QueryId: return typeof(System.Guid);
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.RepositoryId: return typeof(int);
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.RepositoryLogId: return typeof(long);
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.UsedCache: return typeof(bool);
			}
			return null;
		}

		System.Type Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetFieldType(Enum field)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants'.");

			return GetFieldType((Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants)field);
		}

		#endregion

		#region Get/Set Value

		object Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetValue(System.Enum field)
		{
			return ((Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject)this).GetValue(field, null);
		}

		object Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetValue(System.Enum field, object defaultValue)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants'.");
			return this.GetValue((Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants)field, defaultValue);
		}

		void Gravitybox.Datastore.EFDAL.IBusinessObject.SetValue(System.Enum field, object newValue)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants'.");
			this.SetValue((Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants)field, newValue);
		}

		void Gravitybox.Datastore.EFDAL.IBusinessObject.SetValue(System.Enum field, object newValue, bool fixLength)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants'.");
			this.SetValue((Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants)field, newValue, fixLength);
		}

		#endregion

		#region PrimaryKey

		/// <summary>
		/// Generic primary key for this object
		/// </summary>
		Gravitybox.Datastore.EFDAL.IPrimaryKey Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.PrimaryKey
		{
			get { return new PrimaryKey(Util.HashPK("RepositoryLog", this.RepositoryLogId)); }
		}

		#endregion

		#region Clone

		/// <summary>
		/// Creates a shallow copy of this object
		/// </summary>
		public virtual object Clone()
		{
			return Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.Clone(this);
		}

		/// <summary>
		/// Creates a shallow copy of this object with defined, default values and new PK
		/// </summary>
		public virtual object CloneAsNew()
		{
			var item = Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.Clone(this);
			item._repositoryLogId = 0;
			item._lockTime = 0;
			return item;
		}

		/// <summary>
		/// Creates a shallow copy of this object
		/// </summary>
		public static RepositoryLog Clone(Gravitybox.Datastore.EFDAL.Entity.RepositoryLog item)
		{
			var newItem = new RepositoryLog();
			newItem.Count = item.Count;
			newItem.ElapsedTime = item.ElapsedTime;
			newItem.IPAddress = item.IPAddress;
			newItem.LockTime = item.LockTime;
			newItem.Query = item.Query;
			newItem.QueryId = item.QueryId;
			newItem.RepositoryId = item.RepositoryId;
			newItem.RepositoryLogId = item.RepositoryLogId;
			newItem.UsedCache = item.UsedCache;
			newItem.CreatedDate = item.CreatedDate;
			newItem.CreatedBy = item.CreatedBy;
			return newItem;
		}

		#endregion

		#region GetValue

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		public virtual object GetValue(Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants field)
		{
			return GetValue(field, null);
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		public virtual object GetValue(Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants field, object defaultValue)
		{
			if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.Count)
				return this.Count;
			if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.ElapsedTime)
				return this.ElapsedTime;
			if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.IPAddress)
				return this.IPAddress;
			if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.LockTime)
				return this.LockTime;
			if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.Query)
				return ((this.Query == null) ? defaultValue : this.Query);
			if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.QueryId)
				return this.QueryId;
			if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.RepositoryId)
				return this.RepositoryId;
			if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.RepositoryLogId)
				return this.RepositoryLogId;
			if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.UsedCache)
				return this.UsedCache;
			if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.CreatedBy)
				return ((this.CreatedBy == null) ? defaultValue : this.CreatedBy);
			if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.CreatedDate)
				return ((this.CreatedDate == null) ? defaultValue : this.CreatedDate);
			throw new Exception("Field '" + field.ToString() + "' not found!");
		}

		#endregion

		#region SetValue

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="field">The field to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		public virtual void SetValue(Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants field, object newValue)
		{
			SetValue(field, newValue, false);
		}

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="field">The field to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		/// <param name="fixLength">Determines if the length should be truncated if too long. When false, an error will be raised if data is too large to be assigned to the field.</param>
		public virtual void SetValue(Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants field, object newValue, bool fixLength)
		{
			if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.Count)
			{
				this.Count = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'Count' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.ElapsedTime)
			{
				this.ElapsedTime = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'ElapsedTime' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.IPAddress)
			{
				this.IPAddress = GlobalValues.SetValueHelperInternal((string)newValue, fixLength, GetMaxLength(field));
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.LockTime)
			{
				this.LockTime = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'LockTime' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.Query)
			{
				this.Query = GlobalValues.SetValueHelperInternal((string)newValue, fixLength, GetMaxLength(field));
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.QueryId)
			{
				if (newValue == null)
				{
					throw new Exception("Field 'QueryId' does not allow null values!");
				}
				else
				{
					this.QueryId = (System.Guid)newValue;
				}
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.RepositoryId)
			{
				this.RepositoryId = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'RepositoryId' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.RepositoryLogId)
			{
				throw new Exception("Field '" + field.ToString() + "' is a primary key and cannot be set!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants.UsedCache)
			{
				this.UsedCache = GlobalValues.SetValueHelperBoolNotNullableInternal(newValue, "Field 'UsedCache' does not allow null values!");
			}
			else
				throw new Exception("Field '" + field.ToString() + "' not found!");
		}

		#endregion

		#region Navigation Properties

		#endregion

		#region Static SQL Methods

		internal static string GetFieldAliasFromFieldNameSqlMapping(string alias)
		{
			alias = alias.Replace("[", string.Empty).Replace("]", string.Empty);
			switch (alias.ToLower())
			{
				case "count": return "count";
				case "elapsedtime": return "elapsedtime";
				case "ipaddress": return "ipaddress";
				case "locktime": return "locktime";
				case "query": return "query";
				case "queryid": return "queryid";
				case "repositoryid": return "repositoryid";
				case "repositorylogid": return "repositorylogid";
				case "usedcache": return "usedcache";
				case "createddate": return "createddate";
				case "createdby": return "createdby";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetTableFromFieldAliasSqlMapping(string alias)
		{
			switch (alias.ToLower())
			{
				case "count": return "RepositoryLog";
				case "elapsedtime": return "RepositoryLog";
				case "ipaddress": return "RepositoryLog";
				case "locktime": return "RepositoryLog";
				case "query": return "RepositoryLog";
				case "queryid": return "RepositoryLog";
				case "repositoryid": return "RepositoryLog";
				case "repositorylogid": return "RepositoryLog";
				case "usedcache": return "RepositoryLog";
				case "createdby": return "RepositoryLog";
				case "createddate": return "RepositoryLog";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetTableFromFieldNameSqlMapping(string field)
		{
			switch (field.ToLower())
			{
				case "count": return "RepositoryLog";
				case "elapsedtime": return "RepositoryLog";
				case "ipaddress": return "RepositoryLog";
				case "locktime": return "RepositoryLog";
				case "query": return "RepositoryLog";
				case "queryid": return "RepositoryLog";
				case "repositoryid": return "RepositoryLog";
				case "repositorylogid": return "RepositoryLog";
				case "usedcache": return "RepositoryLog";
				case "createdby": return "RepositoryLog";
				case "createddate": return "RepositoryLog";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetRemappedLinqSql(string sql, string parentAlias, LinqSQLFromClauseCollection childTables)
		{
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[count\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "RepositoryLog") + "].[count]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[elapsedtime\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "RepositoryLog") + "].[elapsedtime]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[ipaddress\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "RepositoryLog") + "].[ipaddress]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[locktime\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "RepositoryLog") + "].[locktime]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[query\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "RepositoryLog") + "].[query]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[queryid\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "RepositoryLog") + "].[queryid]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[repositoryid\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "RepositoryLog") + "].[repositoryid]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[repositorylogid\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "RepositoryLog") + "].[repositorylogid]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[usedcache\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "RepositoryLog") + "].[usedcache]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[createdby\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "RepositoryLog") + "].[createdby]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[createddate\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "RepositoryLog") + "].[createddate]", RegexOptions.IgnoreCase);
			return sql;
		}

		#endregion

		#region DeleteData

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryLogQuery, bool>> where)
		{
			return DeleteData(where: where, optimizer: new QueryOptimizer(), startup: new ContextStartup(null), connectionString: Gravitybox.Datastore.EFDAL.DatastoreEntities.GetConnectionString());
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="optimizer">The optimization object to use for running queries</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryLogQuery, bool>> where, QueryOptimizer optimizer)
		{
			return DeleteData(where: where, optimizer: optimizer, startup: new ContextStartup(null), connectionString: Gravitybox.Datastore.EFDAL.DatastoreEntities.GetConnectionString());
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="connectionString">The database connection string to use for this access</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryLogQuery, bool>> where, string connectionString)
		{
			return DeleteData(where: where, optimizer: new QueryOptimizer(), startup: new ContextStartup(null), connectionString: connectionString);
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="optimizer">The optimization object to use for running queries</param>
		/// <param name="startup">The startup options</param>
		/// <param name="connectionString">The database connection string to use for this access</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryLogQuery, bool>> where, QueryOptimizer optimizer, ContextStartup startup, string connectionString)
		{
			if (optimizer == null)
				optimizer = new QueryOptimizer();
				if (startup == null) startup = new ContextStartup(null);

			using (var connection = Gravitybox.Datastore.EFDAL.DBHelper.GetConnection(Gravitybox.Datastore.EFDAL.Util.StripEFCS2Normal(connectionString)))
			{
				using (var dc = new DataContext(connection))
				{
					var template = dc.GetTable<Gravitybox.Datastore.EFDAL.RepositoryLogQuery>();
					using (var cmd = BusinessEntityQuery.GetCommand<Gravitybox.Datastore.EFDAL.RepositoryLogQuery>(dc, template, where))
					{
						if (!startup.DefaultTimeout && startup.CommandTimeout > 0) cmd.CommandTimeout = startup.CommandTimeout;
						else
						{
							var cb = new System.Data.SqlClient.SqlConnectionStringBuilder(connectionString);
							cmd.CommandTimeout = cb.ConnectTimeout;
						}

						var parser = LinqSQLParser.Create(cmd.CommandText, LinqSQLParser.ObjectTypeConstants.Table);
                        var sb = new StringBuilder();
                        sb.AppendLine("SET ROWCOUNT " + optimizer.ChunkSize + ";");
                        sb.AppendLine("delete [X] from [dbo].[RepositoryLog] [X] inner join (");
                        sb.AppendLine("SELECT [t0].[RepositoryLogId]");
                        sb.AppendLine(parser.GetFromClause(optimizer));
                        sb.AppendLine(parser.GetWhereClause());
                        sb.AppendLine(") AS [Extent2]");
                        sb.AppendLine("ON [X].[RepositoryLogId] = [Extent2].[RepositoryLogId]");
                        sb.AppendLine("select @@ROWCOUNT");
						cmd.CommandText = sb.ToString();
						dc.Connection.Open();
						var startTime = DateTime.Now;
						var affected = 0;
						var count = 0;
						do
						{
							count = (int)cmd.ExecuteScalar();
							affected += count;
						} while (count > 0 && optimizer.ChunkSize > 0);
						var endTime = DateTime.Now;
						optimizer.TotalMilliseconds = (long)endTime.Subtract(startTime).TotalMilliseconds;
						dc.Connection.Close();
						return affected;
					}
				}
			}
		}

		#endregion

		#region UpdateData

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryLogQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryLogQuery, bool>> where, TSource newValue)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.RepositoryLog, Gravitybox.Datastore.EFDAL.RepositoryLogQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "RepositoryLog", getField: GetDatabaseFieldName, hasModifyAudit: false);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryLogQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryLogQuery, bool>> where, TSource newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.RepositoryLog, Gravitybox.Datastore.EFDAL.RepositoryLogQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "RepositoryLog", getField: GetDatabaseFieldName, hasModifyAudit: false, startup: null, connection: connection, transaction: transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="startup">A configuration object</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryLogQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryLogQuery, bool>> where, TSource newValue, ContextStartup startup, string connectionString)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.RepositoryLog, Gravitybox.Datastore.EFDAL.RepositoryLogQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "RepositoryLog", getField: GetDatabaseFieldName, hasModifyAudit: false, startup: startup, connectionString: connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryLogQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryLogQuery, bool>> where, TSource newValue, string connectionString)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.RepositoryLog, Gravitybox.Datastore.EFDAL.RepositoryLogQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "RepositoryLog", getField: GetDatabaseFieldName, hasModifyAudit: false, connectionString: connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryLogQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryLogQuery, bool>> where, Gravitybox.Datastore.EFDAL.Entity.RepositoryLog newValue)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.RepositoryLog, Gravitybox.Datastore.EFDAL.RepositoryLogQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "RepositoryLog", getField: GetDatabaseFieldName, hasModifyAudit: false);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryLogQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryLogQuery, bool>> where, Gravitybox.Datastore.EFDAL.Entity.RepositoryLog newValue, string connectionString)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.RepositoryLog, Gravitybox.Datastore.EFDAL.RepositoryLogQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "RepositoryLog", getField: GetDatabaseFieldName, hasModifyAudit: false, connectionString: connectionString);
		}

		#endregion

		#region GetDatabaseFieldName

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		internal static string GetDatabaseFieldName(Gravitybox.Datastore.EFDAL.Entity.RepositoryLog.FieldNameConstants field)
		{
			return GetDatabaseFieldName(field.ToString());
		}

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		internal static string GetDatabaseFieldName(string field)
		{
			switch (field)
			{
				case "Count": return "Count";
				case "ElapsedTime": return "ElapsedTime";
				case "IPAddress": return "IPAddress";
				case "LockTime": return "LockTime";
				case "Query": return "Query";
				case "QueryId": return "QueryId";
				case "RepositoryId": return "RepositoryId";
				case "RepositoryLogId": return "RepositoryLogId";
				case "UsedCache": return "UsedCache";
				case "CreatedBy": return "CreatedBy";
				case "CreatedDate": return "CreatedDate";
			}
			return string.Empty;
		}

		#endregion

		#region Auditing
		string Gravitybox.Datastore.EFDAL.IAuditableSet.CreatedBy
		{
			get { return this.CreatedBy; }
			set { this.CreatedBy = value; }
		}

		string Gravitybox.Datastore.EFDAL.IAuditableSet.ModifiedBy
		{
			get { return null; }
			set { ; }
		}
		string Gravitybox.Datastore.EFDAL.IAuditable.CreatedBy
		{
			get { return this.CreatedBy; }
		}

		System.DateTime? Gravitybox.Datastore.EFDAL.IAuditable.CreatedDate
		{
			get { return this.CreatedDate; }
		}

		bool Gravitybox.Datastore.EFDAL.IAuditable.IsCreateAuditImplemented
		{
			get { return true; }
		}

		bool Gravitybox.Datastore.EFDAL.IAuditable.IsModifyAuditImplemented
		{
			get { return false; }
		}

		bool Gravitybox.Datastore.EFDAL.IAuditable.IsTimestampAuditImplemented
		{
			get { return false; }
		}

		string Gravitybox.Datastore.EFDAL.IAuditable.ModifiedBy
		{
			get { return null; }
		}

		System.DateTime? Gravitybox.Datastore.EFDAL.IAuditable.ModifiedDate
		{
			get { return null; }
		}

		byte[] Gravitybox.Datastore.EFDAL.IAuditable.TimeStamp
		{
			get { return new byte[0]; }
		}

		void IAuditableSet.ResetModifiedBy(string modifier)
		{
		}

		void IAuditableSet.ResetCreatedBy(string modifier)
		{
			if (this.CreatedBy != modifier)
				this.CreatedBy = modifier;
			((IAuditableSet)this).ResetModifiedBy(modifier);
		}

		System.DateTime? Gravitybox.Datastore.EFDAL.IAuditableSet.CreatedDate
		{
			get { return this.CreatedDate; }
			set { this.CreatedDate = value; }
		}

		System.DateTime? Gravitybox.Datastore.EFDAL.IAuditableSet.ModifiedDate
		{
			get { return null; }
			set { ; }
		}

		#endregion

		#region Equals
		/// <summary>
		/// Compares two objects of 'RepositoryLog' type and determines if all properties match
		/// </summary>
		/// <returns>True if all properties match, false otherwise</returns>
		public override bool Equals(object obj)
		{
			var other = obj as Gravitybox.Datastore.EFDAL.Entity.RepositoryLog;
			if (other == null) return false;
			return (
				other.Count == this.Count &&
				other.ElapsedTime == this.ElapsedTime &&
				other.IPAddress == this.IPAddress &&
				other.LockTime == this.LockTime &&
				other.Query == this.Query &&
				other.QueryId == this.QueryId &&
				other.RepositoryId == this.RepositoryId &&
				other.RepositoryLogId == this.RepositoryLogId &&
				other.UsedCache == this.UsedCache
				);
		}

		/// <summary>
		/// Serves as a hash function for this type.
		/// </summary>
		public override int GetHashCode()
		{
			return base.GetHashCode();
		}

		#endregion

	}
}

#region Metadata Class

namespace Gravitybox.Datastore.EFDAL.Entity.Metadata
{
	/// <summary>
	/// Metadata class for the 'RepositoryLog' entity
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("nHydrateModelGenerator", "6.0.0")]
	public partial class RepositoryLogMetadata : Gravitybox.Datastore.EFDAL.IMetadata
	{
		#region Properties

		/// <summary>
		/// Metadata information for the 'Count' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'Count' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "Count", AutoGenerateField = true)]
		public object Count;

		/// <summary>
		/// Metadata information for the 'ElapsedTime' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'ElapsedTime' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "ElapsedTime", AutoGenerateField = true)]
		public object ElapsedTime;

		/// <summary>
		/// Metadata information for the 'IPAddress' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'IPAddress' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.StringLength(50, ErrorMessage = "The property 'IPAddress' has a maximum length of 50")]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "IPAddress", AutoGenerateField = true)]
		public object IPAddress;

		/// <summary>
		/// Metadata information for the 'LockTime' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'LockTime' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "LockTime", AutoGenerateField = true)]
		public object LockTime;

		/// <summary>
		/// Metadata information for the 'Query' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.StringLength(1000, ErrorMessage = "The property 'Query' has a maximum length of 1000")]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "Query", AutoGenerateField = true)]
		public object Query;

		/// <summary>
		/// Metadata information for the 'QueryId' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'QueryId' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "QueryId", AutoGenerateField = true)]
		public object QueryId;

		/// <summary>
		/// Metadata information for the 'RepositoryId' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'RepositoryId' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "RepositoryId", AutoGenerateField = true)]
		public object RepositoryId;

		/// <summary>
		/// Metadata information for the 'RepositoryLogId' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'RepositoryLogId' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Key()]
		[System.ComponentModel.ReadOnly(true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "RepositoryLogId", AutoGenerateField = true)]
		public object RepositoryLogId;

		/// <summary>
		/// Metadata information for the 'UsedCache' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'UsedCache' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "UsedCache", AutoGenerateField = true)]
		public object UsedCache;

		/// <summary>
		/// Metadata information for the 'CreatedBy' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.StringLength(100, ErrorMessage = "The property 'CreatedBy' has a maximum length of 100")]
		[System.ComponentModel.ReadOnly(true)]
		public object CreatedBy;

		/// <summary>
		/// Metadata information for the 'CreatedDate' parameter
		/// </summary>
		[System.ComponentModel.ReadOnly(true)]
		public object CreatedDate;

		#endregion

		#region Methods
		/// <summary>
		/// Gets the underlying table name.
		/// </summary>
		public virtual string GetTableName()
		{
			return "RepositoryLog";
		}

		/// <summary>
		/// Gets a list of all object fields with alias/code facade applied excluding inheritance.
		/// </summary>
		public virtual List<string> GetFields()
		{
			var retval = new List<string>();
			retval.Add("Count");
			retval.Add("ElapsedTime");
			retval.Add("IPAddress");
			retval.Add("LockTime");
			retval.Add("Query");
			retval.Add("QueryId");
			retval.Add("RepositoryId");
			retval.Add("RepositoryLogId");
			retval.Add("UsedCache");
			return retval;
		}

		/// <summary>
		/// Returns the type of the parent object if one exists.
		/// </summary>
		public virtual System.Type InheritsFrom()
		{
			return null;
		}

		/// <summary>
		/// Returns the database schema name.
		/// </summary>
		public virtual string Schema()
		{
			return "dbo";
		}

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		public virtual string GetDatabaseFieldName(string field)
		{
			switch (field)
			{
				case "Count": return "Count";
				case "ElapsedTime": return "ElapsedTime";
				case "IPAddress": return "IPAddress";
				case "LockTime": return "LockTime";
				case "Query": return "Query";
				case "QueryId": return "QueryId";
				case "RepositoryId": return "RepositoryId";
				case "RepositoryLogId": return "RepositoryLogId";
				case "UsedCache": return "UsedCache";
				case "CreatedBy": return "CreatedBy";
				case "CreatedDate": return "CreatedDate";
			}
			return string.Empty;
		}

		#endregion

	}

}

#endregion

#pragma warning restore 612

