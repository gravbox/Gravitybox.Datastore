//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 612
using System;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.ComponentModel;
using System.Collections.Generic;
using System.Text;
using Gravitybox.Datastore.EFDAL;
using Gravitybox.Datastore.EFDAL.EventArguments;
using System.Text.RegularExpressions;
using System.Linq.Expressions;
using System.Data.Entity;
using System.Data.Linq;
using System.Data.Entity.ModelConfiguration;
using System.ComponentModel.DataAnnotations;

namespace Gravitybox.Datastore.EFDAL.Entity
{
	/// <summary>
	/// The 'CacheInvalidate' entity
	/// Log of when the query cache was invalidated
	/// </summary>
	[DataContract]
	[Serializable]
	[System.CodeDom.Compiler.GeneratedCode("nHydrateModelGenerator", "6.0.0")]
	[FieldNameConstants(typeof(Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants))]
	[System.ComponentModel.DataAnnotations.MetadataType(typeof(Gravitybox.Datastore.EFDAL.Entity.Metadata.CacheInvalidateMetadata))]
	[System.ComponentModel.Description("Log of when the query cache was invalidated")]
	[EntityMetadata("CacheInvalidate", false, false, false, false, "Log of when the query cache was invalidated", true, false, false, "dbo")]
	public partial class CacheInvalidate : BaseEntity, Gravitybox.Datastore.EFDAL.IBusinessObject, System.ICloneable, Gravitybox.Datastore.EFDAL.ICreatable
	{
		#region FieldNameConstants Enumeration

		/// <summary>
		/// Enumeration to define each property that maps to a database field for the 'CacheInvalidate' table.
		/// </summary>
		public enum FieldNameConstants
		{
			/// <summary>
			/// Field mapping for the 'AddedDate' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'AddedDate' property")]
			AddedDate,
			/// <summary>
			/// Field mapping for the 'Count' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'Count' property")]
			Count,
			/// <summary>
			/// Field mapping for the 'Reason' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'Reason' property")]
			Reason,
			/// <summary>
			/// Field mapping for the 'RepositoryId' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'RepositoryId' property")]
			RepositoryId,
			/// <summary>
			/// Field mapping for the 'RowId' property
			/// </summary>
			[System.ComponentModel.DataAnnotations.Key]
			[System.ComponentModel.ReadOnly(true)]
			[System.ComponentModel.Description("Field mapping for the 'RowId' property")]
			RowId,
			/// <summary>
			/// Field mapping for the 'Subkey' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'Subkey' property")]
			Subkey,
		}
		#endregion

		#region Constructors

		/// <summary>
		/// Initializes a new instance of the Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate class
		/// </summary>
		public CacheInvalidate()
		{
			this._addedDate = DateTime.Now;
			this._count = 0;

		}

		#endregion

		#region Properties

		/// <summary>
		/// The property that maps back to the database 'CacheInvalidate.AddedDate' field.
		/// </summary>
		/// <remarks>Field: [CacheInvalidate].[AddedDate], Field Length: 2, Not Nullable, Indexed, Default Value: getdate()</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("AddedDate")]
		[System.ComponentModel.DataAnnotations.Schema.Index()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual DateTime AddedDate
		{
			get { return _addedDate; }
			set
			{
				_addedDate = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'CacheInvalidate.Count' field.
		/// </summary>
		/// <remarks>Field: [CacheInvalidate].[Count], Not Nullable, Default Value: 0</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("Count")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int Count
		{
			get { return _count; }
			set
			{
				_count = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'CacheInvalidate.Reason' field.
		/// </summary>
		/// <remarks>Field: [CacheInvalidate].[Reason], Field Length: 20, Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("Reason")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual string Reason
		{
			get { return _reason; }
			set
			{
				if ((value != null) && (value.Length > GetMaxLength(Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants.Reason))) throw new Exception(string.Format(GlobalValues.ERROR_DATA_TOO_BIG, value, "CacheInvalidate.Reason", GetMaxLength(Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants.Reason)));
				_reason = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'CacheInvalidate.RepositoryId' field.
		/// </summary>
		/// <remarks>Field: [CacheInvalidate].[RepositoryId], Not Nullable, Indexed</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("RepositoryId")]
		[System.ComponentModel.DataAnnotations.Schema.Index()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int RepositoryId
		{
			get { return _repositoryId; }
			set
			{
				_repositoryId = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'CacheInvalidate.RowId' field.
		/// </summary>
		/// <remarks>Field: [CacheInvalidate].[RowId], Not Nullable, Primary Key, AutoNumber, Unique, Indexed</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("RowId")]
		[System.ComponentModel.DataAnnotations.Schema.Index(IsUnique = true)]
		[System.ComponentModel.DataAnnotations.Key()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual long RowId
		{
			get { return _rowId; }
			protected internal set
			{
				_rowId = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'CacheInvalidate.Subkey' field.
		/// </summary>
		/// <remarks>Field: [CacheInvalidate].[Subkey], Field Length: 50, Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("Subkey")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual string Subkey
		{
			get { return _subkey; }
			set
			{
				if ((value != null) && (value.Length > GetMaxLength(Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants.Subkey))) throw new Exception(string.Format(GlobalValues.ERROR_DATA_TOO_BIG, value, "CacheInvalidate.Subkey", GetMaxLength(Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants.Subkey)));
				_subkey = value;
			}
		}

		#endregion

		#region Property Holders

		/// <summary />
		protected DateTime _addedDate;
		/// <summary />
		protected int _count;
		/// <summary />
		protected string _reason;
		/// <summary />
		protected int _repositoryId;
		/// <summary />
		protected long _rowId;
		/// <summary />
		protected string _subkey;

		#endregion

		#region GetMaxLength

		/// <summary>
		/// Gets the maximum size of the field value.
		/// </summary>
		public static int GetMaxLength(Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants field)
		{
			switch (field)
			{
				case Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants.AddedDate:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants.Count:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants.Reason:
					return 20;
				case Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants.RepositoryId:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants.RowId:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants.Subkey:
					return 50;
			}
			return 0;
		}

		int Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetMaxLength(Enum field)
		{
			return GetMaxLength((Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants)field);
		}

		#endregion

		#region GetFieldNameConstants

		System.Type Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetFieldNameConstants()
		{
			return typeof(Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants);
		}

		#endregion

		#region GetFieldType

		/// <summary>
		/// Gets the system type of a field on this object
		/// </summary>
		public static System.Type GetFieldType(Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants field)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants'.");

			switch ((Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants)field)
			{
				case Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants.AddedDate: return typeof(DateTime);
				case Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants.Count: return typeof(int);
				case Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants.Reason: return typeof(string);
				case Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants.RepositoryId: return typeof(int);
				case Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants.RowId: return typeof(long);
				case Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants.Subkey: return typeof(string);
			}
			return null;
		}

		System.Type Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetFieldType(Enum field)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants'.");

			return GetFieldType((Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants)field);
		}

		#endregion

		#region Get/Set Value

		object Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetValue(System.Enum field)
		{
			return ((Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject)this).GetValue(field, null);
		}

		object Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetValue(System.Enum field, object defaultValue)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants'.");
			return this.GetValue((Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants)field, defaultValue);
		}

		void Gravitybox.Datastore.EFDAL.IBusinessObject.SetValue(System.Enum field, object newValue)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants'.");
			this.SetValue((Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants)field, newValue);
		}

		void Gravitybox.Datastore.EFDAL.IBusinessObject.SetValue(System.Enum field, object newValue, bool fixLength)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants'.");
			this.SetValue((Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants)field, newValue, fixLength);
		}

		#endregion

		#region PrimaryKey

		/// <summary>
		/// Generic primary key for this object
		/// </summary>
		Gravitybox.Datastore.EFDAL.IPrimaryKey Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.PrimaryKey
		{
			get { return new PrimaryKey(Util.HashPK("CacheInvalidate", this.RowId)); }
		}

		#endregion

		#region Clone

		/// <summary>
		/// Creates a shallow copy of this object
		/// </summary>
		public virtual object Clone()
		{
			return Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.Clone(this);
		}

		/// <summary>
		/// Creates a shallow copy of this object with defined, default values and new PK
		/// </summary>
		public virtual object CloneAsNew()
		{
			var item = Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.Clone(this);
			item._rowId = 0;
			item._addedDate = DateTime.Now;
			item._count = 0;
			return item;
		}

		/// <summary>
		/// Creates a shallow copy of this object
		/// </summary>
		public static CacheInvalidate Clone(Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate item)
		{
			var newItem = new CacheInvalidate();
			newItem.AddedDate = item.AddedDate;
			newItem.Count = item.Count;
			newItem.Reason = item.Reason;
			newItem.RepositoryId = item.RepositoryId;
			newItem.RowId = item.RowId;
			newItem.Subkey = item.Subkey;
			return newItem;
		}

		#endregion

		#region GetValue

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		public virtual object GetValue(Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants field)
		{
			return GetValue(field, null);
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		public virtual object GetValue(Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants field, object defaultValue)
		{
			if (field == Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants.AddedDate)
				return this.AddedDate;
			if (field == Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants.Count)
				return this.Count;
			if (field == Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants.Reason)
				return ((this.Reason == null) ? defaultValue : this.Reason);
			if (field == Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants.RepositoryId)
				return this.RepositoryId;
			if (field == Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants.RowId)
				return this.RowId;
			if (field == Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants.Subkey)
				return ((this.Subkey == null) ? defaultValue : this.Subkey);
			throw new Exception("Field '" + field.ToString() + "' not found!");
		}

		#endregion

		#region SetValue

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="field">The field to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		public virtual void SetValue(Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants field, object newValue)
		{
			SetValue(field, newValue, false);
		}

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="field">The field to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		/// <param name="fixLength">Determines if the length should be truncated if too long. When false, an error will be raised if data is too large to be assigned to the field.</param>
		public virtual void SetValue(Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants field, object newValue, bool fixLength)
		{
			if (field == Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants.AddedDate)
			{
				this.AddedDate = GlobalValues.SetValueHelperDateTimeNotNullableInternal(newValue, "Field 'AddedDate' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants.Count)
			{
				this.Count = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'Count' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants.Reason)
			{
				this.Reason = GlobalValues.SetValueHelperInternal((string)newValue, fixLength, GetMaxLength(field));
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants.RepositoryId)
			{
				this.RepositoryId = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'RepositoryId' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants.RowId)
			{
				throw new Exception("Field '" + field.ToString() + "' is a primary key and cannot be set!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants.Subkey)
			{
				this.Subkey = GlobalValues.SetValueHelperInternal((string)newValue, fixLength, GetMaxLength(field));
			}
			else
				throw new Exception("Field '" + field.ToString() + "' not found!");
		}

		#endregion

		#region Navigation Properties

		#endregion

		#region Static SQL Methods

		internal static string GetFieldAliasFromFieldNameSqlMapping(string alias)
		{
			alias = alias.Replace("[", string.Empty).Replace("]", string.Empty);
			switch (alias.ToLower())
			{
				case "addeddate": return "addeddate";
				case "count": return "count";
				case "reason": return "reason";
				case "repositoryid": return "repositoryid";
				case "rowid": return "rowid";
				case "subkey": return "subkey";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetTableFromFieldAliasSqlMapping(string alias)
		{
			switch (alias.ToLower())
			{
				case "addeddate": return "CacheInvalidate";
				case "count": return "CacheInvalidate";
				case "reason": return "CacheInvalidate";
				case "repositoryid": return "CacheInvalidate";
				case "rowid": return "CacheInvalidate";
				case "subkey": return "CacheInvalidate";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetTableFromFieldNameSqlMapping(string field)
		{
			switch (field.ToLower())
			{
				case "addeddate": return "CacheInvalidate";
				case "count": return "CacheInvalidate";
				case "reason": return "CacheInvalidate";
				case "repositoryid": return "CacheInvalidate";
				case "rowid": return "CacheInvalidate";
				case "subkey": return "CacheInvalidate";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetRemappedLinqSql(string sql, string parentAlias, LinqSQLFromClauseCollection childTables)
		{
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[addeddate\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "CacheInvalidate") + "].[addeddate]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[count\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "CacheInvalidate") + "].[count]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[reason\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "CacheInvalidate") + "].[reason]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[repositoryid\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "CacheInvalidate") + "].[repositoryid]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[rowid\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "CacheInvalidate") + "].[rowid]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[subkey\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "CacheInvalidate") + "].[subkey]", RegexOptions.IgnoreCase);
			return sql;
		}

		#endregion

		#region DeleteData

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.CacheInvalidateQuery, bool>> where)
		{
			return DeleteData(where: where, optimizer: new QueryOptimizer(), startup: new ContextStartup(null), connectionString: Gravitybox.Datastore.EFDAL.DatastoreEntities.GetConnectionString());
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="optimizer">The optimization object to use for running queries</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.CacheInvalidateQuery, bool>> where, QueryOptimizer optimizer)
		{
			return DeleteData(where: where, optimizer: optimizer, startup: new ContextStartup(null), connectionString: Gravitybox.Datastore.EFDAL.DatastoreEntities.GetConnectionString());
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="connectionString">The database connection string to use for this access</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.CacheInvalidateQuery, bool>> where, string connectionString)
		{
			return DeleteData(where: where, optimizer: new QueryOptimizer(), startup: new ContextStartup(null), connectionString: connectionString);
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="optimizer">The optimization object to use for running queries</param>
		/// <param name="startup">The startup options</param>
		/// <param name="connectionString">The database connection string to use for this access</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.CacheInvalidateQuery, bool>> where, QueryOptimizer optimizer, ContextStartup startup, string connectionString)
		{
			if (optimizer == null)
				optimizer = new QueryOptimizer();
				if (startup == null) startup = new ContextStartup(null);

			using (var connection = Gravitybox.Datastore.EFDAL.DBHelper.GetConnection(Gravitybox.Datastore.EFDAL.Util.StripEFCS2Normal(connectionString)))
			{
				using (var dc = new DataContext(connection))
				{
					var template = dc.GetTable<Gravitybox.Datastore.EFDAL.CacheInvalidateQuery>();
					using (var cmd = BusinessEntityQuery.GetCommand<Gravitybox.Datastore.EFDAL.CacheInvalidateQuery>(dc, template, where))
					{
						if (!startup.DefaultTimeout && startup.CommandTimeout > 0) cmd.CommandTimeout = startup.CommandTimeout;
						else
						{
							var cb = new System.Data.SqlClient.SqlConnectionStringBuilder(connectionString);
							cmd.CommandTimeout = cb.ConnectTimeout;
						}

						var parser = LinqSQLParser.Create(cmd.CommandText, LinqSQLParser.ObjectTypeConstants.Table);
                        var sb = new StringBuilder();
                        sb.AppendLine("SET ROWCOUNT " + optimizer.ChunkSize + ";");
                        sb.AppendLine("delete [X] from [dbo].[CacheInvalidate] [X] inner join (");
                        sb.AppendLine("SELECT [t0].[RowId]");
                        sb.AppendLine(parser.GetFromClause(optimizer));
                        sb.AppendLine(parser.GetWhereClause());
                        sb.AppendLine(") AS [Extent2]");
                        sb.AppendLine("ON [X].[RowId] = [Extent2].[RowId]");
                        sb.AppendLine("select @@ROWCOUNT");
						cmd.CommandText = sb.ToString();
						dc.Connection.Open();
						var startTime = DateTime.Now;
						var affected = 0;
						var count = 0;
						do
						{
							count = (int)cmd.ExecuteScalar();
							affected += count;
						} while (count > 0 && optimizer.ChunkSize > 0);
						var endTime = DateTime.Now;
						optimizer.TotalMilliseconds = (long)endTime.Subtract(startTime).TotalMilliseconds;
						dc.Connection.Close();
						return affected;
					}
				}
			}
		}

		#endregion

		#region UpdateData

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.CacheInvalidateQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.CacheInvalidateQuery, bool>> where, TSource newValue)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate, Gravitybox.Datastore.EFDAL.CacheInvalidateQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "CacheInvalidate", getField: GetDatabaseFieldName, hasModifyAudit: false);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.CacheInvalidateQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.CacheInvalidateQuery, bool>> where, TSource newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate, Gravitybox.Datastore.EFDAL.CacheInvalidateQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "CacheInvalidate", getField: GetDatabaseFieldName, hasModifyAudit: false, startup: null, connection: connection, transaction: transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="startup">A configuration object</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.CacheInvalidateQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.CacheInvalidateQuery, bool>> where, TSource newValue, ContextStartup startup, string connectionString)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate, Gravitybox.Datastore.EFDAL.CacheInvalidateQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "CacheInvalidate", getField: GetDatabaseFieldName, hasModifyAudit: false, startup: startup, connectionString: connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.CacheInvalidateQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.CacheInvalidateQuery, bool>> where, TSource newValue, string connectionString)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate, Gravitybox.Datastore.EFDAL.CacheInvalidateQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "CacheInvalidate", getField: GetDatabaseFieldName, hasModifyAudit: false, connectionString: connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.CacheInvalidateQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.CacheInvalidateQuery, bool>> where, Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate newValue)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate, Gravitybox.Datastore.EFDAL.CacheInvalidateQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "CacheInvalidate", getField: GetDatabaseFieldName, hasModifyAudit: false);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.CacheInvalidateQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.CacheInvalidateQuery, bool>> where, Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate newValue, string connectionString)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate, Gravitybox.Datastore.EFDAL.CacheInvalidateQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "CacheInvalidate", getField: GetDatabaseFieldName, hasModifyAudit: false, connectionString: connectionString);
		}

		#endregion

		#region GetDatabaseFieldName

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		internal static string GetDatabaseFieldName(Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate.FieldNameConstants field)
		{
			return GetDatabaseFieldName(field.ToString());
		}

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		internal static string GetDatabaseFieldName(string field)
		{
			switch (field)
			{
				case "AddedDate": return "AddedDate";
				case "Count": return "Count";
				case "Reason": return "Reason";
				case "RepositoryId": return "RepositoryId";
				case "RowId": return "RowId";
				case "Subkey": return "Subkey";
			}
			return string.Empty;
		}

		#endregion

		#region Equals
		/// <summary>
		/// Compares two objects of 'CacheInvalidate' type and determines if all properties match
		/// </summary>
		/// <returns>True if all properties match, false otherwise</returns>
		public override bool Equals(object obj)
		{
			var other = obj as Gravitybox.Datastore.EFDAL.Entity.CacheInvalidate;
			if (other == null) return false;
			return (
				other.AddedDate == this.AddedDate &&
				other.Count == this.Count &&
				other.Reason == this.Reason &&
				other.RepositoryId == this.RepositoryId &&
				other.RowId == this.RowId &&
				other.Subkey == this.Subkey
				);
		}

		/// <summary>
		/// Serves as a hash function for this type.
		/// </summary>
		public override int GetHashCode()
		{
			return base.GetHashCode();
		}

		#endregion

	}
}

#region Metadata Class

namespace Gravitybox.Datastore.EFDAL.Entity.Metadata
{
	/// <summary>
	/// Metadata class for the 'CacheInvalidate' entity
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("nHydrateModelGenerator", "6.0.0")]
	public partial class CacheInvalidateMetadata : Gravitybox.Datastore.EFDAL.IMetadata
	{
		#region Properties

		/// <summary>
		/// Metadata information for the 'AddedDate' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'AddedDate' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "AddedDate", AutoGenerateField = true)]
		public object AddedDate;

		/// <summary>
		/// Metadata information for the 'Count' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'Count' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "Count", AutoGenerateField = true)]
		public object Count;

		/// <summary>
		/// Metadata information for the 'Reason' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.StringLength(20, ErrorMessage = "The property 'Reason' has a maximum length of 20")]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "Reason", AutoGenerateField = true)]
		public object Reason;

		/// <summary>
		/// Metadata information for the 'RepositoryId' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'RepositoryId' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "RepositoryId", AutoGenerateField = true)]
		public object RepositoryId;

		/// <summary>
		/// Metadata information for the 'RowId' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'RowId' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Key()]
		[System.ComponentModel.ReadOnly(true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "RowId", AutoGenerateField = true)]
		public object RowId;

		/// <summary>
		/// Metadata information for the 'Subkey' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.StringLength(50, ErrorMessage = "The property 'Subkey' has a maximum length of 50")]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "Subkey", AutoGenerateField = true)]
		public object Subkey;

		#endregion

		#region Methods
		/// <summary>
		/// Gets the underlying table name.
		/// </summary>
		public virtual string GetTableName()
		{
			return "CacheInvalidate";
		}

		/// <summary>
		/// Gets a list of all object fields with alias/code facade applied excluding inheritance.
		/// </summary>
		public virtual List<string> GetFields()
		{
			var retval = new List<string>();
			retval.Add("AddedDate");
			retval.Add("Count");
			retval.Add("Reason");
			retval.Add("RepositoryId");
			retval.Add("RowId");
			retval.Add("Subkey");
			return retval;
		}

		/// <summary>
		/// Returns the type of the parent object if one exists.
		/// </summary>
		public virtual System.Type InheritsFrom()
		{
			return null;
		}

		/// <summary>
		/// Returns the database schema name.
		/// </summary>
		public virtual string Schema()
		{
			return "dbo";
		}

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		public virtual string GetDatabaseFieldName(string field)
		{
			switch (field)
			{
				case "AddedDate": return "AddedDate";
				case "Count": return "Count";
				case "Reason": return "Reason";
				case "RepositoryId": return "RepositoryId";
				case "RowId": return "RowId";
				case "Subkey": return "Subkey";
			}
			return string.Empty;
		}

		#endregion

	}

}

#endregion

#pragma warning restore 612

