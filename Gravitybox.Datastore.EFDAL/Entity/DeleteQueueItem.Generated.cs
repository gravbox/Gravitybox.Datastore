//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 612
using System;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.ComponentModel;
using System.Collections.Generic;
using System.Text;
using Gravitybox.Datastore.EFDAL;
using Gravitybox.Datastore.EFDAL.EventArguments;
using System.Text.RegularExpressions;
using System.Linq.Expressions;
using System.Data.Entity;
using System.Data.Linq;
using System.Data.Entity.ModelConfiguration;
using System.ComponentModel.DataAnnotations;

namespace Gravitybox.Datastore.EFDAL.Entity
{
	/// <summary>
	/// The 'DeleteQueueItem' entity
	/// </summary>
	[DataContract]
	[Serializable]
	[System.CodeDom.Compiler.GeneratedCode("nHydrateModelGenerator", "6.0.0")]
	[FieldNameConstants(typeof(Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants))]
	[System.ComponentModel.DataAnnotations.MetadataType(typeof(Gravitybox.Datastore.EFDAL.Entity.Metadata.DeleteQueueItemMetadata))]
	[EntityMetadata("DeleteQueueItem", false, false, false, false, "", true, false, false, "dbo")]
	public partial class DeleteQueueItem : BaseEntity, Gravitybox.Datastore.EFDAL.IBusinessObject, System.ICloneable, Gravitybox.Datastore.EFDAL.ICreatable
	{
		#region FieldNameConstants Enumeration

		/// <summary>
		/// Enumeration to define each property that maps to a database field for the 'DeleteQueueItem' table.
		/// </summary>
		public enum FieldNameConstants
		{
			/// <summary>
			/// Field mapping for the 'ParentRowId' property
			/// </summary>
			[System.ComponentModel.DataAnnotations.Key]
			[System.ComponentModel.ReadOnly(true)]
			[System.ComponentModel.Description("Field mapping for the 'ParentRowId' property")]
			ParentRowId,
			/// <summary>
			/// Field mapping for the 'RecordIdx' property
			/// </summary>
			[System.ComponentModel.DataAnnotations.Key]
			[System.ComponentModel.ReadOnly(true)]
			[System.ComponentModel.Description("Field mapping for the 'RecordIdx' property")]
			RecordIdx,
		}
		#endregion

		#region Constructors

		/// <summary>
		/// Initializes a new instance of the Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem class
		/// </summary>
		public DeleteQueueItem()
		{

		}

		/// <summary>
		/// Initializes a new instance of the Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem class with a defined primary key
		/// </summary>
		public DeleteQueueItem(long parentRowId, long recordIdx)
			: this()
		{
			this.ParentRowId = parentRowId;
			this.RecordIdx = recordIdx;
		}

		#endregion

		#region Properties

		/// <summary>
		/// The property that maps back to the database 'DeleteQueueItem.ParentRowId' field.
		/// </summary>
		/// <remarks>Field: [DeleteQueueItem].[ParentRowId], Not Nullable, Primary Key, Unique, Indexed</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("ParentRowId")]
		[System.ComponentModel.DataAnnotations.Schema.Index(IsUnique = true)]
		[System.ComponentModel.DataAnnotations.Key()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual long ParentRowId
		{
			get { return _parentRowId; }
			set
			{
				_parentRowId = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'DeleteQueueItem.RecordIdx' field.
		/// </summary>
		/// <remarks>Field: [DeleteQueueItem].[RecordIdx], Not Nullable, Primary Key, Unique, Indexed</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("RecordIdx")]
		[System.ComponentModel.DataAnnotations.Schema.Index(IsUnique = true)]
		[System.ComponentModel.DataAnnotations.Key()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual long RecordIdx
		{
			get { return _recordIdx; }
			set
			{
				_recordIdx = value;
			}
		}

		#endregion

		#region Property Holders

		/// <summary />
		protected long _parentRowId;
		/// <summary />
		protected long _recordIdx;

		#endregion

		#region GetMaxLength

		/// <summary>
		/// Gets the maximum size of the field value.
		/// </summary>
		public static int GetMaxLength(Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants field)
		{
			switch (field)
			{
				case Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants.ParentRowId:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants.RecordIdx:
					return 0;
			}
			return 0;
		}

		int Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetMaxLength(Enum field)
		{
			return GetMaxLength((Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants)field);
		}

		#endregion

		#region GetFieldNameConstants

		System.Type Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetFieldNameConstants()
		{
			return typeof(Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants);
		}

		#endregion

		#region GetFieldType

		/// <summary>
		/// Gets the system type of a field on this object
		/// </summary>
		public static System.Type GetFieldType(Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants field)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants'.");

			switch ((Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants)field)
			{
				case Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants.ParentRowId: return typeof(long);
				case Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants.RecordIdx: return typeof(long);
			}
			return null;
		}

		System.Type Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetFieldType(Enum field)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants'.");

			return GetFieldType((Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants)field);
		}

		#endregion

		#region Get/Set Value

		object Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetValue(System.Enum field)
		{
			return ((Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject)this).GetValue(field, null);
		}

		object Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetValue(System.Enum field, object defaultValue)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants'.");
			return this.GetValue((Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants)field, defaultValue);
		}

		void Gravitybox.Datastore.EFDAL.IBusinessObject.SetValue(System.Enum field, object newValue)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants'.");
			this.SetValue((Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants)field, newValue);
		}

		void Gravitybox.Datastore.EFDAL.IBusinessObject.SetValue(System.Enum field, object newValue, bool fixLength)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants'.");
			this.SetValue((Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants)field, newValue, fixLength);
		}

		#endregion

		#region PrimaryKey

		/// <summary>
		/// Generic primary key for this object
		/// </summary>
		Gravitybox.Datastore.EFDAL.IPrimaryKey Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.PrimaryKey
		{
			get { return new PrimaryKey(Util.HashPK("DeleteQueueItem", this.ParentRowId,this.RecordIdx)); }
		}

		#endregion

		#region Clone

		/// <summary>
		/// Creates a shallow copy of this object
		/// </summary>
		public virtual object Clone()
		{
			return Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.Clone(this);
		}

		/// <summary>
		/// Creates a shallow copy of this object with defined, default values and new PK
		/// </summary>
		public virtual object CloneAsNew()
		{
			var item = Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.Clone(this);
			return item;
		}

		/// <summary>
		/// Creates a shallow copy of this object
		/// </summary>
		public static DeleteQueueItem Clone(Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem item)
		{
			var newItem = new DeleteQueueItem();
			newItem.ParentRowId = item.ParentRowId;
			newItem.RecordIdx = item.RecordIdx;
			return newItem;
		}

		#endregion

		#region GetValue

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		public virtual object GetValue(Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants field)
		{
			return GetValue(field, null);
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		public virtual object GetValue(Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants field, object defaultValue)
		{
			if (field == Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants.ParentRowId)
				return this.ParentRowId;
			if (field == Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants.RecordIdx)
				return this.RecordIdx;
			throw new Exception("Field '" + field.ToString() + "' not found!");
		}

		#endregion

		#region SetValue

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="field">The field to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		public virtual void SetValue(Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants field, object newValue)
		{
			SetValue(field, newValue, false);
		}

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="field">The field to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		/// <param name="fixLength">Determines if the length should be truncated if too long. When false, an error will be raised if data is too large to be assigned to the field.</param>
		public virtual void SetValue(Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants field, object newValue, bool fixLength)
		{
			if (field == Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants.ParentRowId)
			{
				throw new Exception("Field '" + field.ToString() + "' is a primary key and cannot be set!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants.RecordIdx)
			{
				throw new Exception("Field '" + field.ToString() + "' is a primary key and cannot be set!");
			}
			else
				throw new Exception("Field '" + field.ToString() + "' not found!");
		}

		#endregion

		#region Navigation Properties

		/// <summary>
		/// The navigation definition for walking DeleteQueue->DeleteQueueItem
		/// </summary>
		[DataMember]
		[XmlIgnore]
		public virtual DeleteQueue DeleteQueue { get; set; }

		#endregion

		#region Static SQL Methods

		internal static string GetFieldAliasFromFieldNameSqlMapping(string alias)
		{
			alias = alias.Replace("[", string.Empty).Replace("]", string.Empty);
			switch (alias.ToLower())
			{
				case "parentrowid": return "parentrowid";
				case "recordidx": return "recordidx";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetTableFromFieldAliasSqlMapping(string alias)
		{
			switch (alias.ToLower())
			{
				case "parentrowid": return "DeleteQueueItem";
				case "recordidx": return "DeleteQueueItem";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetTableFromFieldNameSqlMapping(string field)
		{
			switch (field.ToLower())
			{
				case "parentrowid": return "DeleteQueueItem";
				case "recordidx": return "DeleteQueueItem";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetRemappedLinqSql(string sql, string parentAlias, LinqSQLFromClauseCollection childTables)
		{
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[parentrowid\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "DeleteQueueItem") + "].[parentrowid]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[recordidx\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "DeleteQueueItem") + "].[recordidx]", RegexOptions.IgnoreCase);
			return sql;
		}

		#endregion

		#region DeleteData

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.DeleteQueueItemQuery, bool>> where)
		{
			return DeleteData(where: where, optimizer: new QueryOptimizer(), startup: new ContextStartup(null), connectionString: Gravitybox.Datastore.EFDAL.DatastoreEntities.GetConnectionString());
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="optimizer">The optimization object to use for running queries</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.DeleteQueueItemQuery, bool>> where, QueryOptimizer optimizer)
		{
			return DeleteData(where: where, optimizer: optimizer, startup: new ContextStartup(null), connectionString: Gravitybox.Datastore.EFDAL.DatastoreEntities.GetConnectionString());
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="connectionString">The database connection string to use for this access</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.DeleteQueueItemQuery, bool>> where, string connectionString)
		{
			return DeleteData(where: where, optimizer: new QueryOptimizer(), startup: new ContextStartup(null), connectionString: connectionString);
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="optimizer">The optimization object to use for running queries</param>
		/// <param name="startup">The startup options</param>
		/// <param name="connectionString">The database connection string to use for this access</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.DeleteQueueItemQuery, bool>> where, QueryOptimizer optimizer, ContextStartup startup, string connectionString)
		{
			if (optimizer == null)
				optimizer = new QueryOptimizer();
				if (startup == null) startup = new ContextStartup(null);

			using (var connection = Gravitybox.Datastore.EFDAL.DBHelper.GetConnection(Gravitybox.Datastore.EFDAL.Util.StripEFCS2Normal(connectionString)))
			{
				using (var dc = new DataContext(connection))
				{
					var template = dc.GetTable<Gravitybox.Datastore.EFDAL.DeleteQueueItemQuery>();
					using (var cmd = BusinessEntityQuery.GetCommand<Gravitybox.Datastore.EFDAL.DeleteQueueItemQuery>(dc, template, where))
					{
						if (!startup.DefaultTimeout && startup.CommandTimeout > 0) cmd.CommandTimeout = startup.CommandTimeout;
						else
						{
							var cb = new System.Data.SqlClient.SqlConnectionStringBuilder(connectionString);
							cmd.CommandTimeout = cb.ConnectTimeout;
						}

						var parser = LinqSQLParser.Create(cmd.CommandText, LinqSQLParser.ObjectTypeConstants.Table);
                        var sb = new StringBuilder();
                        sb.AppendLine("SET ROWCOUNT " + optimizer.ChunkSize + ";");
                        sb.AppendLine("delete [X] from [dbo].[DeleteQueueItem] [X] inner join (");
                        sb.AppendLine("SELECT [t0].[ParentRowId], [t0].[RecordIdx]");
                        sb.AppendLine(parser.GetFromClause(optimizer));
                        sb.AppendLine(parser.GetWhereClause());
                        sb.AppendLine(") AS [Extent2]");
                        sb.AppendLine("ON [X].[ParentRowId] = [Extent2].[ParentRowId] AND [X].[RecordIdx] = [Extent2].[RecordIdx]");
                        sb.AppendLine("select @@ROWCOUNT");
						cmd.CommandText = sb.ToString();
						dc.Connection.Open();
						var startTime = DateTime.Now;
						var affected = 0;
						var count = 0;
						do
						{
							count = (int)cmd.ExecuteScalar();
							affected += count;
						} while (count > 0 && optimizer.ChunkSize > 0);
						var endTime = DateTime.Now;
						optimizer.TotalMilliseconds = (long)endTime.Subtract(startTime).TotalMilliseconds;
						dc.Connection.Close();
						return affected;
					}
				}
			}
		}

		#endregion

		#region UpdateData

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.DeleteQueueItemQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.DeleteQueueItemQuery, bool>> where, TSource newValue)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem, Gravitybox.Datastore.EFDAL.DeleteQueueItemQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "DeleteQueueItem", getField: GetDatabaseFieldName, hasModifyAudit: false);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.DeleteQueueItemQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.DeleteQueueItemQuery, bool>> where, TSource newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem, Gravitybox.Datastore.EFDAL.DeleteQueueItemQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "DeleteQueueItem", getField: GetDatabaseFieldName, hasModifyAudit: false, startup: null, connection: connection, transaction: transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="startup">A configuration object</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.DeleteQueueItemQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.DeleteQueueItemQuery, bool>> where, TSource newValue, ContextStartup startup, string connectionString)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem, Gravitybox.Datastore.EFDAL.DeleteQueueItemQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "DeleteQueueItem", getField: GetDatabaseFieldName, hasModifyAudit: false, startup: startup, connectionString: connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.DeleteQueueItemQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.DeleteQueueItemQuery, bool>> where, TSource newValue, string connectionString)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem, Gravitybox.Datastore.EFDAL.DeleteQueueItemQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "DeleteQueueItem", getField: GetDatabaseFieldName, hasModifyAudit: false, connectionString: connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.DeleteQueueItemQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.DeleteQueueItemQuery, bool>> where, Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem newValue)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem, Gravitybox.Datastore.EFDAL.DeleteQueueItemQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "DeleteQueueItem", getField: GetDatabaseFieldName, hasModifyAudit: false);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.DeleteQueueItemQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.DeleteQueueItemQuery, bool>> where, Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem newValue, string connectionString)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem, Gravitybox.Datastore.EFDAL.DeleteQueueItemQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "DeleteQueueItem", getField: GetDatabaseFieldName, hasModifyAudit: false, connectionString: connectionString);
		}

		#endregion

		#region GetDatabaseFieldName

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		internal static string GetDatabaseFieldName(Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem.FieldNameConstants field)
		{
			return GetDatabaseFieldName(field.ToString());
		}

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		internal static string GetDatabaseFieldName(string field)
		{
			switch (field)
			{
				case "ParentRowId": return "ParentRowId";
				case "RecordIdx": return "RecordIdx";
			}
			return string.Empty;
		}

		#endregion

		#region Equals
		/// <summary>
		/// Compares two objects of 'DeleteQueueItem' type and determines if all properties match
		/// </summary>
		/// <returns>True if all properties match, false otherwise</returns>
		public override bool Equals(object obj)
		{
			var other = obj as Gravitybox.Datastore.EFDAL.Entity.DeleteQueueItem;
			if (other == null) return false;
			return (
				other.ParentRowId == this.ParentRowId &&
				other.RecordIdx == this.RecordIdx
				);
		}

		/// <summary>
		/// Serves as a hash function for this type.
		/// </summary>
		public override int GetHashCode()
		{
			return base.GetHashCode();
		}

		#endregion

	}
}

#region Metadata Class

namespace Gravitybox.Datastore.EFDAL.Entity.Metadata
{
	/// <summary>
	/// Metadata class for the 'DeleteQueueItem' entity
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("nHydrateModelGenerator", "6.0.0")]
	public partial class DeleteQueueItemMetadata : Gravitybox.Datastore.EFDAL.IMetadata
	{
		#region Properties

		/// <summary>
		/// Metadata information for the 'ParentRowId' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'ParentRowId' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Key()]
		[System.ComponentModel.ReadOnly(true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "ParentRowId", AutoGenerateField = true)]
		public object ParentRowId;

		/// <summary>
		/// Metadata information for the 'RecordIdx' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'RecordIdx' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Key()]
		[System.ComponentModel.ReadOnly(true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "RecordIdx", AutoGenerateField = true)]
		public object RecordIdx;

		#endregion

		#region Methods
		/// <summary>
		/// Gets the underlying table name.
		/// </summary>
		public virtual string GetTableName()
		{
			return "DeleteQueueItem";
		}

		/// <summary>
		/// Gets a list of all object fields with alias/code facade applied excluding inheritance.
		/// </summary>
		public virtual List<string> GetFields()
		{
			var retval = new List<string>();
			retval.Add("ParentRowId");
			retval.Add("RecordIdx");
			return retval;
		}

		/// <summary>
		/// Returns the type of the parent object if one exists.
		/// </summary>
		public virtual System.Type InheritsFrom()
		{
			return null;
		}

		/// <summary>
		/// Returns the database schema name.
		/// </summary>
		public virtual string Schema()
		{
			return "dbo";
		}

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		public virtual string GetDatabaseFieldName(string field)
		{
			switch (field)
			{
				case "ParentRowId": return "ParentRowId";
				case "RecordIdx": return "RecordIdx";
			}
			return string.Empty;
		}

		#endregion

	}

}

#endregion

#pragma warning restore 612

