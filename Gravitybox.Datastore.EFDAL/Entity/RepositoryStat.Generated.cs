//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 612
using System;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.ComponentModel;
using System.Collections.Generic;
using System.Text;
using Gravitybox.Datastore.EFDAL;
using Gravitybox.Datastore.EFDAL.EventArguments;
using System.Text.RegularExpressions;
using System.Linq.Expressions;
using System.Data.Entity;
using System.Data.Linq;
using System.Data.Entity.ModelConfiguration;
using System.ComponentModel.DataAnnotations;

namespace Gravitybox.Datastore.EFDAL.Entity
{
	/// <summary>
	/// The 'RepositoryStat' entity
	/// </summary>
	[DataContract]
	[Serializable]
	[System.CodeDom.Compiler.GeneratedCode("nHydrateModelGenerator", "6.0.0")]
	[FieldNameConstants(typeof(Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants))]
	[System.ComponentModel.DataAnnotations.MetadataType(typeof(Gravitybox.Datastore.EFDAL.Entity.Metadata.RepositoryStatMetadata))]
	[EntityMetadata("RepositoryStat", false, true, false, false, "", true, false, false, "dbo")]
	public partial class RepositoryStat : BaseEntity, Gravitybox.Datastore.EFDAL.IBusinessObject, System.ICloneable, Gravitybox.Datastore.EFDAL.IAuditable, Gravitybox.Datastore.EFDAL.IAuditableSet, Gravitybox.Datastore.EFDAL.ICreatable
	{
		#region FieldNameConstants Enumeration

		/// <summary>
		/// Enumeration to define each property that maps to a database field for the 'RepositoryStat' table.
		/// </summary>
		public enum FieldNameConstants
		{
			/// <summary>
			/// Field mapping for the 'Count' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'Count' property")]
			Count,
			/// <summary>
			/// Field mapping for the 'Elapsed' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'Elapsed' property")]
			Elapsed,
			/// <summary>
			/// Field mapping for the 'ItemCount' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'ItemCount' property")]
			ItemCount,
			/// <summary>
			/// Field mapping for the 'LockTime' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'LockTime' property")]
			LockTime,
			/// <summary>
			/// Field mapping for the 'ReadLockCount' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'ReadLockCount' property")]
			ReadLockCount,
			/// <summary>
			/// Field mapping for the 'RepositoryActionTypeId' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'RepositoryActionTypeId' property")]
			RepositoryActionTypeId,
			/// <summary>
			/// Field mapping for the 'RepositoryId' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'RepositoryId' property")]
			RepositoryId,
			/// <summary>
			/// Field mapping for the 'RepositoryStatId' property
			/// </summary>
			[System.ComponentModel.DataAnnotations.Key]
			[System.ComponentModel.ReadOnly(true)]
			[System.ComponentModel.Description("Field mapping for the 'RepositoryStatId' property")]
			RepositoryStatId,
			/// <summary>
			/// Field mapping for the 'WaitingLocks' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'WaitingLocks' property")]
			WaitingLocks,
			/// <summary>
			/// Field mapping for the 'CreatedBy' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'CreatedBy' property")]
			CreatedBy,
			/// <summary>
			/// Field mapping for the 'CreatedDate' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'CreatedDate' property")]
			CreatedDate,
		}
		#endregion

		#region Constructors

		/// <summary>
		/// Initializes a new instance of the Gravitybox.Datastore.EFDAL.Entity.RepositoryStat class
		/// </summary>
		public RepositoryStat()
		{
			this._lockTime = 0;
			this._readLockCount = 0;
			this._waitingLocks = 0;

		}

		#endregion

		#region Properties

		/// <summary>
		/// The property that maps back to the database 'RepositoryStat.Count' field.
		/// </summary>
		/// <remarks>Field: [RepositoryStat].[Count], Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("Count")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int Count
		{
			get { return _count; }
			set
			{
				_count = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'RepositoryStat.Elapsed' field.
		/// </summary>
		/// <remarks>Field: [RepositoryStat].[Elapsed], Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("Elapsed")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int Elapsed
		{
			get { return _elapsed; }
			set
			{
				_elapsed = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'RepositoryStat.ItemCount' field.
		/// </summary>
		/// <remarks>Field: [RepositoryStat].[ItemCount], Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("ItemCount")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int ItemCount
		{
			get { return _itemCount; }
			set
			{
				_itemCount = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'RepositoryStat.LockTime' field.
		/// </summary>
		/// <remarks>Field: [RepositoryStat].[LockTime], Not Nullable, Default Value: 0</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("LockTime")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int LockTime
		{
			get { return _lockTime; }
			set
			{
				_lockTime = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'RepositoryStat.ReadLockCount' field.
		/// </summary>
		/// <remarks>Field: [RepositoryStat].[ReadLockCount], Not Nullable, Default Value: 0</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("ReadLockCount")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int ReadLockCount
		{
			get { return _readLockCount; }
			set
			{
				_readLockCount = value;
			}
		}

		/// <summary>
		/// This property is a wrapper for the typed enumeration for the 'RepositoryActionTypeId' field.
		/// </summary>
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual Gravitybox.Datastore.EFDAL.RepositoryActionTypeConstants RepositoryActionTypeValue
		{
			get { return (Gravitybox.Datastore.EFDAL.RepositoryActionTypeConstants)this.RepositoryActionTypeId; }
			set { this.RepositoryActionTypeId = (int)value; }
		}

		/// <summary>
		/// The property that maps back to the database 'RepositoryStat.RepositoryActionTypeId' field.
		/// This property has an additional enumeration wrapper property RepositoryActionTypeValue. Use it as a strongly-typed property.
		/// </summary>
		/// <remarks>Field: [RepositoryStat].[RepositoryActionTypeId], Not Nullable, Indexed</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("RepositoryActionTypeId")]
		[System.ComponentModel.DataAnnotations.Schema.Index()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int RepositoryActionTypeId
		{
			get { return _repositoryActionTypeId; }
			set
			{
				//Error check the wrapped enumeration
				switch(value)
				{
					case 1:
					case 2:
					case 3:
					case 4:
					case 5:
					case 6:
					case 7:
					case 8:
					case 9:
					case 10:
					case 11:
						break;
					default: throw new Exception(string.Format(GlobalValues.ERROR_INVALID_ENUM, value.ToString(), "RepositoryStat.RepositoryActionTypeId"));
				}

				_repositoryActionTypeId = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'RepositoryStat.RepositoryId' field.
		/// </summary>
		/// <remarks>Field: [RepositoryStat].[RepositoryId], Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("RepositoryId")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int RepositoryId
		{
			get { return _repositoryId; }
			set
			{
				_repositoryId = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'RepositoryStat.RepositoryStatId' field.
		/// </summary>
		/// <remarks>Field: [RepositoryStat].[RepositoryStatId], Not Nullable, Primary Key, AutoNumber, Unique, Indexed</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("RepositoryStatId")]
		[System.ComponentModel.DataAnnotations.Schema.Index(IsUnique = true)]
		[System.ComponentModel.DataAnnotations.Key()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual long RepositoryStatId
		{
			get { return _repositoryStatId; }
			protected internal set
			{
				_repositoryStatId = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'RepositoryStat.WaitingLocks' field.
		/// </summary>
		/// <remarks>Field: [RepositoryStat].[WaitingLocks], Not Nullable, Default Value: 0</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("WaitingLocks")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int WaitingLocks
		{
			get { return _waitingLocks; }
			set
			{
				_waitingLocks = value;
			}
		}

		/// <summary>
		/// The audit field for the 'Created By' parameter.
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[DataMember()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual string CreatedBy
		{
			get { return _createdby; }
			protected internal set
			{
				_createdby = value;
			}
		}

		/// <summary />
		protected string _createdby;

		/// <summary>
		/// The audit field for the 'Created Date' parameter.
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[DataMember()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual DateTime? CreatedDate
		{
			get { return _createddate; }
			protected internal set
			{
				_createddate = value;
			}
		}

		/// <summary />
		protected DateTime? _createddate;

		#endregion

		#region Property Holders

		/// <summary />
		protected int _count;
		/// <summary />
		protected int _elapsed;
		/// <summary />
		protected int _itemCount;
		/// <summary />
		protected int _lockTime;
		/// <summary />
		protected int _readLockCount;
		/// <summary />
		protected int _repositoryActionTypeId;
		/// <summary />
		protected int _repositoryId;
		/// <summary />
		protected long _repositoryStatId;
		/// <summary />
		protected int _waitingLocks;

		#endregion

		#region GetMaxLength

		/// <summary>
		/// Gets the maximum size of the field value.
		/// </summary>
		public static int GetMaxLength(Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants field)
		{
			switch (field)
			{
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.Count:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.Elapsed:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.ItemCount:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.LockTime:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.ReadLockCount:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.RepositoryActionTypeId:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.RepositoryId:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.RepositoryStatId:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.WaitingLocks:
					return 0;
			}
			return 0;
		}

		int Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetMaxLength(Enum field)
		{
			return GetMaxLength((Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants)field);
		}

		#endregion

		#region GetFieldNameConstants

		System.Type Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetFieldNameConstants()
		{
			return typeof(Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants);
		}

		#endregion

		#region GetFieldType

		/// <summary>
		/// Gets the system type of a field on this object
		/// </summary>
		public static System.Type GetFieldType(Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants field)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants'.");

			switch ((Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants)field)
			{
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.Count: return typeof(int);
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.Elapsed: return typeof(int);
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.ItemCount: return typeof(int);
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.LockTime: return typeof(int);
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.ReadLockCount: return typeof(int);
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.RepositoryActionTypeId: return typeof(int);
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.RepositoryId: return typeof(int);
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.RepositoryStatId: return typeof(long);
				case Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.WaitingLocks: return typeof(int);
			}
			return null;
		}

		System.Type Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetFieldType(Enum field)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants'.");

			return GetFieldType((Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants)field);
		}

		#endregion

		#region Get/Set Value

		object Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetValue(System.Enum field)
		{
			return ((Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject)this).GetValue(field, null);
		}

		object Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetValue(System.Enum field, object defaultValue)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants'.");
			return this.GetValue((Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants)field, defaultValue);
		}

		void Gravitybox.Datastore.EFDAL.IBusinessObject.SetValue(System.Enum field, object newValue)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants'.");
			this.SetValue((Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants)field, newValue);
		}

		void Gravitybox.Datastore.EFDAL.IBusinessObject.SetValue(System.Enum field, object newValue, bool fixLength)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants'.");
			this.SetValue((Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants)field, newValue, fixLength);
		}

		#endregion

		#region PrimaryKey

		/// <summary>
		/// Generic primary key for this object
		/// </summary>
		Gravitybox.Datastore.EFDAL.IPrimaryKey Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.PrimaryKey
		{
			get { return new PrimaryKey(Util.HashPK("RepositoryStat", this.RepositoryStatId)); }
		}

		#endregion

		#region Clone

		/// <summary>
		/// Creates a shallow copy of this object
		/// </summary>
		public virtual object Clone()
		{
			return Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.Clone(this);
		}

		/// <summary>
		/// Creates a shallow copy of this object with defined, default values and new PK
		/// </summary>
		public virtual object CloneAsNew()
		{
			var item = Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.Clone(this);
			item._repositoryStatId = 0;
			item._lockTime = 0;
			item._readLockCount = 0;
			item._waitingLocks = 0;
			return item;
		}

		/// <summary>
		/// Creates a shallow copy of this object
		/// </summary>
		public static RepositoryStat Clone(Gravitybox.Datastore.EFDAL.Entity.RepositoryStat item)
		{
			var newItem = new RepositoryStat();
			newItem.Count = item.Count;
			newItem.Elapsed = item.Elapsed;
			newItem.ItemCount = item.ItemCount;
			newItem.LockTime = item.LockTime;
			newItem.ReadLockCount = item.ReadLockCount;
			newItem.RepositoryActionTypeId = item.RepositoryActionTypeId;
			newItem.RepositoryId = item.RepositoryId;
			newItem.RepositoryStatId = item.RepositoryStatId;
			newItem.WaitingLocks = item.WaitingLocks;
			newItem.CreatedDate = item.CreatedDate;
			newItem.CreatedBy = item.CreatedBy;
			return newItem;
		}

		#endregion

		#region GetValue

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		public virtual object GetValue(Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants field)
		{
			return GetValue(field, null);
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		public virtual object GetValue(Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants field, object defaultValue)
		{
			if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.Count)
				return this.Count;
			if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.Elapsed)
				return this.Elapsed;
			if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.ItemCount)
				return this.ItemCount;
			if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.LockTime)
				return this.LockTime;
			if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.ReadLockCount)
				return this.ReadLockCount;
			if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.RepositoryActionTypeId)
				return this.RepositoryActionTypeId;
			if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.RepositoryId)
				return this.RepositoryId;
			if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.RepositoryStatId)
				return this.RepositoryStatId;
			if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.WaitingLocks)
				return this.WaitingLocks;
			if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.CreatedBy)
				return ((this.CreatedBy == null) ? defaultValue : this.CreatedBy);
			if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.CreatedDate)
				return ((this.CreatedDate == null) ? defaultValue : this.CreatedDate);
			throw new Exception("Field '" + field.ToString() + "' not found!");
		}

		#endregion

		#region SetValue

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="field">The field to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		public virtual void SetValue(Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants field, object newValue)
		{
			SetValue(field, newValue, false);
		}

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="field">The field to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		/// <param name="fixLength">Determines if the length should be truncated if too long. When false, an error will be raised if data is too large to be assigned to the field.</param>
		public virtual void SetValue(Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants field, object newValue, bool fixLength)
		{
			if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.Count)
			{
				this.Count = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'Count' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.Elapsed)
			{
				this.Elapsed = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'Elapsed' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.ItemCount)
			{
				this.ItemCount = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'ItemCount' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.LockTime)
			{
				this.LockTime = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'LockTime' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.ReadLockCount)
			{
				this.ReadLockCount = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'ReadLockCount' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.RepositoryActionTypeId)
			{
				this.RepositoryActionTypeId = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'RepositoryActionTypeId' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.RepositoryId)
			{
				this.RepositoryId = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'RepositoryId' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.RepositoryStatId)
			{
				throw new Exception("Field '" + field.ToString() + "' is a primary key and cannot be set!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants.WaitingLocks)
			{
				this.WaitingLocks = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'WaitingLocks' does not allow null values!");
			}
			else
				throw new Exception("Field '" + field.ToString() + "' not found!");
		}

		#endregion

		#region Navigation Properties

		/// <summary>
		/// The navigation definition for walking RepositoryActionType->RepositoryStat
		/// </summary>
		[DataMember]
		[XmlIgnore]
		public virtual RepositoryActionType RepositoryActionType { get; set; }

		#endregion

		#region Static SQL Methods

		internal static string GetFieldAliasFromFieldNameSqlMapping(string alias)
		{
			alias = alias.Replace("[", string.Empty).Replace("]", string.Empty);
			switch (alias.ToLower())
			{
				case "count": return "count";
				case "elapsed": return "elapsed";
				case "itemcount": return "itemcount";
				case "locktime": return "locktime";
				case "readlockcount": return "readlockcount";
				case "repositoryactiontypeid": return "repositoryactiontypeid";
				case "repositoryid": return "repositoryid";
				case "repositorystatid": return "repositorystatid";
				case "waitinglocks": return "waitinglocks";
				case "createddate": return "createddate";
				case "createdby": return "createdby";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetTableFromFieldAliasSqlMapping(string alias)
		{
			switch (alias.ToLower())
			{
				case "count": return "RepositoryStat";
				case "elapsed": return "RepositoryStat";
				case "itemcount": return "RepositoryStat";
				case "locktime": return "RepositoryStat";
				case "readlockcount": return "RepositoryStat";
				case "repositoryactiontypeid": return "RepositoryStat";
				case "repositoryid": return "RepositoryStat";
				case "repositorystatid": return "RepositoryStat";
				case "waitinglocks": return "RepositoryStat";
				case "createdby": return "RepositoryStat";
				case "createddate": return "RepositoryStat";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetTableFromFieldNameSqlMapping(string field)
		{
			switch (field.ToLower())
			{
				case "count": return "RepositoryStat";
				case "elapsed": return "RepositoryStat";
				case "itemcount": return "RepositoryStat";
				case "locktime": return "RepositoryStat";
				case "readlockcount": return "RepositoryStat";
				case "repositoryactiontypeid": return "RepositoryStat";
				case "repositoryid": return "RepositoryStat";
				case "repositorystatid": return "RepositoryStat";
				case "waitinglocks": return "RepositoryStat";
				case "createdby": return "RepositoryStat";
				case "createddate": return "RepositoryStat";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetRemappedLinqSql(string sql, string parentAlias, LinqSQLFromClauseCollection childTables)
		{
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[count\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "RepositoryStat") + "].[count]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[elapsed\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "RepositoryStat") + "].[elapsed]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[itemcount\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "RepositoryStat") + "].[itemcount]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[locktime\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "RepositoryStat") + "].[locktime]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[readlockcount\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "RepositoryStat") + "].[readlockcount]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[repositoryactiontypeid\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "RepositoryStat") + "].[repositoryactiontypeid]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[repositoryid\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "RepositoryStat") + "].[repositoryid]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[repositorystatid\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "RepositoryStat") + "].[repositorystatid]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[waitinglocks\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "RepositoryStat") + "].[waitinglocks]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[createdby\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "RepositoryStat") + "].[createdby]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[createddate\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "RepositoryStat") + "].[createddate]", RegexOptions.IgnoreCase);
			return sql;
		}

		#endregion

		#region DeleteData

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryStatQuery, bool>> where)
		{
			return DeleteData(where: where, optimizer: new QueryOptimizer(), startup: new ContextStartup(null), connectionString: Gravitybox.Datastore.EFDAL.DatastoreEntities.GetConnectionString());
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="optimizer">The optimization object to use for running queries</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryStatQuery, bool>> where, QueryOptimizer optimizer)
		{
			return DeleteData(where: where, optimizer: optimizer, startup: new ContextStartup(null), connectionString: Gravitybox.Datastore.EFDAL.DatastoreEntities.GetConnectionString());
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="connectionString">The database connection string to use for this access</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryStatQuery, bool>> where, string connectionString)
		{
			return DeleteData(where: where, optimizer: new QueryOptimizer(), startup: new ContextStartup(null), connectionString: connectionString);
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="optimizer">The optimization object to use for running queries</param>
		/// <param name="startup">The startup options</param>
		/// <param name="connectionString">The database connection string to use for this access</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryStatQuery, bool>> where, QueryOptimizer optimizer, ContextStartup startup, string connectionString)
		{
			if (optimizer == null)
				optimizer = new QueryOptimizer();
				if (startup == null) startup = new ContextStartup(null);

			using (var connection = Gravitybox.Datastore.EFDAL.DBHelper.GetConnection(Gravitybox.Datastore.EFDAL.Util.StripEFCS2Normal(connectionString)))
			{
				using (var dc = new DataContext(connection))
				{
					var template = dc.GetTable<Gravitybox.Datastore.EFDAL.RepositoryStatQuery>();
					using (var cmd = BusinessEntityQuery.GetCommand<Gravitybox.Datastore.EFDAL.RepositoryStatQuery>(dc, template, where))
					{
						if (!startup.DefaultTimeout && startup.CommandTimeout > 0) cmd.CommandTimeout = startup.CommandTimeout;
						else
						{
							var cb = new System.Data.SqlClient.SqlConnectionStringBuilder(connectionString);
							cmd.CommandTimeout = cb.ConnectTimeout;
						}

						var parser = LinqSQLParser.Create(cmd.CommandText, LinqSQLParser.ObjectTypeConstants.Table);
                        var sb = new StringBuilder();
                        sb.AppendLine("SET ROWCOUNT " + optimizer.ChunkSize + ";");
                        sb.AppendLine("delete [X] from [dbo].[RepositoryStat] [X] inner join (");
                        sb.AppendLine("SELECT [t0].[RepositoryStatId]");
                        sb.AppendLine(parser.GetFromClause(optimizer));
                        sb.AppendLine(parser.GetWhereClause());
                        sb.AppendLine(") AS [Extent2]");
                        sb.AppendLine("ON [X].[RepositoryStatId] = [Extent2].[RepositoryStatId]");
                        sb.AppendLine("select @@ROWCOUNT");
						cmd.CommandText = sb.ToString();
						dc.Connection.Open();
						var startTime = DateTime.Now;
						var affected = 0;
						var count = 0;
						do
						{
							count = (int)cmd.ExecuteScalar();
							affected += count;
						} while (count > 0 && optimizer.ChunkSize > 0);
						var endTime = DateTime.Now;
						optimizer.TotalMilliseconds = (long)endTime.Subtract(startTime).TotalMilliseconds;
						dc.Connection.Close();
						return affected;
					}
				}
			}
		}

		#endregion

		#region UpdateData

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryStatQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryStatQuery, bool>> where, TSource newValue)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.RepositoryStat, Gravitybox.Datastore.EFDAL.RepositoryStatQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "RepositoryStat", getField: GetDatabaseFieldName, hasModifyAudit: false);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryStatQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryStatQuery, bool>> where, TSource newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.RepositoryStat, Gravitybox.Datastore.EFDAL.RepositoryStatQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "RepositoryStat", getField: GetDatabaseFieldName, hasModifyAudit: false, startup: null, connection: connection, transaction: transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="startup">A configuration object</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryStatQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryStatQuery, bool>> where, TSource newValue, ContextStartup startup, string connectionString)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.RepositoryStat, Gravitybox.Datastore.EFDAL.RepositoryStatQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "RepositoryStat", getField: GetDatabaseFieldName, hasModifyAudit: false, startup: startup, connectionString: connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryStatQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryStatQuery, bool>> where, TSource newValue, string connectionString)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.RepositoryStat, Gravitybox.Datastore.EFDAL.RepositoryStatQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "RepositoryStat", getField: GetDatabaseFieldName, hasModifyAudit: false, connectionString: connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryStatQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryStatQuery, bool>> where, Gravitybox.Datastore.EFDAL.Entity.RepositoryStat newValue)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.RepositoryStat, Gravitybox.Datastore.EFDAL.RepositoryStatQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "RepositoryStat", getField: GetDatabaseFieldName, hasModifyAudit: false);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryStatQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.RepositoryStatQuery, bool>> where, Gravitybox.Datastore.EFDAL.Entity.RepositoryStat newValue, string connectionString)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.RepositoryStat, Gravitybox.Datastore.EFDAL.RepositoryStatQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "RepositoryStat", getField: GetDatabaseFieldName, hasModifyAudit: false, connectionString: connectionString);
		}

		#endregion

		#region GetDatabaseFieldName

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		internal static string GetDatabaseFieldName(Gravitybox.Datastore.EFDAL.Entity.RepositoryStat.FieldNameConstants field)
		{
			return GetDatabaseFieldName(field.ToString());
		}

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		internal static string GetDatabaseFieldName(string field)
		{
			switch (field)
			{
				case "Count": return "Count";
				case "Elapsed": return "Elapsed";
				case "ItemCount": return "ItemCount";
				case "LockTime": return "LockTime";
				case "ReadLockCount": return "ReadLockCount";
				case "RepositoryActionTypeId": return "RepositoryActionTypeId";
				case "RepositoryId": return "RepositoryId";
				case "RepositoryStatId": return "RepositoryStatId";
				case "WaitingLocks": return "WaitingLocks";
				case "CreatedBy": return "CreatedBy";
				case "CreatedDate": return "CreatedDate";
			}
			return string.Empty;
		}

		#endregion

		#region Auditing
		string Gravitybox.Datastore.EFDAL.IAuditableSet.CreatedBy
		{
			get { return this.CreatedBy; }
			set { this.CreatedBy = value; }
		}

		string Gravitybox.Datastore.EFDAL.IAuditableSet.ModifiedBy
		{
			get { return null; }
			set { ; }
		}
		string Gravitybox.Datastore.EFDAL.IAuditable.CreatedBy
		{
			get { return this.CreatedBy; }
		}

		System.DateTime? Gravitybox.Datastore.EFDAL.IAuditable.CreatedDate
		{
			get { return this.CreatedDate; }
		}

		bool Gravitybox.Datastore.EFDAL.IAuditable.IsCreateAuditImplemented
		{
			get { return true; }
		}

		bool Gravitybox.Datastore.EFDAL.IAuditable.IsModifyAuditImplemented
		{
			get { return false; }
		}

		bool Gravitybox.Datastore.EFDAL.IAuditable.IsTimestampAuditImplemented
		{
			get { return false; }
		}

		string Gravitybox.Datastore.EFDAL.IAuditable.ModifiedBy
		{
			get { return null; }
		}

		System.DateTime? Gravitybox.Datastore.EFDAL.IAuditable.ModifiedDate
		{
			get { return null; }
		}

		byte[] Gravitybox.Datastore.EFDAL.IAuditable.TimeStamp
		{
			get { return new byte[0]; }
		}

		void IAuditableSet.ResetModifiedBy(string modifier)
		{
		}

		void IAuditableSet.ResetCreatedBy(string modifier)
		{
			if (this.CreatedBy != modifier)
				this.CreatedBy = modifier;
			((IAuditableSet)this).ResetModifiedBy(modifier);
		}

		System.DateTime? Gravitybox.Datastore.EFDAL.IAuditableSet.CreatedDate
		{
			get { return this.CreatedDate; }
			set { this.CreatedDate = value; }
		}

		System.DateTime? Gravitybox.Datastore.EFDAL.IAuditableSet.ModifiedDate
		{
			get { return null; }
			set { ; }
		}

		#endregion

		#region Equals
		/// <summary>
		/// Compares two objects of 'RepositoryStat' type and determines if all properties match
		/// </summary>
		/// <returns>True if all properties match, false otherwise</returns>
		public override bool Equals(object obj)
		{
			var other = obj as Gravitybox.Datastore.EFDAL.Entity.RepositoryStat;
			if (other == null) return false;
			return (
				other.Count == this.Count &&
				other.Elapsed == this.Elapsed &&
				other.ItemCount == this.ItemCount &&
				other.LockTime == this.LockTime &&
				other.ReadLockCount == this.ReadLockCount &&
				other.RepositoryActionTypeId == this.RepositoryActionTypeId &&
				other.RepositoryId == this.RepositoryId &&
				other.RepositoryStatId == this.RepositoryStatId &&
				other.WaitingLocks == this.WaitingLocks
				);
		}

		/// <summary>
		/// Serves as a hash function for this type.
		/// </summary>
		public override int GetHashCode()
		{
			return base.GetHashCode();
		}

		#endregion

	}
}

#region Metadata Class

namespace Gravitybox.Datastore.EFDAL.Entity.Metadata
{
	/// <summary>
	/// Metadata class for the 'RepositoryStat' entity
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("nHydrateModelGenerator", "6.0.0")]
	public partial class RepositoryStatMetadata : Gravitybox.Datastore.EFDAL.IMetadata
	{
		#region Properties

		/// <summary>
		/// Metadata information for the 'Count' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'Count' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "Count", AutoGenerateField = true)]
		public object Count;

		/// <summary>
		/// Metadata information for the 'Elapsed' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'Elapsed' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "Elapsed", AutoGenerateField = true)]
		public object Elapsed;

		/// <summary>
		/// Metadata information for the 'ItemCount' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'ItemCount' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "ItemCount", AutoGenerateField = true)]
		public object ItemCount;

		/// <summary>
		/// Metadata information for the 'LockTime' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'LockTime' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "LockTime", AutoGenerateField = true)]
		public object LockTime;

		/// <summary>
		/// Metadata information for the 'ReadLockCount' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'ReadLockCount' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "ReadLockCount", AutoGenerateField = true)]
		public object ReadLockCount;

		/// <summary>
		/// Metadata information for the 'RepositoryActionTypeId' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'RepositoryActionTypeId' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "RepositoryActionTypeId", AutoGenerateField = true)]
		public object RepositoryActionTypeId;

		/// <summary>
		/// Metadata information for the 'RepositoryId' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'RepositoryId' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "RepositoryId", AutoGenerateField = true)]
		public object RepositoryId;

		/// <summary>
		/// Metadata information for the 'RepositoryStatId' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'RepositoryStatId' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Key()]
		[System.ComponentModel.ReadOnly(true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "RepositoryStatId", AutoGenerateField = true)]
		public object RepositoryStatId;

		/// <summary>
		/// Metadata information for the 'WaitingLocks' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'WaitingLocks' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "WaitingLocks", AutoGenerateField = true)]
		public object WaitingLocks;

		/// <summary>
		/// Metadata information for the 'CreatedBy' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.StringLength(100, ErrorMessage = "The property 'CreatedBy' has a maximum length of 100")]
		[System.ComponentModel.ReadOnly(true)]
		public object CreatedBy;

		/// <summary>
		/// Metadata information for the 'CreatedDate' parameter
		/// </summary>
		[System.ComponentModel.ReadOnly(true)]
		public object CreatedDate;

		#endregion

		#region Methods
		/// <summary>
		/// Gets the underlying table name.
		/// </summary>
		public virtual string GetTableName()
		{
			return "RepositoryStat";
		}

		/// <summary>
		/// Gets a list of all object fields with alias/code facade applied excluding inheritance.
		/// </summary>
		public virtual List<string> GetFields()
		{
			var retval = new List<string>();
			retval.Add("Count");
			retval.Add("Elapsed");
			retval.Add("ItemCount");
			retval.Add("LockTime");
			retval.Add("ReadLockCount");
			retval.Add("RepositoryActionTypeId");
			retval.Add("RepositoryId");
			retval.Add("RepositoryStatId");
			retval.Add("WaitingLocks");
			return retval;
		}

		/// <summary>
		/// Returns the type of the parent object if one exists.
		/// </summary>
		public virtual System.Type InheritsFrom()
		{
			return null;
		}

		/// <summary>
		/// Returns the database schema name.
		/// </summary>
		public virtual string Schema()
		{
			return "dbo";
		}

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		public virtual string GetDatabaseFieldName(string field)
		{
			switch (field)
			{
				case "Count": return "Count";
				case "Elapsed": return "Elapsed";
				case "ItemCount": return "ItemCount";
				case "LockTime": return "LockTime";
				case "ReadLockCount": return "ReadLockCount";
				case "RepositoryActionTypeId": return "RepositoryActionTypeId";
				case "RepositoryId": return "RepositoryId";
				case "RepositoryStatId": return "RepositoryStatId";
				case "WaitingLocks": return "WaitingLocks";
				case "CreatedBy": return "CreatedBy";
				case "CreatedDate": return "CreatedDate";
			}
			return string.Empty;
		}

		#endregion

	}

}

#endregion

#pragma warning restore 612

