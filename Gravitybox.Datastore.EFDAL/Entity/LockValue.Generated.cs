//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 612
using System;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.ComponentModel;
using System.Collections.Generic;
using System.Text;
using Gravitybox.Datastore.EFDAL;
using Gravitybox.Datastore.EFDAL.EventArguments;
using System.Text.RegularExpressions;
using System.Linq.Expressions;
using System.Data.Entity;
using System.Data.Linq;
using System.Data.Entity.ModelConfiguration;
using System.ComponentModel.DataAnnotations;

namespace Gravitybox.Datastore.EFDAL.Entity
{
	/// <summary>
	/// The 'LockValue' entity
	/// </summary>
	[DataContract]
	[Serializable]
	[System.CodeDom.Compiler.GeneratedCode("nHydrateModelGenerator", "6.0.0")]
	[FieldNameConstants(typeof(Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants))]
	[System.ComponentModel.DataAnnotations.MetadataType(typeof(Gravitybox.Datastore.EFDAL.Entity.Metadata.LockValueMetadata))]
	[EntityMetadata("LockValue", false, false, false, false, "", true, false, false, "dbo")]
	public partial class LockValue : BaseEntity, Gravitybox.Datastore.EFDAL.IBusinessObject, System.ICloneable, Gravitybox.Datastore.EFDAL.ICreatable
	{
		#region FieldNameConstants Enumeration

		/// <summary>
		/// Enumeration to define each property that maps to a database field for the 'LockValue' table.
		/// </summary>
		public enum FieldNameConstants
		{
			/// <summary>
			/// Field mapping for the 'Intention' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'Intention' property")]
			Intention,
			/// <summary>
			/// Field mapping for the 'IsRead' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'IsRead' property")]
			IsRead,
			/// <summary>
			/// Field mapping for the 'LockId' property
			/// </summary>
			[System.ComponentModel.DataAnnotations.Key]
			[System.ComponentModel.ReadOnly(true)]
			[System.ComponentModel.Description("Field mapping for the 'LockId' property")]
			LockId,
			/// <summary>
			/// Field mapping for the 'LockTime' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'LockTime' property")]
			LockTime,
			/// <summary>
			/// Field mapping for the 'MachineId' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'MachineId' property")]
			MachineId,
			/// <summary>
			/// Field mapping for the 'RepositoryId' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'RepositoryId' property")]
			RepositoryId,
		}
		#endregion

		#region Constructors

		/// <summary>
		/// Initializes a new instance of the Gravitybox.Datastore.EFDAL.Entity.LockValue class
		/// </summary>
		public LockValue()
		{

		}

		#endregion

		#region Properties

		/// <summary>
		/// The property that maps back to the database 'Lock.Intention' field.
		/// </summary>
		/// <remarks>Field: [Lock].[Intention], Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("Intention")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual bool Intention
		{
			get { return _intention; }
			set
			{
				_intention = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'Lock.IsRead' field.
		/// </summary>
		/// <remarks>Field: [Lock].[IsRead], Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("IsRead")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual bool IsRead
		{
			get { return _isRead; }
			set
			{
				_isRead = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'Lock.LockId' field.
		/// </summary>
		/// <remarks>Field: [Lock].[LockId], Not Nullable, Primary Key, AutoNumber, Unique, Indexed</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("LockId")]
		[System.ComponentModel.DataAnnotations.Schema.Index(IsUnique = true)]
		[System.ComponentModel.DataAnnotations.Key()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int LockId
		{
			get { return _lockId; }
			protected internal set
			{
				_lockId = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'Lock.LockTime' field.
		/// </summary>
		/// <remarks>Field: [Lock].[LockTime], Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("LockTime")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual DateTime LockTime
		{
			get { return _lockTime; }
			set
			{
				if ((value < GlobalValues.MIN_DATETIME)) throw new Exception("The DateTime value 'LockTime' (" + value.ToString("yyyy-MM-dd HH:mm:ss") + ") cannot be less than " + GlobalValues.MIN_DATETIME.ToString());
				if ((value > GlobalValues.MAX_DATETIME)) throw new Exception("The DateTime value 'LockTime' (" + value.ToString("yyyy-MM-dd HH:mm:ss") + ") cannot be greater than " + GlobalValues.MAX_DATETIME.ToString());
				_lockTime = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'Lock.MachineId' field.
		/// </summary>
		/// <remarks>Field: [Lock].[MachineId], Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("MachineId")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int MachineId
		{
			get { return _machineId; }
			set
			{
				_machineId = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'Lock.RepositoryId' field.
		/// </summary>
		/// <remarks>Field: [Lock].[RepositoryId], Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("RepositoryId")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int RepositoryId
		{
			get { return _repositoryId; }
			set
			{
				_repositoryId = value;
			}
		}

		#endregion

		#region Property Holders

		/// <summary />
		protected bool _intention;
		/// <summary />
		protected bool _isRead;
		/// <summary />
		protected int _lockId;
		/// <summary />
		protected DateTime _lockTime;
		/// <summary />
		protected int _machineId;
		/// <summary />
		protected int _repositoryId;

		#endregion

		#region GetMaxLength

		/// <summary>
		/// Gets the maximum size of the field value.
		/// </summary>
		public static int GetMaxLength(Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants field)
		{
			switch (field)
			{
				case Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants.Intention:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants.IsRead:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants.LockId:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants.LockTime:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants.MachineId:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants.RepositoryId:
					return 0;
			}
			return 0;
		}

		int Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetMaxLength(Enum field)
		{
			return GetMaxLength((Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants)field);
		}

		#endregion

		#region GetFieldNameConstants

		System.Type Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetFieldNameConstants()
		{
			return typeof(Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants);
		}

		#endregion

		#region GetFieldType

		/// <summary>
		/// Gets the system type of a field on this object
		/// </summary>
		public static System.Type GetFieldType(Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants field)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants'.");

			switch ((Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants)field)
			{
				case Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants.Intention: return typeof(bool);
				case Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants.IsRead: return typeof(bool);
				case Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants.LockId: return typeof(int);
				case Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants.LockTime: return typeof(DateTime);
				case Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants.MachineId: return typeof(int);
				case Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants.RepositoryId: return typeof(int);
			}
			return null;
		}

		System.Type Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetFieldType(Enum field)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants'.");

			return GetFieldType((Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants)field);
		}

		#endregion

		#region Get/Set Value

		object Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetValue(System.Enum field)
		{
			return ((Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject)this).GetValue(field, null);
		}

		object Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetValue(System.Enum field, object defaultValue)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants'.");
			return this.GetValue((Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants)field, defaultValue);
		}

		void Gravitybox.Datastore.EFDAL.IBusinessObject.SetValue(System.Enum field, object newValue)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants'.");
			this.SetValue((Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants)field, newValue);
		}

		void Gravitybox.Datastore.EFDAL.IBusinessObject.SetValue(System.Enum field, object newValue, bool fixLength)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants'.");
			this.SetValue((Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants)field, newValue, fixLength);
		}

		#endregion

		#region PrimaryKey

		/// <summary>
		/// Generic primary key for this object
		/// </summary>
		Gravitybox.Datastore.EFDAL.IPrimaryKey Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.PrimaryKey
		{
			get { return new PrimaryKey(Util.HashPK("LockValue", this.LockId)); }
		}

		#endregion

		#region Clone

		/// <summary>
		/// Creates a shallow copy of this object
		/// </summary>
		public virtual object Clone()
		{
			return Gravitybox.Datastore.EFDAL.Entity.LockValue.Clone(this);
		}

		/// <summary>
		/// Creates a shallow copy of this object with defined, default values and new PK
		/// </summary>
		public virtual object CloneAsNew()
		{
			var item = Gravitybox.Datastore.EFDAL.Entity.LockValue.Clone(this);
			item._lockId = 0;
			return item;
		}

		/// <summary>
		/// Creates a shallow copy of this object
		/// </summary>
		public static LockValue Clone(Gravitybox.Datastore.EFDAL.Entity.LockValue item)
		{
			var newItem = new LockValue();
			newItem.Intention = item.Intention;
			newItem.IsRead = item.IsRead;
			newItem.LockId = item.LockId;
			newItem.LockTime = item.LockTime;
			newItem.MachineId = item.MachineId;
			newItem.RepositoryId = item.RepositoryId;
			return newItem;
		}

		#endregion

		#region GetValue

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		public virtual object GetValue(Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants field)
		{
			return GetValue(field, null);
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		public virtual object GetValue(Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants field, object defaultValue)
		{
			if (field == Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants.Intention)
				return this.Intention;
			if (field == Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants.IsRead)
				return this.IsRead;
			if (field == Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants.LockId)
				return this.LockId;
			if (field == Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants.LockTime)
				return this.LockTime;
			if (field == Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants.MachineId)
				return this.MachineId;
			if (field == Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants.RepositoryId)
				return this.RepositoryId;
			throw new Exception("Field '" + field.ToString() + "' not found!");
		}

		#endregion

		#region SetValue

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="field">The field to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		public virtual void SetValue(Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants field, object newValue)
		{
			SetValue(field, newValue, false);
		}

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="field">The field to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		/// <param name="fixLength">Determines if the length should be truncated if too long. When false, an error will be raised if data is too large to be assigned to the field.</param>
		public virtual void SetValue(Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants field, object newValue, bool fixLength)
		{
			if (field == Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants.Intention)
			{
				this.Intention = GlobalValues.SetValueHelperBoolNotNullableInternal(newValue, "Field 'Intention' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants.IsRead)
			{
				this.IsRead = GlobalValues.SetValueHelperBoolNotNullableInternal(newValue, "Field 'IsRead' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants.LockId)
			{
				throw new Exception("Field '" + field.ToString() + "' is a primary key and cannot be set!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants.LockTime)
			{
				this.LockTime = GlobalValues.SetValueHelperDateTimeNotNullableInternal(newValue, "Field 'LockTime' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants.MachineId)
			{
				this.MachineId = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'MachineId' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants.RepositoryId)
			{
				this.RepositoryId = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'RepositoryId' does not allow null values!");
			}
			else
				throw new Exception("Field '" + field.ToString() + "' not found!");
		}

		#endregion

		#region Navigation Properties

		/// <summary>
		/// The navigation definition for walking Machine->LockValue
		/// </summary>
		[DataMember]
		[XmlIgnore]
		public virtual Machine Machine { get; set; }

		#endregion

		#region Static SQL Methods

		internal static string GetFieldAliasFromFieldNameSqlMapping(string alias)
		{
			alias = alias.Replace("[", string.Empty).Replace("]", string.Empty);
			switch (alias.ToLower())
			{
				case "intention": return "intention";
				case "isread": return "isread";
				case "lockid": return "lockid";
				case "locktime": return "locktime";
				case "machineid": return "machineid";
				case "repositoryid": return "repositoryid";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetTableFromFieldAliasSqlMapping(string alias)
		{
			switch (alias.ToLower())
			{
				case "intention": return "Lock";
				case "isread": return "Lock";
				case "lockid": return "Lock";
				case "locktime": return "Lock";
				case "machineid": return "Lock";
				case "repositoryid": return "Lock";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetTableFromFieldNameSqlMapping(string field)
		{
			switch (field.ToLower())
			{
				case "intention": return "Lock";
				case "isread": return "Lock";
				case "lockid": return "Lock";
				case "locktime": return "Lock";
				case "machineid": return "Lock";
				case "repositoryid": return "Lock";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetRemappedLinqSql(string sql, string parentAlias, LinqSQLFromClauseCollection childTables)
		{
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[intention\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Lock") + "].[intention]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[isread\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Lock") + "].[isread]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[lockid\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Lock") + "].[lockid]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[locktime\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Lock") + "].[locktime]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[machineid\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Lock") + "].[machineid]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[repositoryid\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Lock") + "].[repositoryid]", RegexOptions.IgnoreCase);
			return sql;
		}

		#endregion

		#region DeleteData

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.LockValueQuery, bool>> where)
		{
			return DeleteData(where: where, optimizer: new QueryOptimizer(), startup: new ContextStartup(null), connectionString: Gravitybox.Datastore.EFDAL.DatastoreEntities.GetConnectionString());
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="optimizer">The optimization object to use for running queries</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.LockValueQuery, bool>> where, QueryOptimizer optimizer)
		{
			return DeleteData(where: where, optimizer: optimizer, startup: new ContextStartup(null), connectionString: Gravitybox.Datastore.EFDAL.DatastoreEntities.GetConnectionString());
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="connectionString">The database connection string to use for this access</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.LockValueQuery, bool>> where, string connectionString)
		{
			return DeleteData(where: where, optimizer: new QueryOptimizer(), startup: new ContextStartup(null), connectionString: connectionString);
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="optimizer">The optimization object to use for running queries</param>
		/// <param name="startup">The startup options</param>
		/// <param name="connectionString">The database connection string to use for this access</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.LockValueQuery, bool>> where, QueryOptimizer optimizer, ContextStartup startup, string connectionString)
		{
			if (optimizer == null)
				optimizer = new QueryOptimizer();
				if (startup == null) startup = new ContextStartup(null);

			using (var connection = Gravitybox.Datastore.EFDAL.DBHelper.GetConnection(Gravitybox.Datastore.EFDAL.Util.StripEFCS2Normal(connectionString)))
			{
				using (var dc = new DataContext(connection))
				{
					var template = dc.GetTable<Gravitybox.Datastore.EFDAL.LockValueQuery>();
					using (var cmd = BusinessEntityQuery.GetCommand<Gravitybox.Datastore.EFDAL.LockValueQuery>(dc, template, where))
					{
						if (!startup.DefaultTimeout && startup.CommandTimeout > 0) cmd.CommandTimeout = startup.CommandTimeout;
						else
						{
							var cb = new System.Data.SqlClient.SqlConnectionStringBuilder(connectionString);
							cmd.CommandTimeout = cb.ConnectTimeout;
						}

						var parser = LinqSQLParser.Create(cmd.CommandText, LinqSQLParser.ObjectTypeConstants.Table);
						var sql = "CREATE TABLE #t ([LockId] [Int])";
						sql += "set rowcount " + optimizer.ChunkSize + ";";
						sql += "INSERT INTO #t ([LockId])";
						sql += "SELECT [t0].[LockId] #t\r\n";
						sql += parser.GetFromClause(optimizer) + "\r\n";
						sql += parser.GetWhereClause();
						sql += "\r\n";

						var noLock = string.Empty;
						noLock = (optimizer.NoLocking ? "WITH (READUNCOMMITTED) " : string.Empty);
						sql += "DELETE [Lock] FROM [dbo].[Lock] " + noLock + "INNER JOIN #t ON [dbo].[Lock].[LockId] = #t.[LockId]\r\n";
						sql += ";select @@rowcount";
						sql = "set ansi_nulls off;" + sql + ";drop table #t;";
						cmd.CommandText = sql;
						dc.Connection.Open();
						var startTime = DateTime.Now;
						var affected = 0;
						var count = 0;
						do
						{
							count = (int)cmd.ExecuteScalar();
							affected += count;
						} while (count > 0 && optimizer.ChunkSize > 0);
						var endTime = DateTime.Now;
						optimizer.TotalMilliseconds = (long)endTime.Subtract(startTime).TotalMilliseconds;
						dc.Connection.Close();
						return affected;
					}
				}
			}
		}

		#endregion

		#region UpdateData

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.LockValueQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.LockValueQuery, bool>> where, TSource newValue)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.LockValue, Gravitybox.Datastore.EFDAL.LockValueQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "Lock", getField: GetDatabaseFieldName, hasModifyAudit: false);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.LockValueQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.LockValueQuery, bool>> where, TSource newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.LockValue, Gravitybox.Datastore.EFDAL.LockValueQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "Lock", getField: GetDatabaseFieldName, hasModifyAudit: false, startup: null, connection: connection, transaction: transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="startup">A configuration object</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.LockValueQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.LockValueQuery, bool>> where, TSource newValue, ContextStartup startup, string connectionString)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.LockValue, Gravitybox.Datastore.EFDAL.LockValueQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "Lock", getField: GetDatabaseFieldName, hasModifyAudit: false, startup: startup, connectionString: connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.LockValueQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.LockValueQuery, bool>> where, TSource newValue, string connectionString)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.LockValue, Gravitybox.Datastore.EFDAL.LockValueQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "Lock", getField: GetDatabaseFieldName, hasModifyAudit: false, connectionString: connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.LockValueQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.LockValueQuery, bool>> where, Gravitybox.Datastore.EFDAL.Entity.LockValue newValue)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.LockValue, Gravitybox.Datastore.EFDAL.LockValueQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "Lock", getField: GetDatabaseFieldName, hasModifyAudit: false);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.LockValueQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.LockValueQuery, bool>> where, Gravitybox.Datastore.EFDAL.Entity.LockValue newValue, string connectionString)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.LockValue, Gravitybox.Datastore.EFDAL.LockValueQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "Lock", getField: GetDatabaseFieldName, hasModifyAudit: false, connectionString: connectionString);
		}

		#endregion

		#region GetDatabaseFieldName

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		internal static string GetDatabaseFieldName(Gravitybox.Datastore.EFDAL.Entity.LockValue.FieldNameConstants field)
		{
			return GetDatabaseFieldName(field.ToString());
		}

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		internal static string GetDatabaseFieldName(string field)
		{
			switch (field)
			{
				case "Intention": return "Intention";
				case "IsRead": return "IsRead";
				case "LockId": return "LockId";
				case "LockTime": return "LockTime";
				case "MachineId": return "MachineId";
				case "RepositoryId": return "RepositoryId";
			}
			return string.Empty;
		}

		#endregion

		#region Equals
		/// <summary>
		/// Compares two objects of 'LockValue' type and determines if all properties match
		/// </summary>
		/// <returns>True if all properties match, false otherwise</returns>
		public override bool Equals(object obj)
		{
			var other = obj as Gravitybox.Datastore.EFDAL.Entity.LockValue;
			if (other == null) return false;
			return (
				other.Intention == this.Intention &&
				other.IsRead == this.IsRead &&
				other.LockId == this.LockId &&
				other.LockTime == this.LockTime &&
				other.MachineId == this.MachineId &&
				other.RepositoryId == this.RepositoryId
				);
		}

		/// <summary>
		/// Serves as a hash function for this type.
		/// </summary>
		public override int GetHashCode()
		{
			return base.GetHashCode();
		}

		#endregion

	}
}

#region Metadata Class

namespace Gravitybox.Datastore.EFDAL.Entity.Metadata
{
	/// <summary>
	/// Metadata class for the 'LockValue' entity
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("nHydrateModelGenerator", "6.0.0")]
	public partial class LockValueMetadata : Gravitybox.Datastore.EFDAL.IMetadata
	{
		#region Properties

		/// <summary>
		/// Metadata information for the 'Intention' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'Intention' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "Intention", AutoGenerateField = true)]
		public object Intention;

		/// <summary>
		/// Metadata information for the 'IsRead' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'IsRead' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "IsRead", AutoGenerateField = true)]
		public object IsRead;

		/// <summary>
		/// Metadata information for the 'LockId' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'LockId' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Key()]
		[System.ComponentModel.ReadOnly(true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "LockId", AutoGenerateField = true)]
		public object LockId;

		/// <summary>
		/// Metadata information for the 'LockTime' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'LockTime' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "LockTime", AutoGenerateField = true)]
		public object LockTime;

		/// <summary>
		/// Metadata information for the 'MachineId' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'MachineId' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "MachineId", AutoGenerateField = true)]
		public object MachineId;

		/// <summary>
		/// Metadata information for the 'RepositoryId' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'RepositoryId' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "RepositoryId", AutoGenerateField = true)]
		public object RepositoryId;

		#endregion

		#region Methods
		/// <summary>
		/// Gets the underlying table name.
		/// </summary>
		public virtual string GetTableName()
		{
			return "Lock";
		}

		/// <summary>
		/// Gets a list of all object fields with alias/code facade applied excluding inheritance.
		/// </summary>
		public virtual List<string> GetFields()
		{
			var retval = new List<string>();
			retval.Add("Intention");
			retval.Add("IsRead");
			retval.Add("LockId");
			retval.Add("LockTime");
			retval.Add("MachineId");
			retval.Add("RepositoryId");
			return retval;
		}

		/// <summary>
		/// Returns the type of the parent object if one exists.
		/// </summary>
		public virtual System.Type InheritsFrom()
		{
			return null;
		}

		/// <summary>
		/// Returns the database schema name.
		/// </summary>
		public virtual string Schema()
		{
			return "dbo";
		}

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		public virtual string GetDatabaseFieldName(string field)
		{
			switch (field)
			{
				case "Intention": return "Intention";
				case "IsRead": return "IsRead";
				case "LockId": return "LockId";
				case "LockTime": return "LockTime";
				case "MachineId": return "MachineId";
				case "RepositoryId": return "RepositoryId";
			}
			return string.Empty;
		}

		#endregion

	}

}

#endregion

#pragma warning restore 612

