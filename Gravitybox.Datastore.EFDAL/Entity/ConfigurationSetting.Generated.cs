//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 612
using System;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.ComponentModel;
using System.Collections.Generic;
using System.Text;
using Gravitybox.Datastore.EFDAL;
using Gravitybox.Datastore.EFDAL.EventArguments;
using System.Text.RegularExpressions;
using System.Linq.Expressions;
using System.Data.Entity;
using System.Data.Linq;
using System.Data.Entity.ModelConfiguration;
using System.ComponentModel.DataAnnotations;

namespace Gravitybox.Datastore.EFDAL.Entity
{
	/// <summary>
	/// The 'ConfigurationSetting' entity
	/// </summary>
	[DataContract]
	[Serializable]
	[System.CodeDom.Compiler.GeneratedCode("nHydrateModelGenerator", "6.0.0")]
	[FieldNameConstants(typeof(Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants))]
	[System.ComponentModel.DataAnnotations.MetadataType(typeof(Gravitybox.Datastore.EFDAL.Entity.Metadata.ConfigurationSettingMetadata))]
	[EntityMetadata("ConfigurationSetting", false, false, false, true, "", true, false, false, "dbo")]
	public partial class ConfigurationSetting : BaseEntity, Gravitybox.Datastore.EFDAL.IBusinessObject, System.ICloneable, Gravitybox.Datastore.EFDAL.IAuditable, Gravitybox.Datastore.EFDAL.IAuditableSet, Gravitybox.Datastore.EFDAL.ICreatable
	{
		#region FieldNameConstants Enumeration

		/// <summary>
		/// Enumeration to define each property that maps to a database field for the 'ConfigurationSetting' table.
		/// </summary>
		public enum FieldNameConstants
		{
			/// <summary>
			/// Field mapping for the 'ID' property
			/// </summary>
			[System.ComponentModel.DataAnnotations.Key]
			[System.ComponentModel.ReadOnly(true)]
			[System.ComponentModel.Description("Field mapping for the 'ID' property")]
			ID,
			/// <summary>
			/// Field mapping for the 'Name' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'Name' property")]
			Name,
			/// <summary>
			/// Field mapping for the 'Value' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'Value' property")]
			Value,
		}
		#endregion

		#region Constructors

		/// <summary>
		/// Initializes a new instance of the Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting class
		/// </summary>
		public ConfigurationSetting()
		{

		}

		#endregion

		#region Properties

		/// <summary>
		/// The property that maps back to the database 'ConfigurationSetting.ID' field.
		/// </summary>
		/// <remarks>Field: [ConfigurationSetting].[ID], Not Nullable, Primary Key, AutoNumber, Unique, Indexed</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("ID")]
		[System.ComponentModel.DataAnnotations.Schema.Index(IsUnique = true)]
		[System.ComponentModel.DataAnnotations.Key()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int ID
		{
			get { return _iD; }
			protected internal set
			{
				_iD = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'ConfigurationSetting.Name' field.
		/// </summary>
		/// <remarks>Field: [ConfigurationSetting].[Name], Field Length: 50, Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("Name")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual string Name
		{
			get { return _name; }
			set
			{
				if ((value != null) && (value.Length > GetMaxLength(Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants.Name))) throw new Exception(string.Format(GlobalValues.ERROR_DATA_TOO_BIG, value, "ConfigurationSetting.Name", GetMaxLength(Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants.Name)));
				_name = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'ConfigurationSetting.Value' field.
		/// </summary>
		/// <remarks>Field: [ConfigurationSetting].[Value], Field Length: max, Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("Value")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual string Value
		{
			get { return _value; }
			set
			{
				if ((value != null) && (value.Length > GetMaxLength(Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants.Value))) throw new Exception(string.Format(GlobalValues.ERROR_DATA_TOO_BIG, value, "ConfigurationSetting.Value", GetMaxLength(Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants.Value)));
				_value = value;
			}
		}

		/// <summary>
		/// The audit field for the 'Timestamp' parameter.
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[DataMember()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual byte[] Timestamp
		{
			get { return _timestamp; }
			protected internal set
			{
				_timestamp = value;
			}
		}

		/// <summary />
		protected byte[] _timestamp;

		#endregion

		#region Property Holders

		/// <summary />
		protected int _iD;
		/// <summary />
		protected string _name;
		/// <summary />
		protected string _value;

		#endregion

		#region GetMaxLength

		/// <summary>
		/// Gets the maximum size of the field value.
		/// </summary>
		public static int GetMaxLength(Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants field)
		{
			switch (field)
			{
				case Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants.ID:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants.Name:
					return 50;
				case Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants.Value:
					return int.MaxValue;
			}
			return 0;
		}

		int Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetMaxLength(Enum field)
		{
			return GetMaxLength((Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants)field);
		}

		#endregion

		#region GetFieldNameConstants

		System.Type Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetFieldNameConstants()
		{
			return typeof(Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants);
		}

		#endregion

		#region GetFieldType

		/// <summary>
		/// Gets the system type of a field on this object
		/// </summary>
		public static System.Type GetFieldType(Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants field)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants'.");

			switch ((Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants)field)
			{
				case Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants.ID: return typeof(int);
				case Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants.Name: return typeof(string);
				case Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants.Value: return typeof(string);
			}
			return null;
		}

		System.Type Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetFieldType(Enum field)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants'.");

			return GetFieldType((Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants)field);
		}

		#endregion

		#region Get/Set Value

		object Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetValue(System.Enum field)
		{
			return ((Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject)this).GetValue(field, null);
		}

		object Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetValue(System.Enum field, object defaultValue)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants'.");
			return this.GetValue((Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants)field, defaultValue);
		}

		void Gravitybox.Datastore.EFDAL.IBusinessObject.SetValue(System.Enum field, object newValue)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants'.");
			this.SetValue((Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants)field, newValue);
		}

		void Gravitybox.Datastore.EFDAL.IBusinessObject.SetValue(System.Enum field, object newValue, bool fixLength)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants'.");
			this.SetValue((Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants)field, newValue, fixLength);
		}

		#endregion

		#region PrimaryKey

		/// <summary>
		/// Generic primary key for this object
		/// </summary>
		Gravitybox.Datastore.EFDAL.IPrimaryKey Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.PrimaryKey
		{
			get { return new PrimaryKey(Util.HashPK("ConfigurationSetting", this.ID)); }
		}

		#endregion

		#region Clone

		/// <summary>
		/// Creates a shallow copy of this object
		/// </summary>
		public virtual object Clone()
		{
			return Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.Clone(this);
		}

		/// <summary>
		/// Creates a shallow copy of this object with defined, default values and new PK
		/// </summary>
		public virtual object CloneAsNew()
		{
			var item = Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.Clone(this);
			item._iD = 0;
			return item;
		}

		/// <summary>
		/// Creates a shallow copy of this object
		/// </summary>
		public static ConfigurationSetting Clone(Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting item)
		{
			var newItem = new ConfigurationSetting();
			newItem.ID = item.ID;
			newItem.Name = item.Name;
			newItem.Value = item.Value;
			return newItem;
		}

		#endregion

		#region GetValue

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		public virtual object GetValue(Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants field)
		{
			return GetValue(field, null);
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		public virtual object GetValue(Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants field, object defaultValue)
		{
			if (field == Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants.ID)
				return this.ID;
			if (field == Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants.Name)
				return this.Name;
			if (field == Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants.Value)
				return this.Value;
			throw new Exception("Field '" + field.ToString() + "' not found!");
		}

		#endregion

		#region SetValue

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="field">The field to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		public virtual void SetValue(Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants field, object newValue)
		{
			SetValue(field, newValue, false);
		}

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="field">The field to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		/// <param name="fixLength">Determines if the length should be truncated if too long. When false, an error will be raised if data is too large to be assigned to the field.</param>
		public virtual void SetValue(Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants field, object newValue, bool fixLength)
		{
			if (field == Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants.ID)
			{
				throw new Exception("Field '" + field.ToString() + "' is a primary key and cannot be set!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants.Name)
			{
				this.Name = GlobalValues.SetValueHelperInternal((string)newValue, fixLength, GetMaxLength(field));
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants.Value)
			{
				this.Value = GlobalValues.SetValueHelperInternal((string)newValue, fixLength, GetMaxLength(field));
			}
			else
				throw new Exception("Field '" + field.ToString() + "' not found!");
		}

		#endregion

		#region Navigation Properties

		#endregion

		#region Static SQL Methods

		internal static string GetFieldAliasFromFieldNameSqlMapping(string alias)
		{
			alias = alias.Replace("[", string.Empty).Replace("]", string.Empty);
			switch (alias.ToLower())
			{
				case "id": return "id";
				case "name": return "name";
				case "value": return "value";
				case "timestamp": return "timestamp";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetTableFromFieldAliasSqlMapping(string alias)
		{
			switch (alias.ToLower())
			{
				case "id": return "ConfigurationSetting";
				case "name": return "ConfigurationSetting";
				case "value": return "ConfigurationSetting";
				case "timestamp": return "ConfigurationSetting";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetTableFromFieldNameSqlMapping(string field)
		{
			switch (field.ToLower())
			{
				case "id": return "ConfigurationSetting";
				case "name": return "ConfigurationSetting";
				case "value": return "ConfigurationSetting";
				case "timestamp": return "ConfigurationSetting";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetRemappedLinqSql(string sql, string parentAlias, LinqSQLFromClauseCollection childTables)
		{
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[id\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "ConfigurationSetting") + "].[id]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[name\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "ConfigurationSetting") + "].[name]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[value\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "ConfigurationSetting") + "].[value]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[timestamp\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "ConfigurationSetting") + "].[timestamp]", RegexOptions.IgnoreCase);
			return sql;
		}

		#endregion

		#region DeleteData

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.ConfigurationSettingQuery, bool>> where)
		{
			return DeleteData(where: where, optimizer: new QueryOptimizer(), startup: new ContextStartup(null), connectionString: Gravitybox.Datastore.EFDAL.DatastoreEntities.GetConnectionString());
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="optimizer">The optimization object to use for running queries</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.ConfigurationSettingQuery, bool>> where, QueryOptimizer optimizer)
		{
			return DeleteData(where: where, optimizer: optimizer, startup: new ContextStartup(null), connectionString: Gravitybox.Datastore.EFDAL.DatastoreEntities.GetConnectionString());
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="connectionString">The database connection string to use for this access</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.ConfigurationSettingQuery, bool>> where, string connectionString)
		{
			return DeleteData(where: where, optimizer: new QueryOptimizer(), startup: new ContextStartup(null), connectionString: connectionString);
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="optimizer">The optimization object to use for running queries</param>
		/// <param name="startup">The startup options</param>
		/// <param name="connectionString">The database connection string to use for this access</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.ConfigurationSettingQuery, bool>> where, QueryOptimizer optimizer, ContextStartup startup, string connectionString)
		{
			if (optimizer == null)
				optimizer = new QueryOptimizer();
				if (startup == null) startup = new ContextStartup(null);

			using (var connection = Gravitybox.Datastore.EFDAL.DBHelper.GetConnection(Gravitybox.Datastore.EFDAL.Util.StripEFCS2Normal(connectionString)))
			{
				using (var dc = new DataContext(connection))
				{
					var template = dc.GetTable<Gravitybox.Datastore.EFDAL.ConfigurationSettingQuery>();
					using (var cmd = BusinessEntityQuery.GetCommand<Gravitybox.Datastore.EFDAL.ConfigurationSettingQuery>(dc, template, where))
					{
						if (!startup.DefaultTimeout && startup.CommandTimeout > 0) cmd.CommandTimeout = startup.CommandTimeout;
						else
						{
							var cb = new System.Data.SqlClient.SqlConnectionStringBuilder(connectionString);
							cmd.CommandTimeout = cb.ConnectTimeout;
						}

						var parser = LinqSQLParser.Create(cmd.CommandText, LinqSQLParser.ObjectTypeConstants.Table);
						var sql = "CREATE TABLE #t ([ID] [Int])";
						sql += "set rowcount " + optimizer.ChunkSize + ";";
						sql += "INSERT INTO #t ([ID])";
						sql += "SELECT [t0].[ID] #t\r\n";
						sql += parser.GetFromClause(optimizer) + "\r\n";
						sql += parser.GetWhereClause();
						sql += "\r\n";

						var noLock = string.Empty;
						noLock = (optimizer.NoLocking ? "WITH (READUNCOMMITTED) " : string.Empty);
						sql += "DELETE [ConfigurationSetting] FROM [dbo].[ConfigurationSetting] " + noLock + "INNER JOIN #t ON [dbo].[ConfigurationSetting].[ID] = #t.[ID]\r\n";
						sql += ";select @@rowcount";
						sql = "set ansi_nulls off;" + sql + ";drop table #t;";
						cmd.CommandText = sql;
						dc.Connection.Open();
						var startTime = DateTime.Now;
						var affected = 0;
						var count = 0;
						do
						{
							count = (int)cmd.ExecuteScalar();
							affected += count;
						} while (count > 0 && optimizer.ChunkSize > 0);
						var endTime = DateTime.Now;
						optimizer.TotalMilliseconds = (long)endTime.Subtract(startTime).TotalMilliseconds;
						dc.Connection.Close();
						return affected;
					}
				}
			}
		}

		#endregion

		#region UpdateData

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.ConfigurationSettingQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.ConfigurationSettingQuery, bool>> where, TSource newValue)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting, Gravitybox.Datastore.EFDAL.ConfigurationSettingQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "ConfigurationSetting", getField: GetDatabaseFieldName, hasModifyAudit: false);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.ConfigurationSettingQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.ConfigurationSettingQuery, bool>> where, TSource newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting, Gravitybox.Datastore.EFDAL.ConfigurationSettingQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "ConfigurationSetting", getField: GetDatabaseFieldName, hasModifyAudit: false, startup: null, connection: connection, transaction: transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="startup">A configuration object</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.ConfigurationSettingQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.ConfigurationSettingQuery, bool>> where, TSource newValue, ContextStartup startup, string connectionString)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting, Gravitybox.Datastore.EFDAL.ConfigurationSettingQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "ConfigurationSetting", getField: GetDatabaseFieldName, hasModifyAudit: false, startup: startup, connectionString: connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.ConfigurationSettingQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.ConfigurationSettingQuery, bool>> where, TSource newValue, string connectionString)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting, Gravitybox.Datastore.EFDAL.ConfigurationSettingQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "ConfigurationSetting", getField: GetDatabaseFieldName, hasModifyAudit: false, connectionString: connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.ConfigurationSettingQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.ConfigurationSettingQuery, bool>> where, Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting newValue)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting, Gravitybox.Datastore.EFDAL.ConfigurationSettingQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "ConfigurationSetting", getField: GetDatabaseFieldName, hasModifyAudit: false);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.ConfigurationSettingQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.ConfigurationSettingQuery, bool>> where, Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting newValue, string connectionString)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting, Gravitybox.Datastore.EFDAL.ConfigurationSettingQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "ConfigurationSetting", getField: GetDatabaseFieldName, hasModifyAudit: false, connectionString: connectionString);
		}

		#endregion

		#region GetDatabaseFieldName

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		internal static string GetDatabaseFieldName(Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants field)
		{
			return GetDatabaseFieldName(field.ToString());
		}

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		internal static string GetDatabaseFieldName(string field)
		{
			switch (field)
			{
				case "ID": return "ID";
				case "Name": return "Name";
				case "Value": return "Value";
				case "Timestamp": return "Timestamp";
			}
			return string.Empty;
		}

		#endregion

		#region Auditing
		string Gravitybox.Datastore.EFDAL.IAuditableSet.CreatedBy
		{
			get { return null; }
			set { ; }
		}

		string Gravitybox.Datastore.EFDAL.IAuditableSet.ModifiedBy
		{
			get { return null; }
			set { ; }
		}
		string Gravitybox.Datastore.EFDAL.IAuditable.CreatedBy
		{
			get { return null; }
		}

		System.DateTime? Gravitybox.Datastore.EFDAL.IAuditable.CreatedDate
		{
			get { return null; }
		}

		bool Gravitybox.Datastore.EFDAL.IAuditable.IsCreateAuditImplemented
		{
			get { return false; }
		}

		bool Gravitybox.Datastore.EFDAL.IAuditable.IsModifyAuditImplemented
		{
			get { return false; }
		}

		bool Gravitybox.Datastore.EFDAL.IAuditable.IsTimestampAuditImplemented
		{
			get { return true; }
		}

		string Gravitybox.Datastore.EFDAL.IAuditable.ModifiedBy
		{
			get { return null; }
		}

		System.DateTime? Gravitybox.Datastore.EFDAL.IAuditable.ModifiedDate
		{
			get { return null; }
		}

		byte[] Gravitybox.Datastore.EFDAL.IAuditable.TimeStamp
		{
			get { return this.Timestamp; }
		}

		void IAuditableSet.ResetModifiedBy(string modifier)
		{
		}

		void IAuditableSet.ResetCreatedBy(string modifier)
		{
			((IAuditableSet)this).ResetModifiedBy(modifier);
		}

		System.DateTime? Gravitybox.Datastore.EFDAL.IAuditableSet.CreatedDate
		{
			get { return null; }
			set { ; }
		}

		System.DateTime? Gravitybox.Datastore.EFDAL.IAuditableSet.ModifiedDate
		{
			get { return null; }
			set { ; }
		}

		#endregion

		#region Equals
		/// <summary>
		/// Compares two objects of 'ConfigurationSetting' type and determines if all properties match
		/// </summary>
		/// <returns>True if all properties match, false otherwise</returns>
		public override bool Equals(object obj)
		{
			var other = obj as Gravitybox.Datastore.EFDAL.Entity.ConfigurationSetting;
			if (other == null) return false;
			return (
				other.ID == this.ID &&
				other.Name == this.Name &&
				other.Value == this.Value
				);
		}

		/// <summary>
		/// Serves as a hash function for this type.
		/// </summary>
		public override int GetHashCode()
		{
			return base.GetHashCode();
		}

		#endregion

	}
}

#region Metadata Class

namespace Gravitybox.Datastore.EFDAL.Entity.Metadata
{
	/// <summary>
	/// Metadata class for the 'ConfigurationSetting' entity
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("nHydrateModelGenerator", "6.0.0")]
	public partial class ConfigurationSettingMetadata : Gravitybox.Datastore.EFDAL.IMetadata
	{
		#region Properties

		/// <summary>
		/// Metadata information for the 'ID' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'ID' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Key()]
		[System.ComponentModel.ReadOnly(true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "ID", AutoGenerateField = true)]
		public object ID;

		/// <summary>
		/// Metadata information for the 'Name' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'Name' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.StringLength(50, ErrorMessage = "The property 'Name' has a maximum length of 50")]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "Name", AutoGenerateField = true)]
		public object Name;

		/// <summary>
		/// Metadata information for the 'Value' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'Value' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.StringLength(2147483647, ErrorMessage = "The property 'Value' has a maximum length of 2147483647")]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "Value", AutoGenerateField = true)]
		public object Value;

		/// <summary>
		/// Metadata information for the 'Timestamp' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Timestamp()]
		[System.ComponentModel.DataAnnotations.ConcurrencyCheck()]
		[System.ComponentModel.ReadOnly(true)]
		public object Timestamp;

		#endregion

		#region Methods
		/// <summary>
		/// Gets the underlying table name.
		/// </summary>
		public virtual string GetTableName()
		{
			return "ConfigurationSetting";
		}

		/// <summary>
		/// Gets a list of all object fields with alias/code facade applied excluding inheritance.
		/// </summary>
		public virtual List<string> GetFields()
		{
			var retval = new List<string>();
			retval.Add("ID");
			retval.Add("Name");
			retval.Add("Value");
			return retval;
		}

		/// <summary>
		/// Returns the type of the parent object if one exists.
		/// </summary>
		public virtual System.Type InheritsFrom()
		{
			return null;
		}

		/// <summary>
		/// Returns the database schema name.
		/// </summary>
		public virtual string Schema()
		{
			return "dbo";
		}

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		public virtual string GetDatabaseFieldName(string field)
		{
			switch (field)
			{
				case "ID": return "ID";
				case "Name": return "Name";
				case "Value": return "Value";
				case "Timestamp": return "Timestamp";
			}
			return string.Empty;
		}

		#endregion

	}

}

#endregion

#pragma warning restore 612

