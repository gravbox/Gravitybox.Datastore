//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 612
using System;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.ComponentModel;
using System.Collections.Generic;
using System.Text;
using Gravitybox.Datastore.EFDAL;
using Gravitybox.Datastore.EFDAL.EventArguments;
using System.Text.RegularExpressions;
using System.Linq.Expressions;
using System.Data.Entity;
using System.Data.Linq;
using System.Data.Entity.ModelConfiguration;
using System.ComponentModel.DataAnnotations;

namespace Gravitybox.Datastore.EFDAL.Entity
{
	/// <summary>
	/// The 'ServerStat' entity
	/// </summary>
	[DataContract]
	[Serializable]
	[System.CodeDom.Compiler.GeneratedCode("nHydrateModelGenerator", "6.0.0")]
	[FieldNameConstants(typeof(Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants))]
	[System.ComponentModel.DataAnnotations.MetadataType(typeof(Gravitybox.Datastore.EFDAL.Entity.Metadata.ServerStatMetadata))]
	[EntityMetadata("ServerStat", false, false, false, false, "", true, false, false, "dbo")]
	public partial class ServerStat : BaseEntity, Gravitybox.Datastore.EFDAL.IBusinessObject, System.ICloneable, Gravitybox.Datastore.EFDAL.ICreatable
	{
		#region FieldNameConstants Enumeration

		/// <summary>
		/// Enumeration to define each property that maps to a database field for the 'ServerStat' table.
		/// </summary>
		public enum FieldNameConstants
		{
			/// <summary>
			/// Field mapping for the 'AddedDate' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'AddedDate' property")]
			AddedDate,
			/// <summary>
			/// Field mapping for the 'CachedItems' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'CachedItems' property")]
			CachedItems,
			/// <summary>
			/// Field mapping for the 'MemoryUsageAvailable' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'MemoryUsageAvailable' property")]
			MemoryUsageAvailable,
			/// <summary>
			/// Field mapping for the 'MemoryUsageProcess' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'MemoryUsageProcess' property")]
			MemoryUsageProcess,
			/// <summary>
			/// Field mapping for the 'MemoryUsageTotal' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'MemoryUsageTotal' property")]
			MemoryUsageTotal,
			/// <summary>
			/// Field mapping for the 'ProcessorUsage' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'ProcessorUsage' property")]
			ProcessorUsage,
			/// <summary>
			/// Field mapping for the 'RepositoryCreateDelta' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'RepositoryCreateDelta' property")]
			RepositoryCreateDelta,
			/// <summary>
			/// Field mapping for the 'RepositoryDeleteDelta' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'RepositoryDeleteDelta' property")]
			RepositoryDeleteDelta,
			/// <summary>
			/// Field mapping for the 'RepositoryLoadDelta' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'RepositoryLoadDelta' property")]
			RepositoryLoadDelta,
			/// <summary>
			/// Field mapping for the 'RepositoryTotal' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'RepositoryTotal' property")]
			RepositoryTotal,
			/// <summary>
			/// Field mapping for the 'RepositoryUnloadDelta' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'RepositoryUnloadDelta' property")]
			RepositoryUnloadDelta,
			/// <summary>
			/// Field mapping for the 'ServerId' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'ServerId' property")]
			ServerId,
			/// <summary>
			/// Field mapping for the 'ServerStatId' property
			/// </summary>
			[System.ComponentModel.DataAnnotations.Key]
			[System.ComponentModel.ReadOnly(true)]
			[System.ComponentModel.Description("Field mapping for the 'ServerStatId' property")]
			ServerStatId,
		}
		#endregion

		#region Constructors

		/// <summary>
		/// Initializes a new instance of the Gravitybox.Datastore.EFDAL.Entity.ServerStat class
		/// </summary>
		public ServerStat()
		{
			this._addedDate = DateTime.Now;
			this._cachedItems = 0;

		}

		#endregion

		#region Properties

		/// <summary>
		/// The property that maps back to the database 'ServerStat.AddedDate' field.
		/// </summary>
		/// <remarks>Field: [ServerStat].[AddedDate], Not Nullable, Default Value: getdate</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("AddedDate")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual DateTime AddedDate
		{
			get { return _addedDate; }
			set
			{
				if ((value < GlobalValues.MIN_DATETIME)) throw new Exception("The DateTime value 'AddedDate' (" + value.ToString(GlobalValues.YMDHMS_FORMAT) + ") cannot be less than " + GlobalValues.MIN_DATETIME.ToString());
				if ((value > GlobalValues.MAX_DATETIME)) throw new Exception("The DateTime value 'AddedDate' (" + value.ToString(GlobalValues.YMDHMS_FORMAT) + ") cannot be greater than " + GlobalValues.MAX_DATETIME.ToString());
				_addedDate = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'ServerStat.CachedItems' field.
		/// </summary>
		/// <remarks>Field: [ServerStat].[CachedItems], Not Nullable, Default Value: 0</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("CachedItems")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int CachedItems
		{
			get { return _cachedItems; }
			set
			{
				_cachedItems = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'ServerStat.MemoryUsageAvailable' field.
		/// </summary>
		/// <remarks>Field: [ServerStat].[MemoryUsageAvailable], Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("MemoryUsageAvailable")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual long MemoryUsageAvailable
		{
			get { return _memoryUsageAvailable; }
			set
			{
				_memoryUsageAvailable = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'ServerStat.MemoryUsageProcess' field.
		/// </summary>
		/// <remarks>Field: [ServerStat].[MemoryUsageProcess], Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("MemoryUsageProcess")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual long MemoryUsageProcess
		{
			get { return _memoryUsageProcess; }
			set
			{
				_memoryUsageProcess = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'ServerStat.MemoryUsageTotal' field.
		/// </summary>
		/// <remarks>Field: [ServerStat].[MemoryUsageTotal], Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("MemoryUsageTotal")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual long MemoryUsageTotal
		{
			get { return _memoryUsageTotal; }
			set
			{
				_memoryUsageTotal = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'ServerStat.ProcessorUsage' field.
		/// </summary>
		/// <remarks>Field: [ServerStat].[ProcessorUsage], Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("ProcessorUsage")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int ProcessorUsage
		{
			get { return _processorUsage; }
			set
			{
				_processorUsage = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'ServerStat.RepositoryCreateDelta' field.
		/// </summary>
		/// <remarks>Field: [ServerStat].[RepositoryCreateDelta], Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("RepositoryCreateDelta")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual long RepositoryCreateDelta
		{
			get { return _repositoryCreateDelta; }
			set
			{
				_repositoryCreateDelta = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'ServerStat.RepositoryDeleteDelta' field.
		/// </summary>
		/// <remarks>Field: [ServerStat].[RepositoryDeleteDelta], Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("RepositoryDeleteDelta")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual long RepositoryDeleteDelta
		{
			get { return _repositoryDeleteDelta; }
			set
			{
				_repositoryDeleteDelta = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'ServerStat.RepositoryLoadDelta' field.
		/// </summary>
		/// <remarks>Field: [ServerStat].[RepositoryLoadDelta], Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("RepositoryLoadDelta")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int RepositoryLoadDelta
		{
			get { return _repositoryLoadDelta; }
			set
			{
				_repositoryLoadDelta = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'ServerStat.RepositoryTotal' field.
		/// </summary>
		/// <remarks>Field: [ServerStat].[RepositoryTotal], Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("RepositoryTotal")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int RepositoryTotal
		{
			get { return _repositoryTotal; }
			set
			{
				_repositoryTotal = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'ServerStat.RepositoryUnloadDelta' field.
		/// </summary>
		/// <remarks>Field: [ServerStat].[RepositoryUnloadDelta], Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("RepositoryUnloadDelta")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int RepositoryUnloadDelta
		{
			get { return _repositoryUnloadDelta; }
			set
			{
				_repositoryUnloadDelta = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'ServerStat.ServerId' field.
		/// </summary>
		/// <remarks>Field: [ServerStat].[ServerId], Not Nullable, Indexed</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("ServerId")]
		[System.ComponentModel.DataAnnotations.Schema.Index()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int ServerId
		{
			get { return _serverId; }
			set
			{
				_serverId = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'ServerStat.ServerStatId' field.
		/// </summary>
		/// <remarks>Field: [ServerStat].[ServerStatId], Not Nullable, Primary Key, AutoNumber, Unique, Indexed</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("ServerStatId")]
		[System.ComponentModel.DataAnnotations.Schema.Index(IsUnique = true)]
		[System.ComponentModel.DataAnnotations.Key()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual long ServerStatId
		{
			get { return _serverStatId; }
			protected internal set
			{
				_serverStatId = value;
			}
		}

		#endregion

		#region Property Holders

		/// <summary />
		protected DateTime _addedDate;
		/// <summary />
		protected int _cachedItems;
		/// <summary />
		protected long _memoryUsageAvailable;
		/// <summary />
		protected long _memoryUsageProcess;
		/// <summary />
		protected long _memoryUsageTotal;
		/// <summary />
		protected int _processorUsage;
		/// <summary />
		protected long _repositoryCreateDelta;
		/// <summary />
		protected long _repositoryDeleteDelta;
		/// <summary />
		protected int _repositoryLoadDelta;
		/// <summary />
		protected int _repositoryTotal;
		/// <summary />
		protected int _repositoryUnloadDelta;
		/// <summary />
		protected int _serverId;
		/// <summary />
		protected long _serverStatId;

		#endregion

		#region GetMaxLength

		/// <summary>
		/// Gets the maximum size of the field value.
		/// </summary>
		public static int GetMaxLength(Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants field)
		{
			switch (field)
			{
				case Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.AddedDate:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.CachedItems:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.MemoryUsageAvailable:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.MemoryUsageProcess:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.MemoryUsageTotal:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.ProcessorUsage:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.RepositoryCreateDelta:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.RepositoryDeleteDelta:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.RepositoryLoadDelta:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.RepositoryTotal:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.RepositoryUnloadDelta:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.ServerId:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.ServerStatId:
					return 0;
			}
			return 0;
		}

		int Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetMaxLength(Enum field)
		{
			return GetMaxLength((Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants)field);
		}

		#endregion

		#region GetFieldNameConstants

		System.Type Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetFieldNameConstants()
		{
			return typeof(Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants);
		}

		#endregion

		#region GetFieldType

		/// <summary>
		/// Gets the system type of a field on this object
		/// </summary>
		public static System.Type GetFieldType(Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants field)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants'.");

			switch ((Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants)field)
			{
				case Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.AddedDate: return typeof(DateTime);
				case Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.CachedItems: return typeof(int);
				case Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.MemoryUsageAvailable: return typeof(long);
				case Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.MemoryUsageProcess: return typeof(long);
				case Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.MemoryUsageTotal: return typeof(long);
				case Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.ProcessorUsage: return typeof(int);
				case Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.RepositoryCreateDelta: return typeof(long);
				case Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.RepositoryDeleteDelta: return typeof(long);
				case Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.RepositoryLoadDelta: return typeof(int);
				case Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.RepositoryTotal: return typeof(int);
				case Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.RepositoryUnloadDelta: return typeof(int);
				case Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.ServerId: return typeof(int);
				case Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.ServerStatId: return typeof(long);
			}
			return null;
		}

		System.Type Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetFieldType(Enum field)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants'.");

			return GetFieldType((Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants)field);
		}

		#endregion

		#region Get/Set Value

		object Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetValue(System.Enum field)
		{
			return ((Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject)this).GetValue(field, null);
		}

		object Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetValue(System.Enum field, object defaultValue)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants'.");
			return this.GetValue((Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants)field, defaultValue);
		}

		void Gravitybox.Datastore.EFDAL.IBusinessObject.SetValue(System.Enum field, object newValue)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants'.");
			this.SetValue((Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants)field, newValue);
		}

		void Gravitybox.Datastore.EFDAL.IBusinessObject.SetValue(System.Enum field, object newValue, bool fixLength)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants'.");
			this.SetValue((Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants)field, newValue, fixLength);
		}

		#endregion

		#region PrimaryKey

		/// <summary>
		/// Generic primary key for this object
		/// </summary>
		Gravitybox.Datastore.EFDAL.IPrimaryKey Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.PrimaryKey
		{
			get { return new PrimaryKey(Util.HashPK("ServerStat", this.ServerStatId)); }
		}

		#endregion

		#region Clone

		/// <summary>
		/// Creates a shallow copy of this object
		/// </summary>
		public virtual object Clone()
		{
			return Gravitybox.Datastore.EFDAL.Entity.ServerStat.Clone(this);
		}

		/// <summary>
		/// Creates a shallow copy of this object with defined, default values and new PK
		/// </summary>
		public virtual object CloneAsNew()
		{
			var item = Gravitybox.Datastore.EFDAL.Entity.ServerStat.Clone(this);
			item._serverStatId = 0;
			item._addedDate = DateTime.Now;
			item._cachedItems = 0;
			return item;
		}

		/// <summary>
		/// Creates a shallow copy of this object
		/// </summary>
		public static ServerStat Clone(Gravitybox.Datastore.EFDAL.Entity.ServerStat item)
		{
			var newItem = new ServerStat();
			newItem.AddedDate = item.AddedDate;
			newItem.CachedItems = item.CachedItems;
			newItem.MemoryUsageAvailable = item.MemoryUsageAvailable;
			newItem.MemoryUsageProcess = item.MemoryUsageProcess;
			newItem.MemoryUsageTotal = item.MemoryUsageTotal;
			newItem.ProcessorUsage = item.ProcessorUsage;
			newItem.RepositoryCreateDelta = item.RepositoryCreateDelta;
			newItem.RepositoryDeleteDelta = item.RepositoryDeleteDelta;
			newItem.RepositoryLoadDelta = item.RepositoryLoadDelta;
			newItem.RepositoryTotal = item.RepositoryTotal;
			newItem.RepositoryUnloadDelta = item.RepositoryUnloadDelta;
			newItem.ServerId = item.ServerId;
			newItem.ServerStatId = item.ServerStatId;
			return newItem;
		}

		#endregion

		#region GetValue

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		public virtual object GetValue(Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants field)
		{
			return GetValue(field, null);
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		public virtual object GetValue(Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants field, object defaultValue)
		{
			if (field == Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.AddedDate)
				return this.AddedDate;
			if (field == Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.CachedItems)
				return this.CachedItems;
			if (field == Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.MemoryUsageAvailable)
				return this.MemoryUsageAvailable;
			if (field == Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.MemoryUsageProcess)
				return this.MemoryUsageProcess;
			if (field == Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.MemoryUsageTotal)
				return this.MemoryUsageTotal;
			if (field == Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.ProcessorUsage)
				return this.ProcessorUsage;
			if (field == Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.RepositoryCreateDelta)
				return this.RepositoryCreateDelta;
			if (field == Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.RepositoryDeleteDelta)
				return this.RepositoryDeleteDelta;
			if (field == Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.RepositoryLoadDelta)
				return this.RepositoryLoadDelta;
			if (field == Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.RepositoryTotal)
				return this.RepositoryTotal;
			if (field == Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.RepositoryUnloadDelta)
				return this.RepositoryUnloadDelta;
			if (field == Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.ServerId)
				return this.ServerId;
			if (field == Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.ServerStatId)
				return this.ServerStatId;
			throw new Exception("Field '" + field.ToString() + "' not found!");
		}

		#endregion

		#region SetValue

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="field">The field to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		public virtual void SetValue(Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants field, object newValue)
		{
			SetValue(field, newValue, false);
		}

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="field">The field to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		/// <param name="fixLength">Determines if the length should be truncated if too long. When false, an error will be raised if data is too large to be assigned to the field.</param>
		public virtual void SetValue(Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants field, object newValue, bool fixLength)
		{
			if (field == Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.AddedDate)
			{
				this.AddedDate = GlobalValues.SetValueHelperDateTimeNotNullableInternal(newValue, "Field 'AddedDate' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.CachedItems)
			{
				this.CachedItems = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'CachedItems' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.MemoryUsageAvailable)
			{
				this.MemoryUsageAvailable = GlobalValues.SetValueHelperLongNotNullableInternal(newValue, "Field 'MemoryUsageAvailable' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.MemoryUsageProcess)
			{
				this.MemoryUsageProcess = GlobalValues.SetValueHelperLongNotNullableInternal(newValue, "Field 'MemoryUsageProcess' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.MemoryUsageTotal)
			{
				this.MemoryUsageTotal = GlobalValues.SetValueHelperLongNotNullableInternal(newValue, "Field 'MemoryUsageTotal' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.ProcessorUsage)
			{
				this.ProcessorUsage = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'ProcessorUsage' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.RepositoryCreateDelta)
			{
				this.RepositoryCreateDelta = GlobalValues.SetValueHelperLongNotNullableInternal(newValue, "Field 'RepositoryCreateDelta' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.RepositoryDeleteDelta)
			{
				this.RepositoryDeleteDelta = GlobalValues.SetValueHelperLongNotNullableInternal(newValue, "Field 'RepositoryDeleteDelta' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.RepositoryLoadDelta)
			{
				this.RepositoryLoadDelta = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'RepositoryLoadDelta' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.RepositoryTotal)
			{
				this.RepositoryTotal = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'RepositoryTotal' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.RepositoryUnloadDelta)
			{
				this.RepositoryUnloadDelta = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'RepositoryUnloadDelta' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.ServerId)
			{
				this.ServerId = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'ServerId' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants.ServerStatId)
			{
				throw new Exception("Field '" + field.ToString() + "' is a primary key and cannot be set!");
			}
			else
				throw new Exception("Field '" + field.ToString() + "' not found!");
		}

		#endregion

		#region Navigation Properties

		/// <summary>
		/// The navigation definition for walking Server->ServerStat
		/// </summary>
		[DataMember]
		[XmlIgnore]
		public virtual Server Server { get; set; }

		#endregion

		#region Static SQL Methods

		internal static string GetFieldAliasFromFieldNameSqlMapping(string alias)
		{
			alias = alias.Replace("[", string.Empty).Replace("]", string.Empty);
			switch (alias.ToLower())
			{
				case "addeddate": return "addeddate";
				case "cacheditems": return "cacheditems";
				case "memoryusageavailable": return "memoryusageavailable";
				case "memoryusageprocess": return "memoryusageprocess";
				case "memoryusagetotal": return "memoryusagetotal";
				case "processorusage": return "processorusage";
				case "repositorycreatedelta": return "repositorycreatedelta";
				case "repositorydeletedelta": return "repositorydeletedelta";
				case "repositoryloaddelta": return "repositoryloaddelta";
				case "repositorytotal": return "repositorytotal";
				case "repositoryunloaddelta": return "repositoryunloaddelta";
				case "serverid": return "serverid";
				case "serverstatid": return "serverstatid";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetTableFromFieldAliasSqlMapping(string alias)
		{
			switch (alias.ToLower())
			{
				case "addeddate": return "ServerStat";
				case "cacheditems": return "ServerStat";
				case "memoryusageavailable": return "ServerStat";
				case "memoryusageprocess": return "ServerStat";
				case "memoryusagetotal": return "ServerStat";
				case "processorusage": return "ServerStat";
				case "repositorycreatedelta": return "ServerStat";
				case "repositorydeletedelta": return "ServerStat";
				case "repositoryloaddelta": return "ServerStat";
				case "repositorytotal": return "ServerStat";
				case "repositoryunloaddelta": return "ServerStat";
				case "serverid": return "ServerStat";
				case "serverstatid": return "ServerStat";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetTableFromFieldNameSqlMapping(string field)
		{
			switch (field.ToLower())
			{
				case "addeddate": return "ServerStat";
				case "cacheditems": return "ServerStat";
				case "memoryusageavailable": return "ServerStat";
				case "memoryusageprocess": return "ServerStat";
				case "memoryusagetotal": return "ServerStat";
				case "processorusage": return "ServerStat";
				case "repositorycreatedelta": return "ServerStat";
				case "repositorydeletedelta": return "ServerStat";
				case "repositoryloaddelta": return "ServerStat";
				case "repositorytotal": return "ServerStat";
				case "repositoryunloaddelta": return "ServerStat";
				case "serverid": return "ServerStat";
				case "serverstatid": return "ServerStat";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetRemappedLinqSql(string sql, string parentAlias, LinqSQLFromClauseCollection childTables)
		{
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[addeddate\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "ServerStat") + "].[addeddate]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[cacheditems\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "ServerStat") + "].[cacheditems]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[memoryusageavailable\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "ServerStat") + "].[memoryusageavailable]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[memoryusageprocess\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "ServerStat") + "].[memoryusageprocess]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[memoryusagetotal\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "ServerStat") + "].[memoryusagetotal]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[processorusage\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "ServerStat") + "].[processorusage]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[repositorycreatedelta\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "ServerStat") + "].[repositorycreatedelta]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[repositorydeletedelta\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "ServerStat") + "].[repositorydeletedelta]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[repositoryloaddelta\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "ServerStat") + "].[repositoryloaddelta]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[repositorytotal\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "ServerStat") + "].[repositorytotal]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[repositoryunloaddelta\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "ServerStat") + "].[repositoryunloaddelta]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[serverid\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "ServerStat") + "].[serverid]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[serverstatid\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "ServerStat") + "].[serverstatid]", RegexOptions.IgnoreCase);
			return sql;
		}

		#endregion

		#region DeleteData

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.ServerStatQuery, bool>> where)
		{
			return DeleteData(where: where, optimizer: new QueryOptimizer(), startup: new ContextStartup(null), connectionString: Gravitybox.Datastore.EFDAL.DatastoreEntities.GetConnectionString());
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="optimizer">The optimization object to use for running queries</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.ServerStatQuery, bool>> where, QueryOptimizer optimizer)
		{
			return DeleteData(where: where, optimizer: optimizer, startup: new ContextStartup(null), connectionString: Gravitybox.Datastore.EFDAL.DatastoreEntities.GetConnectionString());
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="connectionString">The database connection string to use for this access</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.ServerStatQuery, bool>> where, string connectionString)
		{
			return DeleteData(where: where, optimizer: new QueryOptimizer(), startup: new ContextStartup(null), connectionString: connectionString);
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="optimizer">The optimization object to use for running queries</param>
		/// <param name="startup">The startup options</param>
		/// <param name="connectionString">The database connection string to use for this access</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.ServerStatQuery, bool>> where, QueryOptimizer optimizer, ContextStartup startup, string connectionString)
		{
			if (optimizer == null)
				optimizer = new QueryOptimizer();
				if (startup == null) startup = new ContextStartup(null);

			using (var connection = Gravitybox.Datastore.EFDAL.DBHelper.GetConnection(Gravitybox.Datastore.EFDAL.Util.StripEFCS2Normal(connectionString)))
			{
				using (var dc = new DataContext(connection))
				{
					var template = dc.GetTable<Gravitybox.Datastore.EFDAL.ServerStatQuery>();
					using (var cmd = BusinessEntityQuery.GetCommand<Gravitybox.Datastore.EFDAL.ServerStatQuery>(dc, template, where))
					{
						if (!startup.DefaultTimeout && startup.CommandTimeout > 0) cmd.CommandTimeout = startup.CommandTimeout;
						else
						{
							var cb = new System.Data.SqlClient.SqlConnectionStringBuilder(connectionString);
							cmd.CommandTimeout = cb.ConnectTimeout;
						}

						var parser = LinqSQLParser.Create(cmd.CommandText, LinqSQLParser.ObjectTypeConstants.Table);
                        var sb = new StringBuilder();
                        sb.AppendLine("SET ROWCOUNT " + optimizer.ChunkSize + ";");
                        sb.AppendLine("delete [X] from [dbo].[ServerStat] [X] inner join (");
                        sb.AppendLine("SELECT [t0].[ServerStatId]");
                        sb.AppendLine(parser.GetFromClause(optimizer));
                        sb.AppendLine(parser.GetWhereClause());
                        sb.AppendLine(") AS [Extent2]");
                        sb.AppendLine("ON [X].[ServerStatId] = [Extent2].[ServerStatId]");
                        sb.AppendLine("select @@ROWCOUNT");
						cmd.CommandText = sb.ToString();
						dc.Connection.Open();
						var startTime = DateTime.Now;
						var affected = 0;
						var count = 0;
						do
						{
							count = (int)cmd.ExecuteScalar();
							affected += count;
						} while (count > 0 && optimizer.ChunkSize > 0);
						var endTime = DateTime.Now;
						optimizer.TotalMilliseconds = (long)endTime.Subtract(startTime).TotalMilliseconds;
						dc.Connection.Close();
						return affected;
					}
				}
			}
		}

		#endregion

		#region UpdateData

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.ServerStatQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.ServerStatQuery, bool>> where, TSource newValue)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.ServerStat, Gravitybox.Datastore.EFDAL.ServerStatQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "ServerStat", getField: GetDatabaseFieldName, hasModifyAudit: false);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.ServerStatQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.ServerStatQuery, bool>> where, TSource newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.ServerStat, Gravitybox.Datastore.EFDAL.ServerStatQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "ServerStat", getField: GetDatabaseFieldName, hasModifyAudit: false, startup: null, connection: connection, transaction: transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="startup">A configuration object</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.ServerStatQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.ServerStatQuery, bool>> where, TSource newValue, ContextStartup startup, string connectionString)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.ServerStat, Gravitybox.Datastore.EFDAL.ServerStatQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "ServerStat", getField: GetDatabaseFieldName, hasModifyAudit: false, startup: startup, connectionString: connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.ServerStatQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.ServerStatQuery, bool>> where, TSource newValue, string connectionString)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.ServerStat, Gravitybox.Datastore.EFDAL.ServerStatQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "ServerStat", getField: GetDatabaseFieldName, hasModifyAudit: false, connectionString: connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.ServerStatQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.ServerStatQuery, bool>> where, Gravitybox.Datastore.EFDAL.Entity.ServerStat newValue)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.ServerStat, Gravitybox.Datastore.EFDAL.ServerStatQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "ServerStat", getField: GetDatabaseFieldName, hasModifyAudit: false);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.ServerStatQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.ServerStatQuery, bool>> where, Gravitybox.Datastore.EFDAL.Entity.ServerStat newValue, string connectionString)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.ServerStat, Gravitybox.Datastore.EFDAL.ServerStatQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "ServerStat", getField: GetDatabaseFieldName, hasModifyAudit: false, connectionString: connectionString);
		}

		#endregion

		#region GetDatabaseFieldName

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		internal static string GetDatabaseFieldName(Gravitybox.Datastore.EFDAL.Entity.ServerStat.FieldNameConstants field)
		{
			return GetDatabaseFieldName(field.ToString());
		}

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		internal static string GetDatabaseFieldName(string field)
		{
			switch (field)
			{
				case "AddedDate": return "AddedDate";
				case "CachedItems": return "CachedItems";
				case "MemoryUsageAvailable": return "MemoryUsageAvailable";
				case "MemoryUsageProcess": return "MemoryUsageProcess";
				case "MemoryUsageTotal": return "MemoryUsageTotal";
				case "ProcessorUsage": return "ProcessorUsage";
				case "RepositoryCreateDelta": return "RepositoryCreateDelta";
				case "RepositoryDeleteDelta": return "RepositoryDeleteDelta";
				case "RepositoryLoadDelta": return "RepositoryLoadDelta";
				case "RepositoryTotal": return "RepositoryTotal";
				case "RepositoryUnloadDelta": return "RepositoryUnloadDelta";
				case "ServerId": return "ServerId";
				case "ServerStatId": return "ServerStatId";
			}
			return string.Empty;
		}

		#endregion

		#region Equals
		/// <summary>
		/// Compares two objects of 'ServerStat' type and determines if all properties match
		/// </summary>
		/// <returns>True if all properties match, false otherwise</returns>
		public override bool Equals(object obj)
		{
			var other = obj as Gravitybox.Datastore.EFDAL.Entity.ServerStat;
			if (other == null) return false;
			return (
				other.AddedDate == this.AddedDate &&
				other.CachedItems == this.CachedItems &&
				other.MemoryUsageAvailable == this.MemoryUsageAvailable &&
				other.MemoryUsageProcess == this.MemoryUsageProcess &&
				other.MemoryUsageTotal == this.MemoryUsageTotal &&
				other.ProcessorUsage == this.ProcessorUsage &&
				other.RepositoryCreateDelta == this.RepositoryCreateDelta &&
				other.RepositoryDeleteDelta == this.RepositoryDeleteDelta &&
				other.RepositoryLoadDelta == this.RepositoryLoadDelta &&
				other.RepositoryTotal == this.RepositoryTotal &&
				other.RepositoryUnloadDelta == this.RepositoryUnloadDelta &&
				other.ServerId == this.ServerId &&
				other.ServerStatId == this.ServerStatId
				);
		}

		/// <summary>
		/// Serves as a hash function for this type.
		/// </summary>
		public override int GetHashCode()
		{
			return base.GetHashCode();
		}

		#endregion

	}
}

#region Metadata Class

namespace Gravitybox.Datastore.EFDAL.Entity.Metadata
{
	/// <summary>
	/// Metadata class for the 'ServerStat' entity
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("nHydrateModelGenerator", "6.0.0")]
	public partial class ServerStatMetadata : Gravitybox.Datastore.EFDAL.IMetadata
	{
		#region Properties

		/// <summary>
		/// Metadata information for the 'AddedDate' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'AddedDate' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "AddedDate", AutoGenerateField = true)]
		public object AddedDate;

		/// <summary>
		/// Metadata information for the 'CachedItems' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'CachedItems' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "CachedItems", AutoGenerateField = true)]
		public object CachedItems;

		/// <summary>
		/// Metadata information for the 'MemoryUsageAvailable' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'MemoryUsageAvailable' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "MemoryUsageAvailable", AutoGenerateField = true)]
		public object MemoryUsageAvailable;

		/// <summary>
		/// Metadata information for the 'MemoryUsageProcess' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'MemoryUsageProcess' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "MemoryUsageProcess", AutoGenerateField = true)]
		public object MemoryUsageProcess;

		/// <summary>
		/// Metadata information for the 'MemoryUsageTotal' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'MemoryUsageTotal' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "MemoryUsageTotal", AutoGenerateField = true)]
		public object MemoryUsageTotal;

		/// <summary>
		/// Metadata information for the 'ProcessorUsage' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'ProcessorUsage' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "ProcessorUsage", AutoGenerateField = true)]
		public object ProcessorUsage;

		/// <summary>
		/// Metadata information for the 'RepositoryCreateDelta' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'RepositoryCreateDelta' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "RepositoryCreateDelta", AutoGenerateField = true)]
		public object RepositoryCreateDelta;

		/// <summary>
		/// Metadata information for the 'RepositoryDeleteDelta' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'RepositoryDeleteDelta' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "RepositoryDeleteDelta", AutoGenerateField = true)]
		public object RepositoryDeleteDelta;

		/// <summary>
		/// Metadata information for the 'RepositoryLoadDelta' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'RepositoryLoadDelta' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "RepositoryLoadDelta", AutoGenerateField = true)]
		public object RepositoryLoadDelta;

		/// <summary>
		/// Metadata information for the 'RepositoryTotal' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'RepositoryTotal' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "RepositoryTotal", AutoGenerateField = true)]
		public object RepositoryTotal;

		/// <summary>
		/// Metadata information for the 'RepositoryUnloadDelta' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'RepositoryUnloadDelta' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "RepositoryUnloadDelta", AutoGenerateField = true)]
		public object RepositoryUnloadDelta;

		/// <summary>
		/// Metadata information for the 'ServerId' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'ServerId' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "ServerId", AutoGenerateField = true)]
		public object ServerId;

		/// <summary>
		/// Metadata information for the 'ServerStatId' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'ServerStatId' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Key()]
		[System.ComponentModel.ReadOnly(true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "ServerStatId", AutoGenerateField = true)]
		public object ServerStatId;

		#endregion

		#region Methods
		/// <summary>
		/// Gets the underlying table name.
		/// </summary>
		public virtual string GetTableName()
		{
			return "ServerStat";
		}

		/// <summary>
		/// Gets a list of all object fields with alias/code facade applied excluding inheritance.
		/// </summary>
		public virtual List<string> GetFields()
		{
			var retval = new List<string>();
			retval.Add("AddedDate");
			retval.Add("CachedItems");
			retval.Add("MemoryUsageAvailable");
			retval.Add("MemoryUsageProcess");
			retval.Add("MemoryUsageTotal");
			retval.Add("ProcessorUsage");
			retval.Add("RepositoryCreateDelta");
			retval.Add("RepositoryDeleteDelta");
			retval.Add("RepositoryLoadDelta");
			retval.Add("RepositoryTotal");
			retval.Add("RepositoryUnloadDelta");
			retval.Add("ServerId");
			retval.Add("ServerStatId");
			return retval;
		}

		/// <summary>
		/// Returns the type of the parent object if one exists.
		/// </summary>
		public virtual System.Type InheritsFrom()
		{
			return null;
		}

		/// <summary>
		/// Returns the database schema name.
		/// </summary>
		public virtual string Schema()
		{
			return "dbo";
		}

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		public virtual string GetDatabaseFieldName(string field)
		{
			switch (field)
			{
				case "AddedDate": return "AddedDate";
				case "CachedItems": return "CachedItems";
				case "MemoryUsageAvailable": return "MemoryUsageAvailable";
				case "MemoryUsageProcess": return "MemoryUsageProcess";
				case "MemoryUsageTotal": return "MemoryUsageTotal";
				case "ProcessorUsage": return "ProcessorUsage";
				case "RepositoryCreateDelta": return "RepositoryCreateDelta";
				case "RepositoryDeleteDelta": return "RepositoryDeleteDelta";
				case "RepositoryLoadDelta": return "RepositoryLoadDelta";
				case "RepositoryTotal": return "RepositoryTotal";
				case "RepositoryUnloadDelta": return "RepositoryUnloadDelta";
				case "ServerId": return "ServerId";
				case "ServerStatId": return "ServerStatId";
			}
			return string.Empty;
		}

		#endregion

	}

}

#endregion

#pragma warning restore 612

