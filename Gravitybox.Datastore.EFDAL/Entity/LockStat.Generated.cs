//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 612
using System;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.ComponentModel;
using System.Collections.Generic;
using System.Text;
using Gravitybox.Datastore.EFDAL;
using Gravitybox.Datastore.EFDAL.EventArguments;
using System.Text.RegularExpressions;
using System.Linq.Expressions;
using System.Data.Entity;
using System.Data.Linq;
using System.Data.Entity.ModelConfiguration;
using System.ComponentModel.DataAnnotations;

namespace Gravitybox.Datastore.EFDAL.Entity
{
	/// <summary>
	/// The 'LockStat' entity
	/// </summary>
	[DataContract]
	[Serializable]
	[System.CodeDom.Compiler.GeneratedCode("nHydrateModelGenerator", "6.0.0")]
	[FieldNameConstants(typeof(Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants))]
	[System.ComponentModel.DataAnnotations.MetadataType(typeof(Gravitybox.Datastore.EFDAL.Entity.Metadata.LockStatMetadata))]
	[EntityMetadata("LockStat", false, false, false, false, "", true, false, false, "dbo")]
	public partial class LockStat : BaseEntity, Gravitybox.Datastore.EFDAL.IBusinessObject, System.ICloneable, Gravitybox.Datastore.EFDAL.ICreatable
	{
		#region FieldNameConstants Enumeration

		/// <summary>
		/// Enumeration to define each property that maps to a database field for the 'LockStat' table.
		/// </summary>
		public enum FieldNameConstants
		{
			/// <summary>
			/// Field mapping for the 'CurrentReadCount' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'CurrentReadCount' property")]
			CurrentReadCount,
			/// <summary>
			/// Field mapping for the 'DateStamp' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'DateStamp' property")]
			DateStamp,
			/// <summary>
			/// Field mapping for the 'Elapsed' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'Elapsed' property")]
			Elapsed,
			/// <summary>
			/// Field mapping for the 'Failure' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'Failure' property")]
			Failure,
			/// <summary>
			/// Field mapping for the 'IsWriteLockHeld' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'IsWriteLockHeld' property")]
			IsWriteLockHeld,
			/// <summary>
			/// Field mapping for the 'LockStatId' property
			/// </summary>
			[System.ComponentModel.DataAnnotations.Key]
			[System.ComponentModel.ReadOnly(true)]
			[System.ComponentModel.Description("Field mapping for the 'LockStatId' property")]
			LockStatId,
			/// <summary>
			/// Field mapping for the 'ThreadId' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'ThreadId' property")]
			ThreadId,
			/// <summary>
			/// Field mapping for the 'TraceInfo' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'TraceInfo' property")]
			TraceInfo,
			/// <summary>
			/// Field mapping for the 'WaitingReadCount' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'WaitingReadCount' property")]
			WaitingReadCount,
			/// <summary>
			/// Field mapping for the 'WaitingWriteCount' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'WaitingWriteCount' property")]
			WaitingWriteCount,
		}
		#endregion

		#region Constructors

		/// <summary>
		/// Initializes a new instance of the Gravitybox.Datastore.EFDAL.Entity.LockStat class
		/// </summary>
		public LockStat()
		{

		}

		#endregion

		#region Properties

		/// <summary>
		/// The property that maps back to the database 'LockStat.CurrentReadCount' field.
		/// </summary>
		/// <remarks>Field: [LockStat].[CurrentReadCount], Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("CurrentReadCount")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int CurrentReadCount
		{
			get { return _currentReadCount; }
			set
			{
				_currentReadCount = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'LockStat.DateStamp' field.
		/// </summary>
		/// <remarks>Field: [LockStat].[DateStamp], Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("DateStamp")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual DateTime DateStamp
		{
			get { return _dateStamp; }
			set
			{
				if ((value < GlobalValues.MIN_DATETIME)) throw new Exception("The DateTime value 'DateStamp' (" + value.ToString("yyyy-MM-dd HH:mm:ss") + ") cannot be less than " + GlobalValues.MIN_DATETIME.ToString());
				if ((value > GlobalValues.MAX_DATETIME)) throw new Exception("The DateTime value 'DateStamp' (" + value.ToString("yyyy-MM-dd HH:mm:ss") + ") cannot be greater than " + GlobalValues.MAX_DATETIME.ToString());
				_dateStamp = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'LockStat.Elapsed' field.
		/// </summary>
		/// <remarks>Field: [LockStat].[Elapsed], Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("Elapsed")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int Elapsed
		{
			get { return _elapsed; }
			set
			{
				_elapsed = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'LockStat.Failure' field.
		/// </summary>
		/// <remarks>Field: [LockStat].[Failure], Not Nullable, Indexed</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("Failure")]
		[System.ComponentModel.DataAnnotations.Schema.Index()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual bool Failure
		{
			get { return _failure; }
			set
			{
				_failure = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'LockStat.IsWriteLockHeld' field.
		/// </summary>
		/// <remarks>Field: [LockStat].[IsWriteLockHeld], Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("IsWriteLockHeld")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual bool IsWriteLockHeld
		{
			get { return _isWriteLockHeld; }
			set
			{
				_isWriteLockHeld = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'LockStat.LockStatId' field.
		/// </summary>
		/// <remarks>Field: [LockStat].[LockStatId], Not Nullable, Primary Key, AutoNumber, Unique, Indexed</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("LockStatId")]
		[System.ComponentModel.DataAnnotations.Schema.Index(IsUnique = true)]
		[System.ComponentModel.DataAnnotations.Key()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int LockStatId
		{
			get { return _lockStatId; }
			protected internal set
			{
				_lockStatId = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'LockStat.ThreadId' field.
		/// </summary>
		/// <remarks>Field: [LockStat].[ThreadId], Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("ThreadId")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int ThreadId
		{
			get { return _threadId; }
			set
			{
				_threadId = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'LockStat.TraceInfo' field.
		/// </summary>
		/// <remarks>Field: [LockStat].[TraceInfo], Field Length: 50, Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("TraceInfo")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual string TraceInfo
		{
			get { return _traceInfo; }
			set
			{
				if ((value != null) && (value.Length > GetMaxLength(Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.TraceInfo))) throw new Exception(string.Format(GlobalValues.ERROR_DATA_TOO_BIG, value, "LockStat.TraceInfo", GetMaxLength(Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.TraceInfo)));
				_traceInfo = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'LockStat.WaitingReadCount' field.
		/// </summary>
		/// <remarks>Field: [LockStat].[WaitingReadCount], Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("WaitingReadCount")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int WaitingReadCount
		{
			get { return _waitingReadCount; }
			set
			{
				_waitingReadCount = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'LockStat.WaitingWriteCount' field.
		/// </summary>
		/// <remarks>Field: [LockStat].[WaitingWriteCount], Not Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("WaitingWriteCount")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int WaitingWriteCount
		{
			get { return _waitingWriteCount; }
			set
			{
				_waitingWriteCount = value;
			}
		}

		#endregion

		#region Property Holders

		/// <summary />
		protected int _currentReadCount;
		/// <summary />
		protected DateTime _dateStamp;
		/// <summary />
		protected int _elapsed;
		/// <summary />
		protected bool _failure;
		/// <summary />
		protected bool _isWriteLockHeld;
		/// <summary />
		protected int _lockStatId;
		/// <summary />
		protected int _threadId;
		/// <summary />
		protected string _traceInfo;
		/// <summary />
		protected int _waitingReadCount;
		/// <summary />
		protected int _waitingWriteCount;

		#endregion

		#region GetMaxLength

		/// <summary>
		/// Gets the maximum size of the field value.
		/// </summary>
		public static int GetMaxLength(Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants field)
		{
			switch (field)
			{
				case Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.CurrentReadCount:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.DateStamp:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.Elapsed:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.Failure:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.IsWriteLockHeld:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.LockStatId:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.ThreadId:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.TraceInfo:
					return 50;
				case Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.WaitingReadCount:
					return 0;
				case Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.WaitingWriteCount:
					return 0;
			}
			return 0;
		}

		int Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetMaxLength(Enum field)
		{
			return GetMaxLength((Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants)field);
		}

		#endregion

		#region GetFieldNameConstants

		System.Type Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetFieldNameConstants()
		{
			return typeof(Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants);
		}

		#endregion

		#region GetFieldType

		/// <summary>
		/// Gets the system type of a field on this object
		/// </summary>
		public static System.Type GetFieldType(Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants field)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants'.");

			switch ((Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants)field)
			{
				case Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.CurrentReadCount: return typeof(int);
				case Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.DateStamp: return typeof(DateTime);
				case Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.Elapsed: return typeof(int);
				case Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.Failure: return typeof(bool);
				case Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.IsWriteLockHeld: return typeof(bool);
				case Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.LockStatId: return typeof(int);
				case Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.ThreadId: return typeof(int);
				case Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.TraceInfo: return typeof(string);
				case Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.WaitingReadCount: return typeof(int);
				case Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.WaitingWriteCount: return typeof(int);
			}
			return null;
		}

		System.Type Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetFieldType(Enum field)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants'.");

			return GetFieldType((Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants)field);
		}

		#endregion

		#region Get/Set Value

		object Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetValue(System.Enum field)
		{
			return ((Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject)this).GetValue(field, null);
		}

		object Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.GetValue(System.Enum field, object defaultValue)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants'.");
			return this.GetValue((Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants)field, defaultValue);
		}

		void Gravitybox.Datastore.EFDAL.IBusinessObject.SetValue(System.Enum field, object newValue)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants'.");
			this.SetValue((Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants)field, newValue);
		}

		void Gravitybox.Datastore.EFDAL.IBusinessObject.SetValue(System.Enum field, object newValue, bool fixLength)
		{
			if (field.GetType() != typeof(Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants'.");
			this.SetValue((Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants)field, newValue, fixLength);
		}

		#endregion

		#region PrimaryKey

		/// <summary>
		/// Generic primary key for this object
		/// </summary>
		Gravitybox.Datastore.EFDAL.IPrimaryKey Gravitybox.Datastore.EFDAL.IReadOnlyBusinessObject.PrimaryKey
		{
			get { return new PrimaryKey(Util.HashPK("LockStat", this.LockStatId)); }
		}

		#endregion

		#region Clone

		/// <summary>
		/// Creates a shallow copy of this object
		/// </summary>
		public virtual object Clone()
		{
			return Gravitybox.Datastore.EFDAL.Entity.LockStat.Clone(this);
		}

		/// <summary>
		/// Creates a shallow copy of this object with defined, default values and new PK
		/// </summary>
		public virtual object CloneAsNew()
		{
			var item = Gravitybox.Datastore.EFDAL.Entity.LockStat.Clone(this);
			item._lockStatId = 0;
			return item;
		}

		/// <summary>
		/// Creates a shallow copy of this object
		/// </summary>
		public static LockStat Clone(Gravitybox.Datastore.EFDAL.Entity.LockStat item)
		{
			var newItem = new LockStat();
			newItem.CurrentReadCount = item.CurrentReadCount;
			newItem.DateStamp = item.DateStamp;
			newItem.Elapsed = item.Elapsed;
			newItem.Failure = item.Failure;
			newItem.IsWriteLockHeld = item.IsWriteLockHeld;
			newItem.LockStatId = item.LockStatId;
			newItem.ThreadId = item.ThreadId;
			newItem.TraceInfo = item.TraceInfo;
			newItem.WaitingReadCount = item.WaitingReadCount;
			newItem.WaitingWriteCount = item.WaitingWriteCount;
			return newItem;
		}

		#endregion

		#region GetValue

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		public virtual object GetValue(Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants field)
		{
			return GetValue(field, null);
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		public virtual object GetValue(Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants field, object defaultValue)
		{
			if (field == Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.CurrentReadCount)
				return this.CurrentReadCount;
			if (field == Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.DateStamp)
				return this.DateStamp;
			if (field == Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.Elapsed)
				return this.Elapsed;
			if (field == Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.Failure)
				return this.Failure;
			if (field == Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.IsWriteLockHeld)
				return this.IsWriteLockHeld;
			if (field == Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.LockStatId)
				return this.LockStatId;
			if (field == Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.ThreadId)
				return this.ThreadId;
			if (field == Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.TraceInfo)
				return ((this.TraceInfo == null) ? defaultValue : this.TraceInfo);
			if (field == Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.WaitingReadCount)
				return this.WaitingReadCount;
			if (field == Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.WaitingWriteCount)
				return this.WaitingWriteCount;
			throw new Exception("Field '" + field.ToString() + "' not found!");
		}

		#endregion

		#region SetValue

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="field">The field to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		public virtual void SetValue(Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants field, object newValue)
		{
			SetValue(field, newValue, false);
		}

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="field">The field to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		/// <param name="fixLength">Determines if the length should be truncated if too long. When false, an error will be raised if data is too large to be assigned to the field.</param>
		public virtual void SetValue(Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants field, object newValue, bool fixLength)
		{
			if (field == Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.CurrentReadCount)
			{
				this.CurrentReadCount = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'CurrentReadCount' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.DateStamp)
			{
				this.DateStamp = GlobalValues.SetValueHelperDateTimeNotNullableInternal(newValue, "Field 'DateStamp' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.Elapsed)
			{
				this.Elapsed = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'Elapsed' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.Failure)
			{
				this.Failure = GlobalValues.SetValueHelperBoolNotNullableInternal(newValue, "Field 'Failure' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.IsWriteLockHeld)
			{
				this.IsWriteLockHeld = GlobalValues.SetValueHelperBoolNotNullableInternal(newValue, "Field 'IsWriteLockHeld' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.LockStatId)
			{
				throw new Exception("Field '" + field.ToString() + "' is a primary key and cannot be set!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.ThreadId)
			{
				this.ThreadId = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'ThreadId' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.TraceInfo)
			{
				this.TraceInfo = GlobalValues.SetValueHelperInternal((string)newValue, fixLength, GetMaxLength(field));
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.WaitingReadCount)
			{
				this.WaitingReadCount = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'WaitingReadCount' does not allow null values!");
			}
			else if (field == Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants.WaitingWriteCount)
			{
				this.WaitingWriteCount = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'WaitingWriteCount' does not allow null values!");
			}
			else
				throw new Exception("Field '" + field.ToString() + "' not found!");
		}

		#endregion

		#region Navigation Properties

		#endregion

		#region Static SQL Methods

		internal static string GetFieldAliasFromFieldNameSqlMapping(string alias)
		{
			alias = alias.Replace("[", string.Empty).Replace("]", string.Empty);
			switch (alias.ToLower())
			{
				case "currentreadcount": return "currentreadcount";
				case "datestamp": return "datestamp";
				case "elapsed": return "elapsed";
				case "failure": return "failure";
				case "iswritelockheld": return "iswritelockheld";
				case "lockstatid": return "lockstatid";
				case "threadid": return "threadid";
				case "traceinfo": return "traceinfo";
				case "waitingreadcount": return "waitingreadcount";
				case "waitingwritecount": return "waitingwritecount";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetTableFromFieldAliasSqlMapping(string alias)
		{
			switch (alias.ToLower())
			{
				case "currentreadcount": return "LockStat";
				case "datestamp": return "LockStat";
				case "elapsed": return "LockStat";
				case "failure": return "LockStat";
				case "iswritelockheld": return "LockStat";
				case "lockstatid": return "LockStat";
				case "threadid": return "LockStat";
				case "traceinfo": return "LockStat";
				case "waitingreadcount": return "LockStat";
				case "waitingwritecount": return "LockStat";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetTableFromFieldNameSqlMapping(string field)
		{
			switch (field.ToLower())
			{
				case "currentreadcount": return "LockStat";
				case "datestamp": return "LockStat";
				case "elapsed": return "LockStat";
				case "failure": return "LockStat";
				case "iswritelockheld": return "LockStat";
				case "lockstatid": return "LockStat";
				case "threadid": return "LockStat";
				case "traceinfo": return "LockStat";
				case "waitingreadcount": return "LockStat";
				case "waitingwritecount": return "LockStat";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetRemappedLinqSql(string sql, string parentAlias, LinqSQLFromClauseCollection childTables)
		{
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[currentreadcount\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "LockStat") + "].[currentreadcount]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[datestamp\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "LockStat") + "].[datestamp]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[elapsed\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "LockStat") + "].[elapsed]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[failure\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "LockStat") + "].[failure]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[iswritelockheld\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "LockStat") + "].[iswritelockheld]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[lockstatid\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "LockStat") + "].[lockstatid]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[threadid\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "LockStat") + "].[threadid]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[traceinfo\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "LockStat") + "].[traceinfo]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[waitingreadcount\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "LockStat") + "].[waitingreadcount]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[waitingwritecount\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "LockStat") + "].[waitingwritecount]", RegexOptions.IgnoreCase);
			return sql;
		}

		#endregion

		#region DeleteData

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.LockStatQuery, bool>> where)
		{
			return DeleteData(where: where, optimizer: new QueryOptimizer(), startup: new ContextStartup(null), connectionString: Gravitybox.Datastore.EFDAL.DatastoreEntities.GetConnectionString());
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="optimizer">The optimization object to use for running queries</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.LockStatQuery, bool>> where, QueryOptimizer optimizer)
		{
			return DeleteData(where: where, optimizer: optimizer, startup: new ContextStartup(null), connectionString: Gravitybox.Datastore.EFDAL.DatastoreEntities.GetConnectionString());
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="connectionString">The database connection string to use for this access</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.LockStatQuery, bool>> where, string connectionString)
		{
			return DeleteData(where: where, optimizer: new QueryOptimizer(), startup: new ContextStartup(null), connectionString: connectionString);
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="optimizer">The optimization object to use for running queries</param>
		/// <param name="startup">The startup options</param>
		/// <param name="connectionString">The database connection string to use for this access</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.Datastore.EFDAL.LockStatQuery, bool>> where, QueryOptimizer optimizer, ContextStartup startup, string connectionString)
		{
			if (optimizer == null)
				optimizer = new QueryOptimizer();
				if (startup == null) startup = new ContextStartup(null);

			using (var connection = Gravitybox.Datastore.EFDAL.DBHelper.GetConnection(Gravitybox.Datastore.EFDAL.Util.StripEFCS2Normal(connectionString)))
			{
				using (var dc = new DataContext(connection))
				{
					var template = dc.GetTable<Gravitybox.Datastore.EFDAL.LockStatQuery>();
					using (var cmd = BusinessEntityQuery.GetCommand<Gravitybox.Datastore.EFDAL.LockStatQuery>(dc, template, where))
					{
						if (!startup.DefaultTimeout && startup.CommandTimeout > 0) cmd.CommandTimeout = startup.CommandTimeout;
						else
						{
							var cb = new System.Data.SqlClient.SqlConnectionStringBuilder(connectionString);
							cmd.CommandTimeout = cb.ConnectTimeout;
						}

						var parser = LinqSQLParser.Create(cmd.CommandText, LinqSQLParser.ObjectTypeConstants.Table);
						var sql = "CREATE TABLE #t ([LockStatId] [Int])";
						sql += "set rowcount " + optimizer.ChunkSize + ";";
						sql += "INSERT INTO #t ([LockStatId])";
						sql += "SELECT [t0].[LockStatId] #t\r\n";
						sql += parser.GetFromClause(optimizer) + "\r\n";
						sql += parser.GetWhereClause();
						sql += "\r\n";

						var noLock = string.Empty;
						noLock = (optimizer.NoLocking ? "WITH (READUNCOMMITTED) " : string.Empty);
						sql += "DELETE [LockStat] FROM [dbo].[LockStat] " + noLock + "INNER JOIN #t ON [dbo].[LockStat].[LockStatId] = #t.[LockStatId]\r\n";
						sql += ";select @@rowcount";
						sql = "set ansi_nulls off;" + sql + ";drop table #t;";
						cmd.CommandText = sql;
						dc.Connection.Open();
						var startTime = DateTime.Now;
						var affected = 0;
						var count = 0;
						do
						{
							count = (int)cmd.ExecuteScalar();
							affected += count;
						} while (count > 0 && optimizer.ChunkSize > 0);
						var endTime = DateTime.Now;
						optimizer.TotalMilliseconds = (long)endTime.Subtract(startTime).TotalMilliseconds;
						dc.Connection.Close();
						return affected;
					}
				}
			}
		}

		#endregion

		#region UpdateData

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.LockStatQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.LockStatQuery, bool>> where, TSource newValue)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.LockStat, Gravitybox.Datastore.EFDAL.LockStatQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "LockStat", getField: GetDatabaseFieldName, hasModifyAudit: false);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.LockStatQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.LockStatQuery, bool>> where, TSource newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.LockStat, Gravitybox.Datastore.EFDAL.LockStatQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "LockStat", getField: GetDatabaseFieldName, hasModifyAudit: false, startup: null, connection: connection, transaction: transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="startup">A configuration object</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.LockStatQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.LockStatQuery, bool>> where, TSource newValue, ContextStartup startup, string connectionString)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.LockStat, Gravitybox.Datastore.EFDAL.LockStatQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "LockStat", getField: GetDatabaseFieldName, hasModifyAudit: false, startup: startup, connectionString: connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.LockStatQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.LockStatQuery, bool>> where, TSource newValue, string connectionString)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.LockStat, Gravitybox.Datastore.EFDAL.LockStatQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "LockStat", getField: GetDatabaseFieldName, hasModifyAudit: false, connectionString: connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.LockStatQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.LockStatQuery, bool>> where, Gravitybox.Datastore.EFDAL.Entity.LockStat newValue)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.LockStat, Gravitybox.Datastore.EFDAL.LockStatQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "LockStat", getField: GetDatabaseFieldName, hasModifyAudit: false);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.Datastore.EFDAL.LockStatQuery, TSource>> select, Expression<Func<Gravitybox.Datastore.EFDAL.LockStatQuery, bool>> where, Gravitybox.Datastore.EFDAL.Entity.LockStat newValue, string connectionString)
		{
			return BusinessObjectQuery<Gravitybox.Datastore.EFDAL.Entity.LockStat, Gravitybox.Datastore.EFDAL.LockStatQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "LockStat", getField: GetDatabaseFieldName, hasModifyAudit: false, connectionString: connectionString);
		}

		#endregion

		#region GetDatabaseFieldName

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		internal static string GetDatabaseFieldName(Gravitybox.Datastore.EFDAL.Entity.LockStat.FieldNameConstants field)
		{
			return GetDatabaseFieldName(field.ToString());
		}

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		internal static string GetDatabaseFieldName(string field)
		{
			switch (field)
			{
				case "CurrentReadCount": return "CurrentReadCount";
				case "DateStamp": return "DateStamp";
				case "Elapsed": return "Elapsed";
				case "Failure": return "Failure";
				case "IsWriteLockHeld": return "IsWriteLockHeld";
				case "LockStatId": return "LockStatId";
				case "ThreadId": return "ThreadId";
				case "TraceInfo": return "TraceInfo";
				case "WaitingReadCount": return "WaitingReadCount";
				case "WaitingWriteCount": return "WaitingWriteCount";
			}
			return string.Empty;
		}

		#endregion

		#region Equals
		/// <summary>
		/// Compares two objects of 'LockStat' type and determines if all properties match
		/// </summary>
		/// <returns>True if all properties match, false otherwise</returns>
		public override bool Equals(object obj)
		{
			var other = obj as Gravitybox.Datastore.EFDAL.Entity.LockStat;
			if (other == null) return false;
			return (
				other.CurrentReadCount == this.CurrentReadCount &&
				other.DateStamp == this.DateStamp &&
				other.Elapsed == this.Elapsed &&
				other.Failure == this.Failure &&
				other.IsWriteLockHeld == this.IsWriteLockHeld &&
				other.LockStatId == this.LockStatId &&
				other.ThreadId == this.ThreadId &&
				other.TraceInfo == this.TraceInfo &&
				other.WaitingReadCount == this.WaitingReadCount &&
				other.WaitingWriteCount == this.WaitingWriteCount
				);
		}

		/// <summary>
		/// Serves as a hash function for this type.
		/// </summary>
		public override int GetHashCode()
		{
			return base.GetHashCode();
		}

		#endregion

	}
}

#region Metadata Class

namespace Gravitybox.Datastore.EFDAL.Entity.Metadata
{
	/// <summary>
	/// Metadata class for the 'LockStat' entity
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("nHydrateModelGenerator", "6.0.0")]
	public partial class LockStatMetadata : Gravitybox.Datastore.EFDAL.IMetadata
	{
		#region Properties

		/// <summary>
		/// Metadata information for the 'CurrentReadCount' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'CurrentReadCount' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "CurrentReadCount", AutoGenerateField = true)]
		public object CurrentReadCount;

		/// <summary>
		/// Metadata information for the 'DateStamp' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'DateStamp' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "DateStamp", AutoGenerateField = true)]
		public object DateStamp;

		/// <summary>
		/// Metadata information for the 'Elapsed' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'Elapsed' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "Elapsed", AutoGenerateField = true)]
		public object Elapsed;

		/// <summary>
		/// Metadata information for the 'Failure' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'Failure' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "Failure", AutoGenerateField = true)]
		public object Failure;

		/// <summary>
		/// Metadata information for the 'IsWriteLockHeld' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'IsWriteLockHeld' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "IsWriteLockHeld", AutoGenerateField = true)]
		public object IsWriteLockHeld;

		/// <summary>
		/// Metadata information for the 'LockStatId' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'LockStatId' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Key()]
		[System.ComponentModel.ReadOnly(true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "LockStatId", AutoGenerateField = true)]
		public object LockStatId;

		/// <summary>
		/// Metadata information for the 'ThreadId' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'ThreadId' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "ThreadId", AutoGenerateField = true)]
		public object ThreadId;

		/// <summary>
		/// Metadata information for the 'TraceInfo' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.StringLength(50, ErrorMessage = "The property 'TraceInfo' has a maximum length of 50")]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "TraceInfo", AutoGenerateField = true)]
		public object TraceInfo;

		/// <summary>
		/// Metadata information for the 'WaitingReadCount' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'WaitingReadCount' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "WaitingReadCount", AutoGenerateField = true)]
		public object WaitingReadCount;

		/// <summary>
		/// Metadata information for the 'WaitingWriteCount' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'WaitingWriteCount' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "WaitingWriteCount", AutoGenerateField = true)]
		public object WaitingWriteCount;

		#endregion

		#region Methods
		/// <summary>
		/// Gets the underlying table name.
		/// </summary>
		public virtual string GetTableName()
		{
			return "LockStat";
		}

		/// <summary>
		/// Gets a list of all object fields with alias/code facade applied excluding inheritance.
		/// </summary>
		public virtual List<string> GetFields()
		{
			var retval = new List<string>();
			retval.Add("CurrentReadCount");
			retval.Add("DateStamp");
			retval.Add("Elapsed");
			retval.Add("Failure");
			retval.Add("IsWriteLockHeld");
			retval.Add("LockStatId");
			retval.Add("ThreadId");
			retval.Add("TraceInfo");
			retval.Add("WaitingReadCount");
			retval.Add("WaitingWriteCount");
			return retval;
		}

		/// <summary>
		/// Returns the type of the parent object if one exists.
		/// </summary>
		public virtual System.Type InheritsFrom()
		{
			return null;
		}

		/// <summary>
		/// Returns the database schema name.
		/// </summary>
		public virtual string Schema()
		{
			return "dbo";
		}

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		public virtual string GetDatabaseFieldName(string field)
		{
			switch (field)
			{
				case "CurrentReadCount": return "CurrentReadCount";
				case "DateStamp": return "DateStamp";
				case "Elapsed": return "Elapsed";
				case "Failure": return "Failure";
				case "IsWriteLockHeld": return "IsWriteLockHeld";
				case "LockStatId": return "LockStatId";
				case "ThreadId": return "ThreadId";
				case "TraceInfo": return "TraceInfo";
				case "WaitingReadCount": return "WaitingReadCount";
				case "WaitingWriteCount": return "WaitingWriteCount";
			}
			return string.Empty;
		}

		#endregion

	}

}

#endregion

#pragma warning restore 612

